{
  "language": "cpp",
  "directory": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp",
  "types": [
    {
      "name": "Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 15
        }
      },
      "preview": "class Timeline;"
    },
    {
      "name": "BoneTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 19
        }
      },
      "preview": "class BoneTimeline;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 12
        }
      },
      "preview": "class Event;"
    },
    {
      "name": "AnimationState",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 48,
          "character": 0
        },
        "end": {
          "line": 48,
          "character": 21
        }
      },
      "preview": "class AnimationState;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Animation.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 160,
          "character": 2
        }
      },
      "preview": "class SP_API Animation : public SpineObject {",
      "documentation": "Stores a list of timelines to animate a skeleton's pose over time.",
      "members": [
        {
          "name": "Animation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 78
            }
          },
          "preview": "Animation(const String &name, Vector<Timeline *> &timelines, float duration);"
        },
        {
          "name": "~Animation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 14
            }
          },
          "preview": "~Animation();"
        },
        {
          "name": "getTimelines",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 36
            }
          },
          "preview": "Vector<Timeline *> &getTimelines();",
          "documentation": "If the returned array or the timelines it contains are modified, setTimelines() must be called."
        },
        {
          "name": "setTimelines",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 50
            }
          },
          "preview": "void setTimelines(Vector<Timeline *> &timelines);"
        },
        {
          "name": "hasTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 43
            }
          },
          "preview": "bool hasTimeline(Vector<PropertyId> &ids);",
          "documentation": "Returns true if this animation contains a timeline with any of the specified property IDs."
        },
        {
          "name": "getDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 21
            }
          },
          "preview": "float getDuration();",
          "documentation": "The duration of the animation in seconds, which is usually the highest time of all frames in the timeline. The duration is\nused to know when it has completed and when it should loop back to the start."
        },
        {
          "name": "setDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 33
            }
          },
          "preview": "void setDuration(float inValue);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 142,
              "character": 64
            }
          },
          "preview": "void apply(Skeleton &skeleton, float lastTime, float time, bool loop, Vector<Event *> *pEvents, float alpha,",
          "documentation": "Applies the animation's timelines to the specified skeleton.\nSee Timeline::apply().\n@param skeleton The skeleton the animation is being applied to. This provides access to the bones, slots, and other skeleton\ncomponents the timelines may change.\n@param lastTime The last time in seconds this animation was applied. Some timelines trigger only at specific times rather\nthan every frame. Pass -1 the first time an animation is applied to ensure frame 0 is triggered.\n@param time The time in seconds the skeleton is being posed for. Most timelines find the frame before and the frame after\nthis time and interpolate between the frame values. If beyond the getDuration() and loop is\ntrue then the animation will repeat, else the last frame will be applied.\n@param loop If true, the animation repeats after the getDuration().\n@param events If any events are fired, they are added to this list. Can be null to ignore fired events or if no timelines\nfire events.\n@param alpha 0 applies the current or setup values (depending on blend). 1 applies the timeline values. Between\n0 and 1 applies values between the current or setup values and the timeline values. By adjusting\nalpha over time, an animation can be mixed in or out. alpha can also be useful to apply\nanimations on top of each other (layering).\n@param blend Controls how mixing is applied when alpha < 1.\n@param direction Indicates whether the timelines are mixing in or out. Used by timelines which perform instant transitions,\nsuch as DrawOrderTimeline or AttachmentTimeline."
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 25
            }
          },
          "preview": "const String &getName();",
          "documentation": "The animation's name, which is unique across all animations in the skeleton."
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 31
            }
          },
          "preview": "const Vector<int> &getBones();",
          "documentation": "The bone indices affected by this animation."
        },
        {
          "name": "search",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 151,
              "character": 0
            },
            "end": {
              "line": 151,
              "character": 56
            }
          },
          "preview": "static int search(Vector<float> &values, float target);",
          "documentation": "@param target After the first and before the last entry."
        },
        {
          "name": "search",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 153,
              "character": 0
            },
            "end": {
              "line": 153,
              "character": 66
            }
          },
          "preview": "static int search(Vector<float> &values, float target, int step);"
        },
        {
          "name": "_timelines",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 31
            }
          },
          "preview": "Vector<Timeline *> _timelines;"
        },
        {
          "name": "_timelineIds",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 156,
              "character": 40
            }
          },
          "preview": "HashMap<PropertyId, bool> _timelineIds;"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 157,
              "character": 0
            },
            "end": {
              "line": 157,
              "character": 20
            }
          },
          "preview": "Vector<int> _bones;"
        },
        {
          "name": "_duration",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 17
            }
          },
          "preview": "float _duration;"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 14
            }
          },
          "preview": "String _name;"
        }
      ]
    },
    {
      "name": "EventType",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 2
        }
      },
      "preview": "enum EventType {",
      "members": []
    },
    {
      "name": "EventType_Start",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 21
        }
      },
      "preview": "EventType_Start = 0,"
    },
    {
      "name": "EventType_Interrupt",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 48,
          "character": 0
        },
        "end": {
          "line": 48,
          "character": 21
        }
      },
      "preview": "EventType_Interrupt,"
    },
    {
      "name": "EventType_End",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 15
        }
      },
      "preview": "EventType_End,"
    },
    {
      "name": "EventType_Complete",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 50,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 20
        }
      },
      "preview": "EventType_Complete,"
    },
    {
      "name": "EventType_Dispose",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 19
        }
      },
      "preview": "EventType_Dispose,"
    },
    {
      "name": "EventType_Event",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 52,
          "character": 17
        }
      },
      "preview": "EventType_Event"
    },
    {
      "name": "AnimationState",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 21
        }
      },
      "preview": "class AnimationState;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "TrackEntry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 17
        }
      },
      "preview": "class TrackEntry;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 12
        }
      },
      "preview": "class Event;"
    },
    {
      "name": "AnimationStateData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 25
        }
      },
      "preview": "class AnimationStateData;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "RotateTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 21
        }
      },
      "preview": "class RotateTimeline;"
    },
    {
      "name": "AttachmentTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 25
        }
      },
      "preview": "class AttachmentTimeline;"
    },
    {
      "name": "AnimationStateListener",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 75,
          "character": 111
        }
      },
      "preview": "typedef void (*AnimationStateListener)(AnimationState *state, EventType type, TrackEntry *entry, Event *event);"
    },
    {
      "name": "AnimationStateListenerObject",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 80,
          "character": 0
        },
        "end": {
          "line": 88,
          "character": 2
        }
      },
      "preview": "class SP_API AnimationStateListenerObject {",
      "documentation": "Abstract class to inherit from to create a callback object",
      "members": [
        {
          "name": "AnimationStateListenerObject",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 35
            }
          },
          "preview": "AnimationStateListenerObject() {};"
        },
        {
          "name": "~AnimationStateListenerObject",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 44
            }
          },
          "preview": "virtual ~AnimationStateListenerObject() {};"
        },
        {
          "name": "callback",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 99
            }
          },
          "preview": "virtual void callback(AnimationState *state, EventType type, TrackEntry *entry, Event *event) = 0;",
          "documentation": "The callback function to be called"
        }
      ]
    },
    {
      "name": "TrackEntry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 348,
          "character": 2
        }
      },
      "preview": "class SP_API TrackEntry : public SpineObject, public HasRendererObject {",
      "documentation": "State for the playback of an animation",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "TrackEntry",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 14
            }
          },
          "preview": "TrackEntry();"
        },
        {
          "name": "~TrackEntry",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 23
            }
          },
          "preview": "virtual ~TrackEntry();"
        },
        {
          "name": "getTrackIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 21
            }
          },
          "preview": "int getTrackIndex();",
          "documentation": "The index of the track where this entry is either current or queued."
        },
        {
          "name": "getAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 27
            }
          },
          "preview": "Animation *getAnimation();",
          "documentation": "The animation to apply for this track entry."
        },
        {
          "name": "setAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 41
            }
          },
          "preview": "void setAnimation(Animation* animation);",
          "documentation": "Sets the animation for this track entry."
        },
        {
          "name": "getPrevious",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 27
            }
          },
          "preview": "TrackEntry *getPrevious();"
        },
        {
          "name": "getLoop",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 16
            }
          },
          "preview": "bool getLoop();",
          "documentation": "If true, the animation will repeat. If false, it will not, instead its last frame is applied if played beyond its duration."
        },
        {
          "name": "setLoop",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 28
            }
          },
          "preview": "void setLoop(bool inValue);"
        },
        {
          "name": "getHoldPrevious",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 24
            }
          },
          "preview": "bool getHoldPrevious();",
          "documentation": "If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\nof being mixed out.\nWhen mixing between animations that key the same property, if a lower track also keys that property then the value will\nbriefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\nwhile the second animation mixes from 0% to 100%. Setting holdPrevious to true applies the first animation\nat 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\nkeys the property, only when a higher track also keys the property.\nSnapping will occur if holdPrevious is true and this animation does not key all the same properties as the\nprevious animation."
        },
        {
          "name": "setHoldPrevious",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 36
            }
          },
          "preview": "void setHoldPrevious(bool inValue);"
        },
        {
          "name": "getReverse",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 19
            }
          },
          "preview": "bool getReverse();"
        },
        {
          "name": "setReverse",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 31
            }
          },
          "preview": "void setReverse(bool inValue);"
        },
        {
          "name": "getShortestRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 28
            }
          },
          "preview": "bool getShortestRotation();"
        },
        {
          "name": "setShortestRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 40
            }
          },
          "preview": "void setShortestRotation(bool inValue);"
        },
        {
          "name": "getDelay",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 151,
              "character": 0
            },
            "end": {
              "line": 151,
              "character": 18
            }
          },
          "preview": "float getDelay();",
          "documentation": "Seconds to postpone playing the animation. Must be >= 0. When this track entry is the current track entry,\ndelay postpones incrementing the getTrackTime(). When this track entry is queued,\ndelay is the time from the start of the previous animation to when this track entry will become the current\ntrack entry (ie when the previous track entry getTrackTime() >= this track entry's\ndelay).\ngetTimeScale() affects the delay.\nWhen passing delay <= 0 to AnimationState::addAnimation(int, Animation, bool, float) this\ndelay is set using a mix duration from AnimationStateData. To change the getMixDuration()\nafterward, use setMixDuration(float, float) so this delay is adjusted."
        },
        {
          "name": "setDelay",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 153,
              "character": 0
            },
            "end": {
              "line": 153,
              "character": 30
            }
          },
          "preview": "void setDelay(float inValue);"
        },
        {
          "name": "getTrackTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 22
            }
          },
          "preview": "float getTrackTime();",
          "documentation": "Current time in seconds this track entry has been the current track entry. The track time determines\ngetAnimationTime(). The track time can be set to start the animation at a time other than 0, without affecting\nlooping."
        },
        {
          "name": "setTrackTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 34
            }
          },
          "preview": "void setTrackTime(float inValue);"
        },
        {
          "name": "getTrackEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 169,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 21
            }
          },
          "preview": "float getTrackEnd();",
          "documentation": "The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\nvalue, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\nis reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\nproperties keyed by the animation are set to the setup pose and the track is cleared.\nIt may be desired to use AnimationState::addEmptyAnimation(int, float, float) rather than have the animation\nabruptly cease being applied."
        },
        {
          "name": "setTrackEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 171,
              "character": 0
            },
            "end": {
              "line": 171,
              "character": 33
            }
          },
          "preview": "void setTrackEnd(float inValue);"
        },
        {
          "name": "getAnimationStart",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 177,
              "character": 0
            },
            "end": {
              "line": 177,
              "character": 27
            }
          },
          "preview": "float getAnimationStart();",
          "documentation": "Seconds when this animation starts, both initially and after looping. Defaults to 0.\nWhen changing the animation start time, it often makes sense to set TrackEntry.AnimationLast to the same value to\nprevent timeline keys before the start time from triggering."
        },
        {
          "name": "setAnimationStart",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 179,
              "character": 0
            },
            "end": {
              "line": 179,
              "character": 39
            }
          },
          "preview": "void setAnimationStart(float inValue);"
        },
        {
          "name": "getAnimationEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 183,
              "character": 0
            },
            "end": {
              "line": 183,
              "character": 25
            }
          },
          "preview": "float getAnimationEnd();",
          "documentation": "Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\nloop back to TrackEntry.AnimationStart at this time. Defaults to the animation duration."
        },
        {
          "name": "setAnimationEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 185,
              "character": 0
            },
            "end": {
              "line": 185,
              "character": 37
            }
          },
          "preview": "void setAnimationEnd(float inValue);"
        },
        {
          "name": "getAnimationLast",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 190,
              "character": 0
            },
            "end": {
              "line": 190,
              "character": 26
            }
          },
          "preview": "float getAnimationLast();",
          "documentation": "The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\nanimation is applied, event timelines will fire all events between the animation last time (exclusive) and animation time\n(inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation is applied."
        },
        {
          "name": "setAnimationLast",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 192,
              "character": 0
            },
            "end": {
              "line": 192,
              "character": 38
            }
          },
          "preview": "void setAnimationLast(float inValue);"
        },
        {
          "name": "getAnimationTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 200,
              "character": 0
            },
            "end": {
              "line": 200,
              "character": 26
            }
          },
          "preview": "float getAnimationTime();",
          "documentation": "Uses getTrackTime() to compute the animationTime. When the trackTime is 0, the\nanimationTime is equal to the animationStart time.\nThe animationTime is between getAnimationStart() and getAnimationEnd(), except if this\ntrack entry is non-looping and getAnimationEnd() is >= to the animation duration, then\nanimationTime continues to increase past getAnimationEnd()."
        },
        {
          "name": "getTimeScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 22
            }
          },
          "preview": "float getTimeScale();",
          "documentation": "Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\nfaster. Defaults to 1.\nValues < 0 are not supported. To play an animation in reverse, use getReverse().\ngetMixTime() is not affected by track entry time scale, so getMixDuration() may need to be adjusted to\nmatch the animation speed.\nWhen using AnimationState::addAnimation(int, Animation, bool, float) with a delay <= 0, the\ngetDelay() is set using the mix duration from the AnimationStateData, assuming time scale to be 1. If\nthe time scale is not 1, the delay may need to be adjusted.\nSee AnimationState getTimeScale() for affecting all animations."
        },
        {
          "name": "setTimeScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 217,
              "character": 34
            }
          },
          "preview": "void setTimeScale(float inValue);"
        },
        {
          "name": "getAlpha",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 18
            }
          },
          "preview": "float getAlpha();",
          "documentation": "Values less than 1 mix this animation with the last skeleton pose. Defaults to 1, which overwrites the last skeleton pose with\nthis animation.\nTypically track 0 is used to completely pose the skeleton, then alpha can be used on higher tracks. It doesn't make sense\nto use alpha on track 0 if the skeleton pose is from the last frame render."
        },
        {
          "name": "setAlpha",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 226,
              "character": 0
            },
            "end": {
              "line": 226,
              "character": 30
            }
          },
          "preview": "void setAlpha(float inValue);"
        },
        {
          "name": "getEventThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 231,
              "character": 0
            },
            "end": {
              "line": 231,
              "character": 27
            }
          },
          "preview": "float getEventThreshold();",
          "documentation": "When the mix percentage (mix time / mix duration) is less than the event threshold, event timelines for the animation\nbeing mixed out will be applied. Defaults to 0, so event timelines are not applied for an animation being mixed out."
        },
        {
          "name": "setEventThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 233,
              "character": 0
            },
            "end": {
              "line": 233,
              "character": 39
            }
          },
          "preview": "void setEventThreshold(float inValue);"
        },
        {
          "name": "getMixAttachmentThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 238,
              "character": 0
            },
            "end": {
              "line": 238,
              "character": 35
            }
          },
          "preview": "float getMixAttachmentThreshold();",
          "documentation": "When the mix percentage (mix time / mix duration) is less than the attachment threshold, attachment timelines for the\nanimation being mixed out will be applied. Defaults to 0, so attachment timelines are not applied for an animation being\nmixed out."
        },
        {
          "name": "setMixAttachmentThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 240,
              "character": 0
            },
            "end": {
              "line": 240,
              "character": 47
            }
          },
          "preview": "void setMixAttachmentThreshold(float inValue);"
        },
        {
          "name": "getAlphaAttachmentThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 244,
              "character": 0
            },
            "end": {
              "line": 244,
              "character": 43
            }
          },
          "preview": "float getAlphaAttachmentThreshold();",
          "documentation": "When getAlpha() is greater than alphaAttachmentThreshold, attachment timelines are applied.\nDefaults to 0, so attachment timelines are always applied. */"
        },
        {
          "name": "setAlphaAttachmentThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 246,
              "character": 0
            },
            "end": {
              "line": 246,
              "character": 55
            }
          },
          "preview": "void setAlphaAttachmentThreshold(float inValue);"
        },
        {
          "name": "getMixDrawOrderThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 251,
              "character": 0
            },
            "end": {
              "line": 251,
              "character": 34
            }
          },
          "preview": "float getMixDrawOrderThreshold();",
          "documentation": "When the mix percentage (mix time / mix duration) is less than the draw order threshold, draw order timelines for the\nanimation being mixed out will be applied. Defaults to 0, so draw order timelines are not applied for an animation being\nmixed out."
        },
        {
          "name": "setMixDrawOrderThreshold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 253,
              "character": 0
            },
            "end": {
              "line": 253,
              "character": 46
            }
          },
          "preview": "void setMixDrawOrderThreshold(float inValue);"
        },
        {
          "name": "getNext",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 256,
              "character": 0
            },
            "end": {
              "line": 256,
              "character": 23
            }
          },
          "preview": "TrackEntry *getNext();",
          "documentation": "The animation queued to start after this animation, or NULL."
        },
        {
          "name": "isComplete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 259,
              "character": 0
            },
            "end": {
              "line": 259,
              "character": 19
            }
          },
          "preview": "bool isComplete();",
          "documentation": "Returns true if at least one loop has been completed."
        },
        {
          "name": "getMixTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 263,
              "character": 0
            },
            "end": {
              "line": 263,
              "character": 20
            }
          },
          "preview": "float getMixTime();",
          "documentation": "Seconds from 0 to the mix duration when mixing from the previous animation to this animation. May be slightly more than\nTrackEntry.MixDuration when the mix is complete."
        },
        {
          "name": "setMixTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 265,
              "character": 0
            },
            "end": {
              "line": 265,
              "character": 32
            }
          },
          "preview": "void setMixTime(float inValue);"
        },
        {
          "name": "getMixDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 275,
              "character": 0
            },
            "end": {
              "line": 275,
              "character": 24
            }
          },
          "preview": "float getMixDuration();",
          "documentation": "Seconds for mixing from the previous animation to this animation. Defaults to the value provided by\nAnimationStateData based on the animation before this animation (if any).\nThe mix duration can be set manually rather than use the value from AnimationStateData.GetMix.\nIn that case, the mixDuration must be set before AnimationState.update(float) is next called.\nWhen using AnimationState::addAnimation(int, Animation, bool, float) with a delay\nless than or equal to 0, note the Delay is set using the mix duration from the AnimationStateData"
        },
        {
          "name": "setMixDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 277,
              "character": 0
            },
            "end": {
              "line": 277,
              "character": 36
            }
          },
          "preview": "void setMixDuration(float inValue);"
        },
        {
          "name": "setMixDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 284,
              "character": 0
            },
            "end": {
              "line": 284,
              "character": 59
            }
          },
          "preview": "void setMixDuration(float mixDuration, float delay);",
          "documentation": "Sets both getMixDuration() and getDelay().\n@param delay If > 0, sets TrackEntry::getDelay(). If <= 0, the delay set is the duration of the previous track\nentry minus the specified mix duration plus the specified delay (ie the mix ends at\n(delay = 0) or before (delay < 0) the previous track entry duration). If the previous\nentry is looping, its next loop completion is used instead of its duration."
        },
        {
          "name": "getMixBlend",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 286,
              "character": 0
            },
            "end": {
              "line": 286,
              "character": 24
            }
          },
          "preview": "MixBlend getMixBlend();"
        },
        {
          "name": "setMixBlend",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 288,
              "character": 34
            }
          },
          "preview": "void setMixBlend(MixBlend blend);"
        },
        {
          "name": "getMixingFrom",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 292,
              "character": 29
            }
          },
          "preview": "TrackEntry *getMixingFrom();",
          "documentation": "The track entry for the previous animation when mixing from the previous animation to this animation, or NULL if no\nmixing is currently occuring. When mixing from multiple animations, MixingFrom makes up a double linked list with MixingTo."
        },
        {
          "name": "getMixingTo",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 296,
              "character": 0
            },
            "end": {
              "line": 296,
              "character": 27
            }
          },
          "preview": "TrackEntry *getMixingTo();",
          "documentation": "The track entry for the next animation when mixing from this animation, or NULL if no mixing is currently occuring.\nWhen mixing from multiple animations, MixingTo makes up a double linked list with MixingFrom."
        },
        {
          "name": "resetRotationDirections",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 305,
              "character": 0
            },
            "end": {
              "line": 305,
              "character": 32
            }
          },
          "preview": "void resetRotationDirections();",
          "documentation": "Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\nlong way around when using alpha and starting animations on other tracks.\nMixing involves finding a rotation between two others, which has two possible solutions: the short way or the long way around.\nThe two rotations likely change over time, so which direction is the short or long way also changes.\nIf the short way was always chosen, bones would flip to the other side when that direction became the long way.\nTrackEntry chooses the short way the first time it is applied and remembers that direction."
        },
        {
          "name": "getTrackComplete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 307,
              "character": 0
            },
            "end": {
              "line": 307,
              "character": 26
            }
          },
          "preview": "float getTrackComplete();"
        },
        {
          "name": "setListener",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 309,
              "character": 0
            },
            "end": {
              "line": 309,
              "character": 51
            }
          },
          "preview": "void setListener(AnimationStateListener listener);"
        },
        {
          "name": "setListener",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 311,
              "character": 0
            },
            "end": {
              "line": 311,
              "character": 58
            }
          },
          "preview": "void setListener(AnimationStateListenerObject *listener);"
        },
        {
          "name": "isEmptyAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 314,
              "character": 0
            },
            "end": {
              "line": 314,
              "character": 25
            }
          },
          "preview": "bool isEmptyAnimation();",
          "documentation": "Returns true if this entry is for the empty animation."
        },
        {
          "name": "wasApplied",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 319,
              "character": 0
            },
            "end": {
              "line": 319,
              "character": 25
            }
          },
          "preview": "bool wasApplied();",
          "documentation": "Returns true if this track entry has been applied at least once.\nSee AnimationState::apply(Skeleton)."
        },
        {
          "name": "isNextReady",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 323,
              "character": 0
            },
            "end": {
              "line": 325,
              "character": 9
            }
          },
          "preview": "bool isNextReady () {",
          "documentation": "Returns true if there is a getNext() track entry that is ready to become the current track entry during the\nnext AnimationState::update(float)}"
        },
        {
          "name": "_animation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 328,
              "character": 0
            },
            "end": {
              "line": 328,
              "character": 23
            }
          },
          "preview": "Animation *_animation;"
        },
        {
          "name": "_previous",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 329,
              "character": 0
            },
            "end": {
              "line": 329,
              "character": 23
            }
          },
          "preview": "TrackEntry *_previous;"
        },
        {
          "name": "_next",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 330,
              "character": 0
            },
            "end": {
              "line": 330,
              "character": 19
            }
          },
          "preview": "TrackEntry *_next;"
        },
        {
          "name": "_mixingFrom",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 331,
              "character": 0
            },
            "end": {
              "line": 331,
              "character": 25
            }
          },
          "preview": "TrackEntry *_mixingFrom;"
        },
        {
          "name": "_mixingTo",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 332,
              "character": 0
            },
            "end": {
              "line": 332,
              "character": 23
            }
          },
          "preview": "TrackEntry *_mixingTo;"
        },
        {
          "name": "_trackIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 333,
              "character": 0
            },
            "end": {
              "line": 333,
              "character": 17
            }
          },
          "preview": "int _trackIndex;"
        },
        {
          "name": "_loop",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 335,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 12
            }
          },
          "preview": "bool _loop, _holdPrevious, _reverse, _shortestRotation;"
        },
        {
          "name": "_holdPrevious",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 335,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 27
            }
          },
          "preview": "bool _loop, _holdPrevious, _reverse, _shortestRotation;"
        },
        {
          "name": "_reverse",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 335,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 37
            }
          },
          "preview": "bool _loop, _holdPrevious, _reverse, _shortestRotation;"
        },
        {
          "name": "_shortestRotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 335,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 56
            }
          },
          "preview": "bool _loop, _holdPrevious, _reverse, _shortestRotation;"
        },
        {
          "name": "_eventThreshold",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 336,
              "character": 0
            },
            "end": {
              "line": 336,
              "character": 23
            }
          },
          "preview": "float _eventThreshold, _mixAttachmentThreshold, _alphaAttachmentThreshold, _mixDrawOrderThreshold;"
        },
        {
          "name": "_mixAttachmentThreshold",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 336,
              "character": 0
            },
            "end": {
              "line": 336,
              "character": 48
            }
          },
          "preview": "float _eventThreshold, _mixAttachmentThreshold, _alphaAttachmentThreshold, _mixDrawOrderThreshold;"
        },
        {
          "name": "_alphaAttachmentThreshold",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 336,
              "character": 0
            },
            "end": {
              "line": 336,
              "character": 75
            }
          },
          "preview": "float _eventThreshold, _mixAttachmentThreshold, _alphaAttachmentThreshold, _mixDrawOrderThreshold;"
        },
        {
          "name": "_mixDrawOrderThreshold",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 336,
              "character": 0
            },
            "end": {
              "line": 336,
              "character": 99
            }
          },
          "preview": "float _eventThreshold, _mixAttachmentThreshold, _alphaAttachmentThreshold, _mixDrawOrderThreshold;"
        },
        {
          "name": "_animationStart",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 337,
              "character": 0
            },
            "end": {
              "line": 337,
              "character": 23
            }
          },
          "preview": "float _animationStart, _animationEnd, _animationLast, _nextAnimationLast;"
        },
        {
          "name": "_animationEnd",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 337,
              "character": 0
            },
            "end": {
              "line": 337,
              "character": 38
            }
          },
          "preview": "float _animationStart, _animationEnd, _animationLast, _nextAnimationLast;"
        },
        {
          "name": "_animationLast",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 337,
              "character": 0
            },
            "end": {
              "line": 337,
              "character": 54
            }
          },
          "preview": "float _animationStart, _animationEnd, _animationLast, _nextAnimationLast;"
        },
        {
          "name": "_nextAnimationLast",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 337,
              "character": 0
            },
            "end": {
              "line": 337,
              "character": 74
            }
          },
          "preview": "float _animationStart, _animationEnd, _animationLast, _nextAnimationLast;"
        },
        {
          "name": "_delay",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 14
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_trackTime",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 26
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_trackLast",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 38
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_nextTrackLast",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 54
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_trackEnd",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 65
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_timeScale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 77
            }
          },
          "preview": "float _delay, _trackTime, _trackLast, _nextTrackLast, _trackEnd, _timeScale;"
        },
        {
          "name": "_alpha",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 339,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 14
            }
          },
          "preview": "float _alpha, _mixTime, _mixDuration, _interruptAlpha, _totalAlpha;"
        },
        {
          "name": "_mixTime",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 339,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 24
            }
          },
          "preview": "float _alpha, _mixTime, _mixDuration, _interruptAlpha, _totalAlpha;"
        },
        {
          "name": "_mixDuration",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 339,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 38
            }
          },
          "preview": "float _alpha, _mixTime, _mixDuration, _interruptAlpha, _totalAlpha;"
        },
        {
          "name": "_interruptAlpha",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 339,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 55
            }
          },
          "preview": "float _alpha, _mixTime, _mixDuration, _interruptAlpha, _totalAlpha;"
        },
        {
          "name": "_totalAlpha",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 339,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 68
            }
          },
          "preview": "float _alpha, _mixTime, _mixDuration, _interruptAlpha, _totalAlpha;"
        },
        {
          "name": "_mixBlend",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 340,
              "character": 0
            },
            "end": {
              "line": 340,
              "character": 20
            }
          },
          "preview": "MixBlend _mixBlend;"
        },
        {
          "name": "_timelineMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 341,
              "character": 0
            },
            "end": {
              "line": 341,
              "character": 27
            }
          },
          "preview": "Vector<int> _timelineMode;"
        },
        {
          "name": "_timelineHoldMix",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 342,
              "character": 0
            },
            "end": {
              "line": 342,
              "character": 39
            }
          },
          "preview": "Vector<TrackEntry *> _timelineHoldMix;"
        },
        {
          "name": "_timelinesRotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 343,
              "character": 0
            },
            "end": {
              "line": 343,
              "character": 34
            }
          },
          "preview": "Vector<float> _timelinesRotation;"
        },
        {
          "name": "_listener",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 344,
              "character": 0
            },
            "end": {
              "line": 344,
              "character": 34
            }
          },
          "preview": "AnimationStateListener _listener;"
        },
        {
          "name": "_listenerObject",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 345,
              "character": 0
            },
            "end": {
              "line": 345,
              "character": 47
            }
          },
          "preview": "AnimationStateListenerObject *_listenerObject;"
        },
        {
          "name": "reset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 347,
              "character": 0
            },
            "end": {
              "line": 347,
              "character": 14
            }
          },
          "preview": "void reset();"
        }
      ]
    },
    {
      "name": "EventQueueEntry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 350,
          "character": 0
        },
        "end": {
          "line": 359,
          "character": 2
        }
      },
      "preview": "class SP_API EventQueueEntry : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_type",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 354,
              "character": 0
            },
            "end": {
              "line": 354,
              "character": 17
            }
          },
          "preview": "EventType _type;"
        },
        {
          "name": "_entry",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 355,
              "character": 0
            },
            "end": {
              "line": 355,
              "character": 20
            }
          },
          "preview": "TrackEntry *_entry;"
        },
        {
          "name": "_event",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 356,
              "character": 0
            },
            "end": {
              "line": 356,
              "character": 15
            }
          },
          "preview": "Event *_event;"
        },
        {
          "name": "EventQueueEntry",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 358,
              "character": 0
            },
            "end": {
              "line": 358,
              "character": 83
            }
          },
          "preview": "EventQueueEntry(EventType eventType, TrackEntry *trackEntry, Event *event = NULL);"
        }
      ]
    },
    {
      "name": "EventQueue",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 361,
          "character": 0
        },
        "end": {
          "line": 391,
          "character": 2
        }
      },
      "preview": "class SP_API EventQueue : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_eventQueueEntries",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 365,
              "character": 0
            },
            "end": {
              "line": 365,
              "character": 44
            }
          },
          "preview": "Vector<EventQueueEntry> _eventQueueEntries;"
        },
        {
          "name": "_state",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 366,
              "character": 0
            },
            "end": {
              "line": 366,
              "character": 24
            }
          },
          "preview": "AnimationState &_state;"
        },
        {
          "name": "_drainDisabled",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 367,
              "character": 0
            },
            "end": {
              "line": 367,
              "character": 21
            }
          },
          "preview": "bool _drainDisabled;"
        },
        {
          "name": "newEventQueue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 369,
              "character": 0
            },
            "end": {
              "line": 369,
              "character": 57
            }
          },
          "preview": "static EventQueue *newEventQueue(AnimationState &state);"
        },
        {
          "name": "newEventQueueEntry",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 371,
              "character": 0
            },
            "end": {
              "line": 371,
              "character": 104
            }
          },
          "preview": "static EventQueueEntry newEventQueueEntry(EventType eventType, TrackEntry *entry, Event *event = NULL);"
        },
        {
          "name": "EventQueue",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 373,
              "character": 0
            },
            "end": {
              "line": 373,
              "character": 35
            }
          },
          "preview": "EventQueue(AnimationState &state);"
        },
        {
          "name": "~EventQueue",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 375,
              "character": 0
            },
            "end": {
              "line": 375,
              "character": 15
            }
          },
          "preview": "~EventQueue();"
        },
        {
          "name": "start",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 377,
              "character": 0
            },
            "end": {
              "line": 377,
              "character": 31
            }
          },
          "preview": "void start(TrackEntry *entry);"
        },
        {
          "name": "interrupt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 379,
              "character": 0
            },
            "end": {
              "line": 379,
              "character": 35
            }
          },
          "preview": "void interrupt(TrackEntry *entry);"
        },
        {
          "name": "end",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 381,
              "character": 0
            },
            "end": {
              "line": 381,
              "character": 29
            }
          },
          "preview": "void end(TrackEntry *entry);"
        },
        {
          "name": "dispose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 383,
              "character": 0
            },
            "end": {
              "line": 383,
              "character": 33
            }
          },
          "preview": "void dispose(TrackEntry *entry);"
        },
        {
          "name": "complete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 385,
              "character": 0
            },
            "end": {
              "line": 385,
              "character": 34
            }
          },
          "preview": "void complete(TrackEntry *entry);"
        },
        {
          "name": "event",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 387,
              "character": 0
            },
            "end": {
              "line": 387,
              "character": 45
            }
          },
          "preview": "void event(TrackEntry *entry, Event *event);"
        },
        {
          "name": "drain",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 390,
              "character": 0
            },
            "end": {
              "line": 390,
              "character": 14
            }
          },
          "preview": "void drain();",
          "documentation": "Raises all events in the queue and drains the queue."
        }
      ]
    },
    {
      "name": "AnimationState",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationState.h",
      "range": {
        "start": {
          "line": 393,
          "character": 0
        },
        "end": {
          "line": 552,
          "character": 2
        }
      },
      "preview": "class SP_API AnimationState : public SpineObject, public HasRendererObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "AnimationState",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 399,
              "character": 0
            },
            "end": {
              "line": 399,
              "character": 51
            }
          },
          "preview": "explicit AnimationState(AnimationStateData *data);"
        },
        {
          "name": "~AnimationState",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 401,
              "character": 0
            },
            "end": {
              "line": 401,
              "character": 19
            }
          },
          "preview": "~AnimationState();"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 405,
              "character": 0
            },
            "end": {
              "line": 405,
              "character": 26
            }
          },
          "preview": "void update(float delta);",
          "documentation": "Increments the track entry times, setting queued animations as current if needed\n@param delta delta time"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 409,
              "character": 0
            },
            "end": {
              "line": 409,
              "character": 32
            }
          },
          "preview": "bool apply(Skeleton &skeleton);",
          "documentation": "Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\nanimation state can be applied to multiple skeletons to pose them identically."
        },
        {
          "name": "clearTracks",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 414,
              "character": 0
            },
            "end": {
              "line": 414,
              "character": 20
            }
          },
          "preview": "void clearTracks();",
          "documentation": "Removes all animations from all tracks, leaving skeletons in their previous pose.\nIt may be desired to use AnimationState.setEmptyAnimations(float) to mix the skeletons back to the setup pose,\nrather than leaving them in their previous pose."
        },
        {
          "name": "clearTrack",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 419,
              "character": 0
            },
            "end": {
              "line": 419,
              "character": 36
            }
          },
          "preview": "void clearTrack(size_t trackIndex);",
          "documentation": "Removes all animations from the tracks, leaving skeletons in their previous pose.\nIt may be desired to use AnimationState.setEmptyAnimations(float) to mix the skeletons back to the setup pose,\nrather than leaving them in their previous pose."
        },
        {
          "name": "setAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 422,
              "character": 0
            },
            "end": {
              "line": 422,
              "character": 85
            }
          },
          "preview": "TrackEntry *setAnimation(size_t trackIndex, const String &animationName, bool loop);",
          "documentation": "Sets an animation by name. setAnimation(int, Animation, bool)"
        },
        {
          "name": "setAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 431,
              "character": 0
            },
            "end": {
              "line": 431,
              "character": 78
            }
          },
          "preview": "TrackEntry *setAnimation(size_t trackIndex, Animation *animation, bool loop);",
          "documentation": "Sets the current animation for a track, discarding any queued animations.\n@param loop If true, the animation will repeat.\nIf false, it will not, instead its last frame is applied if played beyond its duration.\nIn either case TrackEntry.TrackEnd determines when the track is cleared.\n@return\nA track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter AnimationState.Dispose."
        },
        {
          "name": "addAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 435,
              "character": 0
            },
            "end": {
              "line": 435,
              "character": 98
            }
          },
          "preview": "TrackEntry *addAnimation(size_t trackIndex, const String &animationName, bool loop, float delay);",
          "documentation": "Queues an animation by name.\naddAnimation(int, Animation, bool, float)"
        },
        {
          "name": "addAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 445,
              "character": 0
            },
            "end": {
              "line": 445,
              "character": 91
            }
          },
          "preview": "TrackEntry *addAnimation(size_t trackIndex, Animation *animation, bool loop, float delay);",
          "documentation": "Adds an animation to be played delay seconds after the current or last queued animation\nfor a track. If the track is empty, it is equivalent to calling setAnimation.\n@param delay\nSeconds to begin this animation after the start of the previous animation. May be &lt;= 0 to use the animation\nduration of the previous track minus any mix duration plus the negative delay.\n@return A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter AnimationState.Dispose"
        },
        {
          "name": "setEmptyAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 448,
              "character": 0
            },
            "end": {
              "line": 448,
              "character": 69
            }
          },
          "preview": "TrackEntry *setEmptyAnimation(size_t trackIndex, float mixDuration);",
          "documentation": "Sets an empty animation for a track, discarding any queued animations, and mixes to it over the specified mix duration."
        },
        {
          "name": "addEmptyAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 459,
              "character": 0
            },
            "end": {
              "line": 459,
              "character": 82
            }
          },
          "preview": "TrackEntry *addEmptyAnimation(size_t trackIndex, float mixDuration, float delay);",
          "documentation": "Adds an empty animation to be played after the current or last queued animation for a track, and mixes to it over the\nspecified mix duration.\n@return\nA track entry to allow further customization of animation playback. References to the track entry must not be kept after AnimationState.Dispose.\n@param trackIndex Track number.\n@param mixDuration Mix duration.\n@param delay Seconds to begin this animation after the start of the previous animation. May be &lt;= 0 to use the animation\nduration of the previous track minus any mix duration plus the negative delay."
        },
        {
          "name": "setEmptyAnimations",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 462,
              "character": 0
            },
            "end": {
              "line": 462,
              "character": 44
            }
          },
          "preview": "void setEmptyAnimations(float mixDuration);",
          "documentation": "Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix duration."
        },
        {
          "name": "getCurrent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 465,
              "character": 0
            },
            "end": {
              "line": 465,
              "character": 43
            }
          },
          "preview": "TrackEntry *getCurrent(size_t trackIndex);",
          "documentation": "@return The track entry for the animation currently playing on the track, or NULL if no animation is currently playing."
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 467,
              "character": 0
            },
            "end": {
              "line": 467,
              "character": 31
            }
          },
          "preview": "AnimationStateData *getData();"
        },
        {
          "name": "getTracks",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 470,
              "character": 0
            },
            "end": {
              "line": 470,
              "character": 35
            }
          },
          "preview": "Vector<TrackEntry *> &getTracks();",
          "documentation": "A list of tracks that have animations, which may contain NULLs."
        },
        {
          "name": "getTimeScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 472,
              "character": 0
            },
            "end": {
              "line": 472,
              "character": 22
            }
          },
          "preview": "float getTimeScale();"
        },
        {
          "name": "setTimeScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 474,
              "character": 0
            },
            "end": {
              "line": 474,
              "character": 34
            }
          },
          "preview": "void setTimeScale(float inValue);"
        },
        {
          "name": "setListener",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 476,
              "character": 0
            },
            "end": {
              "line": 476,
              "character": 51
            }
          },
          "preview": "void setListener(AnimationStateListener listener);"
        },
        {
          "name": "setListener",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 478,
              "character": 0
            },
            "end": {
              "line": 478,
              "character": 58
            }
          },
          "preview": "void setListener(AnimationStateListenerObject *listener);"
        },
        {
          "name": "disableQueue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 480,
              "character": 0
            },
            "end": {
              "line": 480,
              "character": 21
            }
          },
          "preview": "void disableQueue();"
        },
        {
          "name": "enableQueue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 482,
              "character": 0
            },
            "end": {
              "line": 482,
              "character": 20
            }
          },
          "preview": "void enableQueue();"
        },
        {
          "name": "setManualTrackEntryDisposal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 484,
              "character": 0
            },
            "end": {
              "line": 484,
              "character": 48
            }
          },
          "preview": "void setManualTrackEntryDisposal(bool inValue);"
        },
        {
          "name": "getManualTrackEntryDisposal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 486,
              "character": 0
            },
            "end": {
              "line": 486,
              "character": 42
            }
          },
          "preview": "bool getManualTrackEntryDisposal();"
        },
        {
          "name": "disposeTrackEntry",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 488,
              "character": 0
            },
            "end": {
              "line": 488,
              "character": 43
            }
          },
          "preview": "void disposeTrackEntry(TrackEntry *entry);"
        },
        {
          "name": "Subsequent",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 491,
              "character": 0
            },
            "end": {
              "line": 491,
              "character": 33
            }
          },
          "preview": "static const int Subsequent = 0;"
        },
        {
          "name": "First",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 492,
              "character": 0
            },
            "end": {
              "line": 492,
              "character": 28
            }
          },
          "preview": "static const int First = 1;"
        },
        {
          "name": "HoldSubsequent",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 493,
              "character": 0
            },
            "end": {
              "line": 493,
              "character": 37
            }
          },
          "preview": "static const int HoldSubsequent = 2;"
        },
        {
          "name": "HoldFirst",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 494,
              "character": 0
            },
            "end": {
              "line": 494,
              "character": 32
            }
          },
          "preview": "static const int HoldFirst = 3;"
        },
        {
          "name": "HoldMix",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 495,
              "character": 0
            },
            "end": {
              "line": 495,
              "character": 30
            }
          },
          "preview": "static const int HoldMix = 4;"
        },
        {
          "name": "Setup",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 497,
              "character": 0
            },
            "end": {
              "line": 497,
              "character": 28
            }
          },
          "preview": "static const int Setup = 1;"
        },
        {
          "name": "Current",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 498,
              "character": 0
            },
            "end": {
              "line": 498,
              "character": 30
            }
          },
          "preview": "static const int Current = 2;"
        },
        {
          "name": "_data",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 500,
              "character": 0
            },
            "end": {
              "line": 500,
              "character": 27
            }
          },
          "preview": "AnimationStateData *_data;"
        },
        {
          "name": "_trackEntryPool",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 502,
              "character": 0
            },
            "end": {
              "line": 502,
              "character": 34
            }
          },
          "preview": "Pool<TrackEntry> _trackEntryPool;"
        },
        {
          "name": "_tracks",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 503,
              "character": 0
            },
            "end": {
              "line": 503,
              "character": 30
            }
          },
          "preview": "Vector<TrackEntry *> _tracks;"
        },
        {
          "name": "_events",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 504,
              "character": 0
            },
            "end": {
              "line": 504,
              "character": 25
            }
          },
          "preview": "Vector<Event *> _events;"
        },
        {
          "name": "_queue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 505,
              "character": 0
            },
            "end": {
              "line": 505,
              "character": 20
            }
          },
          "preview": "EventQueue *_queue;"
        },
        {
          "name": "_propertyIDs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 507,
              "character": 0
            },
            "end": {
              "line": 507,
              "character": 40
            }
          },
          "preview": "HashMap<PropertyId, bool> _propertyIDs;"
        },
        {
          "name": "_animationsChanged",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 508,
              "character": 0
            },
            "end": {
              "line": 508,
              "character": 25
            }
          },
          "preview": "bool _animationsChanged;"
        },
        {
          "name": "_listener",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 510,
              "character": 0
            },
            "end": {
              "line": 510,
              "character": 34
            }
          },
          "preview": "AnimationStateListener _listener;"
        },
        {
          "name": "_listenerObject",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 511,
              "character": 0
            },
            "end": {
              "line": 511,
              "character": 47
            }
          },
          "preview": "AnimationStateListenerObject *_listenerObject;"
        },
        {
          "name": "_unkeyedState",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 513,
              "character": 0
            },
            "end": {
              "line": 513,
              "character": 19
            }
          },
          "preview": "int _unkeyedState;"
        },
        {
          "name": "_timeScale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 515,
              "character": 0
            },
            "end": {
              "line": 515,
              "character": 18
            }
          },
          "preview": "float _timeScale;"
        },
        {
          "name": "_manualTrackEntryDisposal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 517,
              "character": 0
            },
            "end": {
              "line": 517,
              "character": 32
            }
          },
          "preview": "bool _manualTrackEntryDisposal;"
        },
        {
          "name": "getEmptyAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 519,
              "character": 0
            },
            "end": {
              "line": 519,
              "character": 39
            }
          },
          "preview": "static Animation *getEmptyAnimation();"
        },
        {
          "name": "applyRotateTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 522,
              "character": 0
            },
            "end": {
              "line": 523,
              "character": 67
            }
          },
          "preview": "applyRotateTimeline(RotateTimeline *rotateTimeline, Skeleton &skeleton, float time, float alpha, MixBlend pose,"
        },
        {
          "name": "applyAttachmentTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 525,
              "character": 0
            },
            "end": {
              "line": 526,
              "character": 41
            }
          },
          "preview": "void applyAttachmentTimeline(AttachmentTimeline *attachmentTimeline, Skeleton &skeleton, float animationTime,"
        },
        {
          "name": "updateMixingFrom",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 529,
              "character": 0
            },
            "end": {
              "line": 529,
              "character": 52
            }
          },
          "preview": "bool updateMixingFrom(TrackEntry *to, float delta);",
          "documentation": "Returns true when all mixing from entries are complete."
        },
        {
          "name": "applyMixingFrom",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 531,
              "character": 0
            },
            "end": {
              "line": 531,
              "character": 81
            }
          },
          "preview": "float applyMixingFrom(TrackEntry *to, Skeleton &skeleton, MixBlend currentPose);"
        },
        {
          "name": "queueEvents",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 533,
              "character": 0
            },
            "end": {
              "line": 533,
              "character": 58
            }
          },
          "preview": "void queueEvents(TrackEntry *entry, float animationTime);"
        },
        {
          "name": "setCurrent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 536,
              "character": 0
            },
            "end": {
              "line": 536,
              "character": 68
            }
          },
          "preview": "void setCurrent(size_t index, TrackEntry *current, bool interrupt);",
          "documentation": "Sets the active TrackEntry for a given track number."
        },
        {
          "name": "clearNext",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 539,
              "character": 0
            },
            "end": {
              "line": 539,
              "character": 35
            }
          },
          "preview": "void clearNext(TrackEntry *entry);",
          "documentation": "Removes the next entry and all entries after it for the specified entry. */"
        },
        {
          "name": "expandToIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 541,
              "character": 0
            },
            "end": {
              "line": 541,
              "character": 41
            }
          },
          "preview": "TrackEntry *expandToIndex(size_t index);"
        },
        {
          "name": "newTrackEntry",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 545,
              "character": 0
            },
            "end": {
              "line": 545,
              "character": 97
            }
          },
          "preview": "TrackEntry *newTrackEntry(size_t trackIndex, Animation *animation, bool loop, TrackEntry *last);",
          "documentation": "Object-pooling version of new TrackEntry. Obtain an unused TrackEntry from the pool and clear/initialize its values.\n@param last May be NULL."
        },
        {
          "name": "animationsChanged",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 547,
              "character": 0
            },
            "end": {
              "line": 547,
              "character": 26
            }
          },
          "preview": "void animationsChanged();"
        },
        {
          "name": "computeHold",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 549,
              "character": 0
            },
            "end": {
              "line": 549,
              "character": 37
            }
          },
          "preview": "void computeHold(TrackEntry *entry);"
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 551,
              "character": 0
            },
            "end": {
              "line": 551,
              "character": 107
            }
          },
          "preview": "void setAttachment(Skeleton &skeleton, spine::Slot &slot, const String &attachmentName, bool attachments);"
        }
      ]
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationStateData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 19
        }
      },
      "preview": "class SkeletonData;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationStateData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "AnimationStateData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationStateData.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 2
        }
      },
      "preview": "class SP_API AnimationStateData : public SpineObject {",
      "documentation": "Stores mix (crossfade) durations to be applied when AnimationState animations are changed.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "AnimationStateData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 57
            }
          },
          "preview": "explicit AnimationStateData(SkeletonData *skeletonData);"
        },
        {
          "name": "getSkeletonData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 33
            }
          },
          "preview": "SkeletonData *getSkeletonData();",
          "documentation": "The SkeletonData to look up animations when they are specified by name."
        },
        {
          "name": "getDefaultMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 23
            }
          },
          "preview": "float getDefaultMix();",
          "documentation": "The mix duration to use when no mix duration has been specifically defined between two animations."
        },
        {
          "name": "setDefaultMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 35
            }
          },
          "preview": "void setDefaultMix(float inValue);"
        },
        {
          "name": "setMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 75
            }
          },
          "preview": "void setMix(const String &fromName, const String &toName, float duration);",
          "documentation": "Sets a mix duration by animation names."
        },
        {
          "name": "setMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 61
            }
          },
          "preview": "void setMix(Animation *from, Animation *to, float duration);",
          "documentation": "Sets a mix duration when changing from the specified animation to the other.\nSee TrackEntry.MixDuration."
        },
        {
          "name": "getMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 46
            }
          },
          "preview": "float getMix(Animation *from, Animation *to);",
          "documentation": "The mix duration to use when changing from the specified animation to the other,\nor the DefaultMix if no mix duration has been set."
        },
        {
          "name": "clear",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 14
            }
          },
          "preview": "void clear();",
          "documentation": "Removes all mixes and sets the default mix to 0."
        },
        {
          "name": "_skeletonData",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 29
            }
          },
          "preview": "SkeletonData *_skeletonData;"
        },
        {
          "name": "_defaultMix",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 19
            }
          },
          "preview": "float _defaultMix;"
        },
        {
          "name": "_animationToMixTime",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 51
            }
          },
          "preview": "HashMap<AnimationPair, float> _animationToMixTime;"
        }
      ]
    },
    {
      "name": "AnimationPair",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AnimationStateData.h",
      "range": {
        "start": {
          "line": 73,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 3
        }
      },
      "preview": "class AnimationPair : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_a1",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 17
            }
          },
          "preview": "Animation *_a1;"
        },
        {
          "name": "_a2",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 17
            }
          },
          "preview": "Animation *_a2;"
        },
        {
          "name": "AnimationPair",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 69
            }
          },
          "preview": "explicit AnimationPair(Animation *a1 = NULL, Animation *a2 = NULL);"
        },
        {
          "name": "operator==",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 52
            }
          },
          "preview": "bool operator==(const AnimationPair &other) const;"
        }
      ]
    },
    {
      "name": "Format",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 48,
          "character": 2
        }
      },
      "preview": "enum Format {",
      "members": []
    },
    {
      "name": "Format_Alpha",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 14
        }
      },
      "preview": "Format_Alpha,"
    },
    {
      "name": "Format_Intensity",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 18
        }
      },
      "preview": "Format_Intensity,"
    },
    {
      "name": "Format_LuminanceAlpha",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 23
        }
      },
      "preview": "Format_LuminanceAlpha,"
    },
    {
      "name": "Format_RGB565",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 15
        }
      },
      "preview": "Format_RGB565,"
    },
    {
      "name": "Format_RGBA4444",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 17
        }
      },
      "preview": "Format_RGBA4444,"
    },
    {
      "name": "Format_RGB888",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 15
        }
      },
      "preview": "Format_RGB888,"
    },
    {
      "name": "Format_RGBA8888",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 17
        }
      },
      "preview": "Format_RGBA8888"
    },
    {
      "name": "TextureFilter",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 58,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 2
        }
      },
      "preview": "enum TEXTURE_FILTER_ENUM {",
      "members": []
    },
    {
      "name": "TextureFilter_Unknown",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 23
        }
      },
      "preview": "TextureFilter_Unknown,"
    },
    {
      "name": "TextureFilter_Nearest",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 60,
          "character": 0
        },
        "end": {
          "line": 60,
          "character": 23
        }
      },
      "preview": "TextureFilter_Nearest,"
    },
    {
      "name": "TextureFilter_Linear",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 22
        }
      },
      "preview": "TextureFilter_Linear,"
    },
    {
      "name": "TextureFilter_MipMap",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 62,
          "character": 0
        },
        "end": {
          "line": 62,
          "character": 22
        }
      },
      "preview": "TextureFilter_MipMap,"
    },
    {
      "name": "TextureFilter_MipMapNearestNearest",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 36
        }
      },
      "preview": "TextureFilter_MipMapNearestNearest,"
    },
    {
      "name": "TextureFilter_MipMapLinearNearest",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 35
        }
      },
      "preview": "TextureFilter_MipMapLinearNearest,"
    },
    {
      "name": "TextureFilter_MipMapNearestLinear",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 35
        }
      },
      "preview": "TextureFilter_MipMapNearestLinear,"
    },
    {
      "name": "TextureFilter_MipMapLinearLinear",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 66,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 34
        }
      },
      "preview": "TextureFilter_MipMapLinearLinear"
    },
    {
      "name": "TextureWrap",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 2
        }
      },
      "preview": "enum TextureWrap {",
      "members": []
    },
    {
      "name": "TextureWrap_MirroredRepeat",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 70,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 28
        }
      },
      "preview": "TextureWrap_MirroredRepeat,"
    },
    {
      "name": "TextureWrap_ClampToEdge",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 71,
          "character": 0
        },
        "end": {
          "line": 71,
          "character": 25
        }
      },
      "preview": "TextureWrap_ClampToEdge,"
    },
    {
      "name": "TextureWrap_Repeat",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 72,
          "character": 0
        },
        "end": {
          "line": 72,
          "character": 20
        }
      },
      "preview": "TextureWrap_Repeat"
    },
    {
      "name": "AtlasPage",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 2
        }
      },
      "preview": "class SP_API AtlasPage : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 13
            }
          },
          "preview": "String name;"
        },
        {
          "name": "texturePath",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 20
            }
          },
          "preview": "String texturePath;"
        },
        {
          "name": "format",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 15
            }
          },
          "preview": "Format format;"
        },
        {
          "name": "minFilter",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 31
            }
          },
          "preview": "TEXTURE_FILTER_ENUM minFilter;"
        },
        {
          "name": "magFilter",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 31
            }
          },
          "preview": "TEXTURE_FILTER_ENUM magFilter;"
        },
        {
          "name": "uWrap",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 19
            }
          },
          "preview": "TextureWrap uWrap;"
        },
        {
          "name": "vWrap",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 19
            }
          },
          "preview": "TextureWrap vWrap;"
        },
        {
          "name": "width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 11
            }
          },
          "preview": "int width, height;"
        },
        {
          "name": "height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 19
            }
          },
          "preview": "int width, height;"
        },
        {
          "name": "pma",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 10
            }
          },
          "preview": "bool pma;"
        },
        {
          "name": "index",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 17
            }
          },
          "preview": "int index;"
        },
        {
          "name": "texture",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 21
            }
          },
          "preview": "void *texture;"
        },
        {
          "name": "AtlasPage",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 3
            }
          },
          "preview": "explicit AtlasPage(const String &inName) : name(inName), format(Format_RGBA8888),"
        }
      ]
    },
    {
      "name": "AtlasRegion",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 96,
          "character": 0
        },
        "end": {
          "line": 106,
          "character": 2
        }
      },
      "preview": "class SP_API AtlasRegion : public TextureRegion {",
      "members": [
        {
          "name": "page",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 17
            }
          },
          "preview": "AtlasPage *page;"
        },
        {
          "name": "name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 13
            }
          },
          "preview": "String name;"
        },
        {
          "name": "index",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 11
            }
          },
          "preview": "int index;"
        },
        {
          "name": "x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 7
            }
          },
          "preview": "int x, y;"
        },
        {
          "name": "y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 10
            }
          },
          "preview": "int x, y;"
        },
        {
          "name": "splits",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 20
            }
          },
          "preview": "Vector<int> splits;"
        },
        {
          "name": "pads",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 18
            }
          },
          "preview": "Vector<int> pads;"
        },
        {
          "name": "names",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 23
            }
          },
          "preview": "Vector <String> names;"
        },
        {
          "name": "values",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 22
            }
          },
          "preview": "Vector<float> values;"
        }
      ]
    },
    {
      "name": "TextureLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 108,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 20
        }
      },
      "preview": "class TextureLoader;"
    },
    {
      "name": "Atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Atlas.h",
      "range": {
        "start": {
          "line": 110,
          "character": 0
        },
        "end": {
          "line": 135,
          "character": 2
        }
      },
      "preview": "class SP_API Atlas : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Atlas",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 84
            }
          },
          "preview": "Atlas(const String &path, TextureLoader *textureLoader, bool createTexture = true);"
        },
        {
          "name": "Atlas",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 111
            }
          },
          "preview": "Atlas(const char *data, int length, const char *dir, TextureLoader *textureLoader, bool createTexture = true);"
        },
        {
          "name": "~Atlas",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 10
            }
          },
          "preview": "~Atlas();"
        },
        {
          "name": "flipV",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 14
            }
          },
          "preview": "void flipV();"
        },
        {
          "name": "findRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 45
            }
          },
          "preview": "AtlasRegion *findRegion(const String &name);",
          "documentation": "Returns the first region found with the specified name. This method uses String comparison to find the region, so the result\nshould be cached rather than calling this method multiple times.\n@return The region, or NULL."
        },
        {
          "name": "getPages",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 33
            }
          },
          "preview": "Vector<AtlasPage *> &getPages();"
        },
        {
          "name": "getRegions",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 37
            }
          },
          "preview": "Vector<AtlasRegion *> &getRegions();"
        },
        {
          "name": "_pages",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 28
            }
          },
          "preview": "Vector<AtlasPage *> _pages;"
        },
        {
          "name": "_regions",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 32
            }
          },
          "preview": "Vector<AtlasRegion *> _regions;"
        },
        {
          "name": "_textureLoader",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 31
            }
          },
          "preview": "TextureLoader *_textureLoader;"
        },
        {
          "name": "load",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 79
            }
          },
          "preview": "void load(const char *begin, int length, const char *dir, bool createTexture);"
        }
      ]
    },
    {
      "name": "Atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AtlasAttachmentLoader.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 12
        }
      },
      "preview": "class Atlas;"
    },
    {
      "name": "AtlasRegion",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AtlasAttachmentLoader.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 18
        }
      },
      "preview": "class AtlasRegion;"
    },
    {
      "name": "AtlasAttachmentLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AtlasAttachmentLoader.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 68,
          "character": 2
        }
      },
      "preview": "class SP_API AtlasAttachmentLoader : public AttachmentLoader {",
      "documentation": "An AttachmentLoader that configures attachments using texture regions from an Atlas.\nSee https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data Loading skeleton data in the\nSpine Runtimes Guide.",
      "members": [
        {
          "name": "AtlasAttachmentLoader",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 46
            }
          },
          "preview": "explicit AtlasAttachmentLoader(Atlas *atlas);"
        },
        {
          "name": "newRegionAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 119
            }
          },
          "preview": "virtual RegionAttachment *newRegionAttachment(Skin &skin, const String &name, const String &path, Sequence *sequence);"
        },
        {
          "name": "newMeshAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 115
            }
          },
          "preview": "virtual MeshAttachment *newMeshAttachment(Skin &skin, const String &name, const String &path, Sequence *sequence);"
        },
        {
          "name": "newBoundingBoxAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 89
            }
          },
          "preview": "virtual BoundingBoxAttachment *newBoundingBoxAttachment(Skin &skin, const String &name);"
        },
        {
          "name": "newPathAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 75
            }
          },
          "preview": "virtual PathAttachment *newPathAttachment(Skin &skin, const String &name);"
        },
        {
          "name": "newPointAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 77
            }
          },
          "preview": "virtual PointAttachment *newPointAttachment(Skin &skin, const String &name);"
        },
        {
          "name": "newClippingAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 83
            }
          },
          "preview": "virtual ClippingAttachment *newClippingAttachment(Skin &skin, const String &name);"
        },
        {
          "name": "configureAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 58
            }
          },
          "preview": "virtual void configureAttachment(Attachment *attachment);"
        },
        {
          "name": "findRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 45
            }
          },
          "preview": "AtlasRegion *findRegion(const String &name);"
        },
        {
          "name": "_atlas",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 15
            }
          },
          "preview": "Atlas *_atlas;"
        }
      ]
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Attachment.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 58,
          "character": 2
        }
      },
      "preview": "class SP_API Attachment : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Attachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 41
            }
          },
          "preview": "explicit Attachment(const String &name);"
        },
        {
          "name": "~Attachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 23
            }
          },
          "preview": "virtual ~Attachment();"
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 31
            }
          },
          "preview": "const String &getName() const;"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 32
            }
          },
          "preview": "virtual Attachment *copy() = 0;"
        },
        {
          "name": "getRefCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "int getRefCount();"
        },
        {
          "name": "reference",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 18
            }
          },
          "preview": "void reference();"
        },
        {
          "name": "dereference",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 20
            }
          },
          "preview": "void dereference();"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 20
            }
          },
          "preview": "const String _name;"
        },
        {
          "name": "_refCount",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 15
            }
          },
          "preview": "int _refCount;"
        }
      ]
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 11
        }
      },
      "preview": "class Skin;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "RegionAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 23
        }
      },
      "preview": "class RegionAttachment;"
    },
    {
      "name": "MeshAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 21
        }
      },
      "preview": "class MeshAttachment;"
    },
    {
      "name": "BoundingBoxAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 28
        }
      },
      "preview": "class BoundingBoxAttachment;"
    },
    {
      "name": "PathAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 21
        }
      },
      "preview": "class PathAttachment;"
    },
    {
      "name": "PointAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 22
        }
      },
      "preview": "class PointAttachment;"
    },
    {
      "name": "ClippingAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 25
        }
      },
      "preview": "class ClippingAttachment;"
    },
    {
      "name": "Sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 15
        }
      },
      "preview": "class Sequence;"
    },
    {
      "name": "AttachmentLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentLoader.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 2
        }
      },
      "preview": "class SP_API AttachmentLoader : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "AttachmentLoader",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 20
            }
          },
          "preview": "AttachmentLoader();"
        },
        {
          "name": "~AttachmentLoader",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 29
            }
          },
          "preview": "virtual ~AttachmentLoader();"
        },
        {
          "name": "newRegionAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 123
            }
          },
          "preview": "virtual RegionAttachment *newRegionAttachment(Skin &skin, const String &name, const String &path, Sequence *sequence) = 0;",
          "documentation": "@return May be NULL to not load any attachment."
        },
        {
          "name": "newMeshAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 119
            }
          },
          "preview": "virtual MeshAttachment *newMeshAttachment(Skin &skin, const String &name, const String &path, Sequence *sequence) = 0;",
          "documentation": "@return May be NULL to not load any attachment."
        },
        {
          "name": "newBoundingBoxAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 93
            }
          },
          "preview": "virtual BoundingBoxAttachment *newBoundingBoxAttachment(Skin &skin, const String &name) = 0;",
          "documentation": "@return May be NULL to not load any attachment."
        },
        {
          "name": "newPathAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 79
            }
          },
          "preview": "virtual PathAttachment *newPathAttachment(Skin &skin, const String &name) = 0;",
          "documentation": "@return May be NULL to not load any attachment"
        },
        {
          "name": "newPointAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 81
            }
          },
          "preview": "virtual PointAttachment *newPointAttachment(Skin &skin, const String &name) = 0;"
        },
        {
          "name": "newClippingAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 87
            }
          },
          "preview": "virtual ClippingAttachment *newClippingAttachment(Skin &skin, const String &name) = 0;"
        },
        {
          "name": "configureAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 62
            }
          },
          "preview": "virtual void configureAttachment(Attachment *attachment) = 0;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentTimeline.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentTimeline.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "SlotPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentTimeline.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 15
        }
      },
      "preview": "class SlotPose;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentTimeline.h",
      "range": {
        "start": {
          "line": 48,
          "character": 0
        },
        "end": {
          "line": 48,
          "character": 12
        }
      },
      "preview": "class Event;"
    },
    {
      "name": "AttachmentTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentTimeline.h",
      "range": {
        "start": {
          "line": 50,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 2
        }
      },
      "preview": "class SP_API AttachmentTimeline : public Timeline, public SlotTimeline {",
      "supertypes": [
        "Timeline",
        "SlotTimeline"
      ],
      "members": [
        {
          "name": "AttachmentTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 63
            }
          },
          "preview": "explicit AttachmentTimeline(size_t frameCount, int slotIndex);"
        },
        {
          "name": "~AttachmentTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 31
            }
          },
          "preview": "virtual ~AttachmentTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 68
            }
          },
          "preview": "void setFrame(int frame, float time, const String &attachmentName);",
          "documentation": "Sets the time and attachment name for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "getAttachmentNames",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 38
            }
          },
          "preview": "Vector<String> &getAttachmentNames();",
          "documentation": "The attachment name for each frame. May contain null values to clear the attachment."
        },
        {
          "name": "_attachmentNames",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 33
            }
          },
          "preview": "Vector<String> _attachmentNames;"
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 80
            }
          },
          "preview": "void setAttachment(Skeleton &skeleton, SlotPose &pose, String *attachmentName);"
        }
      ]
    },
    {
      "name": "AttachmentType",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 33,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 2
        }
      },
      "preview": "enum AttachmentType {",
      "members": []
    },
    {
      "name": "AttachmentType_Region",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 34,
          "character": 23
        }
      },
      "preview": "AttachmentType_Region,"
    },
    {
      "name": "AttachmentType_Boundingbox",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 28
        }
      },
      "preview": "AttachmentType_Boundingbox,"
    },
    {
      "name": "AttachmentType_Mesh",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 21
        }
      },
      "preview": "AttachmentType_Mesh,"
    },
    {
      "name": "AttachmentType_Linkedmesh",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 27
        }
      },
      "preview": "AttachmentType_Linkedmesh,"
    },
    {
      "name": "AttachmentType_Path",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 21
        }
      },
      "preview": "AttachmentType_Path,"
    },
    {
      "name": "AttachmentType_Point",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 22
        }
      },
      "preview": "AttachmentType_Point,"
    },
    {
      "name": "AttachmentType_Clipping",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/AttachmentType.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 25
        }
      },
      "preview": "AttachmentType_Clipping"
    },
    {
      "name": "BlendMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlendMode.h",
      "range": {
        "start": {
          "line": 33,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 2
        }
      },
      "preview": "enum BlendMode {",
      "members": []
    },
    {
      "name": "BlendMode_Normal",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlendMode.h",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 34,
          "character": 22
        }
      },
      "preview": "BlendMode_Normal = 0,"
    },
    {
      "name": "BlendMode_Additive",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlendMode.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 20
        }
      },
      "preview": "BlendMode_Additive,"
    },
    {
      "name": "BlendMode_Multiply",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlendMode.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 20
        }
      },
      "preview": "BlendMode_Multiply,"
    },
    {
      "name": "BlendMode_Screen",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlendMode.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 18
        }
      },
      "preview": "BlendMode_Screen"
    },
    {
      "name": "Block",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlockAllocator.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 5
        }
      },
      "preview": "struct Block {",
      "members": [
        {
          "name": "size",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 16
            }
          },
          "preview": "int size;"
        },
        {
          "name": "allocated",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 21
            }
          },
          "preview": "int allocated;"
        },
        {
          "name": "memory",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 23
            }
          },
          "preview": "uint8_t *memory;"
        },
        {
          "name": "free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 9
            }
          },
          "preview": "int free() {"
        },
        {
          "name": "canFit",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 9
            }
          },
          "preview": "bool canFit(int numBytes) {"
        },
        {
          "name": "allocate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 9
            }
          },
          "preview": "uint8_t *allocate(int numBytes) {"
        }
      ]
    },
    {
      "name": "BlockAllocator",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BlockAllocator.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 110,
          "character": 5
        }
      },
      "preview": "class BlockAllocator : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "initialBlockSize",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 28
            }
          },
          "preview": "int initialBlockSize;"
        },
        {
          "name": "blocks",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 29
            }
          },
          "preview": "Vector <Block> blocks;"
        },
        {
          "name": "BlockAllocator",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 9
            }
          },
          "preview": "BlockAllocator(int initialBlockSize) : initialBlockSize(initialBlockSize) {"
        },
        {
          "name": "~BlockAllocator",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 9
            }
          },
          "preview": "~BlockAllocator() {"
        },
        {
          "name": "allocate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 9
            }
          },
          "preview": "T *allocate(size_t num) {"
        },
        {
          "name": "compress",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 9
            }
          },
          "preview": "void compress() {"
        },
        {
          "name": "_allocate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 9
            }
          },
          "preview": "void *_allocate(int numBytes) {"
        },
        {
          "name": "newBlock",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 9
            }
          },
          "preview": "Block newBlock(int numBytes) {"
        }
      ]
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Bone.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 2
        }
      },
      "preview": "class SP_API Bone : public PosedGeneric<BoneData, BoneLocal, BonePose>, public PosedActive {",
      "documentation": "The current pose for a bone, before constraints are applied.\nA bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\nlocal transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\nconstraint or application code modifies the world transform after it was computed from the local transform.",
      "supertypes": [
        "PosedActive"
      ],
      "members": [
        {
          "name": "Bone",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 36
            }
          },
          "preview": "Bone(BoneData& data, Bone* parent);",
          "documentation": "@param parent May be NULL."
        },
        {
          "name": "getParent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 19
            }
          },
          "preview": "Bone* getParent();",
          "documentation": "The parent bone, or null if this is the root bone."
        },
        {
          "name": "getChildren",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 30
            }
          },
          "preview": "Vector<Bone*>& getChildren();",
          "documentation": "The immediate children of this bone."
        },
        {
          "name": "isYDown",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 41
            }
          },
          "preview": "static bool isYDown() { return yDown; }"
        },
        {
          "name": "setYDown",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 53
            }
          },
          "preview": "static void setYDown(bool value) { yDown = value; }"
        },
        {
          "name": "yDown",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 19
            }
          },
          "preview": "static bool yDown;"
        },
        {
          "name": "_parent",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 21
            }
          },
          "preview": "Bone* const _parent;"
        },
        {
          "name": "_children",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 25
            }
          },
          "preview": "Vector<Bone*> _children;"
        },
        {
          "name": "_sorted",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 14
            }
          },
          "preview": "bool _sorted;"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 2
        }
      },
      "preview": "class SP_API BoneData : public PosedDataGeneric<BoneLocal> {",
      "members": [
        {
          "name": "BoneData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 66
            }
          },
          "preview": "BoneData(int index, const String &name, BoneData *parent = NULL);"
        },
        {
          "name": "getIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 16
            }
          },
          "preview": "int getIndex();",
          "documentation": "The index of the bone in Skeleton.Bones"
        },
        {
          "name": "getParent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 23
            }
          },
          "preview": "BoneData *getParent();",
          "documentation": "May be NULL."
        },
        {
          "name": "getLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 19
            }
          },
          "preview": "float getLength();"
        },
        {
          "name": "setLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 31
            }
          },
          "preview": "void setLength(float inValue);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "getIcon",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 25
            }
          },
          "preview": "const String &getIcon();"
        },
        {
          "name": "setIcon",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 34
            }
          },
          "preview": "void setIcon(const String &icon);"
        },
        {
          "name": "getVisible",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 19
            }
          },
          "preview": "bool getVisible();"
        },
        {
          "name": "setVisible",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 31
            }
          },
          "preview": "void setVisible(bool inValue);"
        },
        {
          "name": "_index",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 18
            }
          },
          "preview": "const int _index;"
        },
        {
          "name": "_parent",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 19
            }
          },
          "preview": "BoneData *_parent;"
        },
        {
          "name": "_length",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 15
            }
          },
          "preview": "float _length;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 14
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "_icon",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 14
            }
          },
          "preview": "String _icon;"
        },
        {
          "name": "_visible",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 15
            }
          },
          "preview": "bool _visible;"
        }
      ]
    },
    {
      "name": "BoneLocal",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneLocal.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 116,
          "character": 2
        }
      },
      "preview": "class SP_API BoneLocal : public Pose<BoneLocal> {",
      "documentation": "Stores a bone's local pose.",
      "members": [
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 10
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 14
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_rotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 25
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_scaleX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 34
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_scaleY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 43
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_shearX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 52
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_shearY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 61
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _shearX, _shearY;"
        },
        {
          "name": "_inherit",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 18
            }
          },
          "preview": "Inherit _inherit;"
        },
        {
          "name": "BoneLocal",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 13
            }
          },
          "preview": "BoneLocal();"
        },
        {
          "name": "~BoneLocal",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 22
            }
          },
          "preview": "virtual ~BoneLocal();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 44
            }
          },
          "preview": "virtual void set(BoneLocal& pose) override;"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 14
            }
          },
          "preview": "float getX();",
          "documentation": "The local x translation."
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 20
            }
          },
          "preview": "void setX(float x);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 14
            }
          },
          "preview": "float getY();",
          "documentation": "The local y translation."
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 20
            }
          },
          "preview": "void setY(float y);"
        },
        {
          "name": "setPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 36
            }
          },
          "preview": "void setPosition(float x, float y);"
        },
        {
          "name": "getRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 21
            }
          },
          "preview": "float getRotation();",
          "documentation": "The local rotation in degrees, counter clockwise."
        },
        {
          "name": "setRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 34
            }
          },
          "preview": "void setRotation(float rotation);"
        },
        {
          "name": "getScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 19
            }
          },
          "preview": "float getScaleX();",
          "documentation": "The local scaleX."
        },
        {
          "name": "setScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 30
            }
          },
          "preview": "void setScaleX(float scaleX);"
        },
        {
          "name": "getScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 19
            }
          },
          "preview": "float getScaleY();",
          "documentation": "The local scaleY."
        },
        {
          "name": "setScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 30
            }
          },
          "preview": "void setScaleY(float scaleY);"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 43
            }
          },
          "preview": "void setScale(float scaleX, float scaleY);"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 28
            }
          },
          "preview": "void setScale(float scale);"
        },
        {
          "name": "getShearX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 19
            }
          },
          "preview": "float getShearX();",
          "documentation": "The local shearX."
        },
        {
          "name": "setShearX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 30
            }
          },
          "preview": "void setShearX(float shearX);"
        },
        {
          "name": "getShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 19
            }
          },
          "preview": "float getShearY();",
          "documentation": "The local shearY."
        },
        {
          "name": "setShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 30
            }
          },
          "preview": "void setShearY(float shearY);"
        },
        {
          "name": "getInherit",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 22
            }
          },
          "preview": "Inherit getInherit();",
          "documentation": "Determines how parent world transforms affect this bone."
        },
        {
          "name": "setInherit",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 34
            }
          },
          "preview": "void setInherit(Inherit inherit);"
        }
      ]
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BonePose.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BonePose.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BonePose.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 137,
          "character": 2
        }
      },
      "preview": "class SP_API BonePose : public BoneLocal, public Update {",
      "supertypes": [
        "Update",
        "BoneLocal"
      ],
      "members": [
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 13
            }
          },
          "preview": "Bone* _bone;"
        },
        {
          "name": "_a",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 10
            }
          },
          "preview": "float _a, _b, _worldX;"
        },
        {
          "name": "_b",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 14
            }
          },
          "preview": "float _a, _b, _worldX;"
        },
        {
          "name": "_worldX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 23
            }
          },
          "preview": "float _a, _b, _worldX;"
        },
        {
          "name": "_c",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 10
            }
          },
          "preview": "float _c, _d, _worldY;"
        },
        {
          "name": "_d",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 14
            }
          },
          "preview": "float _c, _d, _worldY;"
        },
        {
          "name": "_worldY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 23
            }
          },
          "preview": "float _c, _d, _worldY;"
        },
        {
          "name": "_world",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 12
            }
          },
          "preview": "int _world, _local;"
        },
        {
          "name": "_local",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 20
            }
          },
          "preview": "int _world, _local;"
        },
        {
          "name": "BonePose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 12
            }
          },
          "preview": "BonePose();"
        },
        {
          "name": "~BonePose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 21
            }
          },
          "preview": "virtual ~BonePose();"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 67
            }
          },
          "preview": "virtual void update(Skeleton& skeleton, Physics physics) override;",
          "documentation": "Called by Skeleton::updateCache() to compute the world transform, if needed."
        },
        {
          "name": "updateWorldTransform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 47
            }
          },
          "preview": "void updateWorldTransform(Skeleton& skeleton);",
          "documentation": "Computes the world transform using the parent bone's applied pose and this pose. Child bones are not updated.\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide."
        },
        {
          "name": "updateLocalTransform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 47
            }
          },
          "preview": "void updateLocalTransform(Skeleton& skeleton);",
          "documentation": "Computes the local transform values from the world transform.\nIf the world transform is modified (by a constraint, rotateWorld(), etc) then this method should be called so\nthe local transform matches the world transform. The local transform may be needed by other code (eg to apply another\nconstraint).\nSome information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The local transform after\ncalling this method is equivalent to the local transform used to compute the world transform, but may not be identical."
        },
        {
          "name": "validateLocalTransform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 49
            }
          },
          "preview": "void validateLocalTransform(Skeleton& skeleton);",
          "documentation": "If the world transform has been modified and the local transform no longer matches, updateLocalTransform() is called."
        },
        {
          "name": "modifyLocal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 38
            }
          },
          "preview": "void modifyLocal(Skeleton& skeleton);"
        },
        {
          "name": "modifyWorld",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 30
            }
          },
          "preview": "void modifyWorld(int update);"
        },
        {
          "name": "resetWorld",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 29
            }
          },
          "preview": "void resetWorld(int update);"
        },
        {
          "name": "getA",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 14
            }
          },
          "preview": "float getA();",
          "documentation": "Part of the world transform matrix for the X axis. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setA",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 20
            }
          },
          "preview": "void setA(float a);"
        },
        {
          "name": "getB",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 14
            }
          },
          "preview": "float getB();",
          "documentation": "Part of the world transform matrix for the Y axis. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setB",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 20
            }
          },
          "preview": "void setB(float b);"
        },
        {
          "name": "getC",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 14
            }
          },
          "preview": "float getC();",
          "documentation": "Part of the world transform matrix for the X axis. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setC",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 20
            }
          },
          "preview": "void setC(float c);"
        },
        {
          "name": "getD",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 14
            }
          },
          "preview": "float getD();",
          "documentation": "Part of the world transform matrix for the Y axis. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setD",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 20
            }
          },
          "preview": "void setD(float d);"
        },
        {
          "name": "getWorldX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 19
            }
          },
          "preview": "float getWorldX();",
          "documentation": "The world X position. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setWorldX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 30
            }
          },
          "preview": "void setWorldX(float worldX);"
        },
        {
          "name": "getWorldY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 19
            }
          },
          "preview": "float getWorldY();",
          "documentation": "The world Y position. If changed, updateLocalTransform() should be called."
        },
        {
          "name": "setWorldY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 30
            }
          },
          "preview": "void setWorldY(float worldY);"
        },
        {
          "name": "getWorldRotationX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 27
            }
          },
          "preview": "float getWorldRotationX();",
          "documentation": "The world rotation for the X axis, calculated using a and c."
        },
        {
          "name": "getWorldRotationY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 27
            }
          },
          "preview": "float getWorldRotationY();",
          "documentation": "The world rotation for the Y axis, calculated using b and d."
        },
        {
          "name": "getWorldScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 24
            }
          },
          "preview": "float getWorldScaleX();",
          "documentation": "The magnitude (always positive) of the world scale X, calculated using a and c."
        },
        {
          "name": "getWorldScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 24
            }
          },
          "preview": "float getWorldScaleY();",
          "documentation": "The magnitude (always positive) of the world scale Y, calculated using b and d."
        },
        {
          "name": "worldToLocal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 83
            }
          },
          "preview": "void worldToLocal(float worldX, float worldY, float& outLocalX, float& outLocalY);",
          "documentation": "Transforms a point from world coordinates to the bone's local coordinates."
        },
        {
          "name": "localToWorld",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 83
            }
          },
          "preview": "void localToWorld(float localX, float localY, float& outWorldX, float& outWorldY);",
          "documentation": "Transforms a point from the bone's local coordinates to world coordinates."
        },
        {
          "name": "worldToParent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 86
            }
          },
          "preview": "void worldToParent(float worldX, float worldY, float& outParentX, float& outParentY);",
          "documentation": "Transforms a point from world coordinates to the parent bone's local coordinates."
        },
        {
          "name": "parentToWorld",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 86
            }
          },
          "preview": "void parentToWorld(float parentX, float parentY, float& outWorldX, float& outWorldY);",
          "documentation": "Transforms a point from the parent bone's coordinates to world coordinates."
        },
        {
          "name": "worldToLocalRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 49
            }
          },
          "preview": "float worldToLocalRotation(float worldRotation);",
          "documentation": "Transforms a world rotation to a local rotation."
        },
        {
          "name": "localToWorldRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 49
            }
          },
          "preview": "float localToWorldRotation(float localRotation);",
          "documentation": "Transforms a local rotation to a world rotation."
        },
        {
          "name": "rotateWorld",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 33
            }
          },
          "preview": "void rotateWorld(float degrees);",
          "documentation": "Rotates the world transform the specified amount.\nAfter changes are made to the world transform, updateLocalTransform() should be called on this bone and any\nchild bones, recursively."
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 12
        }
      },
      "preview": "class Event;"
    },
    {
      "name": "BoneLocal",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 16
        }
      },
      "preview": "class BoneLocal;"
    },
    {
      "name": "BoneTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 5
        }
      },
      "preview": "class SP_API BoneTimeline {",
      "documentation": "An interface for timelines which change the property of a bone.",
      "members": [
        {
          "name": "BoneTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 62
            }
          },
          "preview": "BoneTimeline(int boneIndex) : _boneIndex(boneIndex) {}"
        },
        {
          "name": "~BoneTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 34
            }
          },
          "preview": "virtual ~BoneTimeline() {}"
        },
        {
          "name": "getBoneIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 51
            }
          },
          "preview": "virtual int getBoneIndex() { return _boneIndex; }",
          "documentation": "The index of the bone in Skeleton::getBones() that will be changed when this timeline is applied."
        },
        {
          "name": "setBoneIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 66
            }
          },
          "preview": "virtual void setBoneIndex(int inValue) { _boneIndex = inValue; }"
        },
        {
          "name": "_boneIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 16
            }
          },
          "preview": "int _boneIndex;"
        }
      ]
    },
    {
      "name": "BoneTimeline1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 58,
          "character": 0
        },
        "end": {
          "line": 76,
          "character": 2
        }
      },
      "preview": "class SP_API BoneTimeline1 : public CurveTimeline1, public BoneTimeline {",
      "documentation": "Base class for timelines that animate a single bone property.",
      "supertypes": [
        "BoneTimeline",
        "CurveTimeline1"
      ],
      "members": [
        {
          "name": "BoneTimeline1",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 88
            }
          },
          "preview": "BoneTimeline1(size_t frameCount, size_t bezierCount, int boneIndex, Property property);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 36
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,",
          "documentation": "Applies changes to the pose based on the timeline values."
        }
      ]
    },
    {
      "name": "BoneTimeline2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoneTimeline.h",
      "range": {
        "start": {
          "line": 79,
          "character": 0
        },
        "end": {
          "line": 98,
          "character": 2
        }
      },
      "preview": "class SP_API BoneTimeline2 : public CurveTimeline2, public BoneTimeline {",
      "documentation": "Base class for timelines that animate two bone properties.",
      "supertypes": [
        "BoneTimeline",
        "CurveTimeline2"
      ],
      "members": [
        {
          "name": "BoneTimeline2",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 109
            }
          },
          "preview": "BoneTimeline2(size_t frameCount, size_t bezierCount, int boneIndex, Property property1, Property property2);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 36
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,",
          "documentation": "Applies changes to the pose based on the timeline values."
        }
      ]
    },
    {
      "name": "BoundingBoxAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/BoundingBoxAttachment.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 2
        }
      },
      "preview": "class SP_API BoundingBoxAttachment : public VertexAttachment {",
      "documentation": "Attachment that has a polygon for bounds checking.",
      "supertypes": [
        "VertexAttachment"
      ],
      "members": [
        {
          "name": "BoundingBoxAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 52
            }
          },
          "preview": "explicit BoundingBoxAttachment(const String &name);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 14
            }
          },
          "preview": "Color _color;"
        }
      ]
    },
    {
      "name": "SlotData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ClippingAttachment.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 15
        }
      },
      "preview": "class SlotData;"
    },
    {
      "name": "ClippingAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ClippingAttachment.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 2
        }
      },
      "preview": "class SP_API ClippingAttachment : public VertexAttachment {",
      "supertypes": [
        "VertexAttachment"
      ],
      "members": [
        {
          "name": "ClippingAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 49
            }
          },
          "preview": "explicit ClippingAttachment(const String &name);"
        },
        {
          "name": "getEndSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 24
            }
          },
          "preview": "SlotData *getEndSlot();"
        },
        {
          "name": "setEndSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 36
            }
          },
          "preview": "void setEndSlot(SlotData *inValue);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "_endSlot",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 20
            }
          },
          "preview": "SlotData *_endSlot;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 14
            }
          },
          "preview": "Color _color;"
        }
      ]
    },
    {
      "name": "Color",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Color.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 2
        }
      },
      "preview": "class SP_API Color : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Color",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 3
            }
          },
          "preview": "Color() : r(0), g(0), b(0), a(0) {"
        },
        {
          "name": "Color",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 3
            }
          },
          "preview": "Color(float r, float g, float b, float a) : r(r), g(g), b(b), a(a) {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 3
            }
          },
          "preview": "inline Color &set(float _r, float _g, float _b, float _a) {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 3
            }
          },
          "preview": "inline Color &set(float _r, float _g, float _b) {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 3
            }
          },
          "preview": "inline Color &set(const Color &other) {"
        },
        {
          "name": "add",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 3
            }
          },
          "preview": "inline Color &add(float _r, float _g, float _b, float _a) {"
        },
        {
          "name": "add",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 3
            }
          },
          "preview": "inline Color &add(float _r, float _g, float _b) {"
        },
        {
          "name": "add",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 3
            }
          },
          "preview": "inline Color &add(const Color &other) {"
        },
        {
          "name": "clamp",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 3
            }
          },
          "preview": "inline Color &clamp() {"
        },
        {
          "name": "r",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 9
            }
          },
          "preview": "float r, g, b, a;"
        },
        {
          "name": "g",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 12
            }
          },
          "preview": "float r, g, b, a;"
        },
        {
          "name": "b",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 15
            }
          },
          "preview": "float r, g, b, a;"
        },
        {
          "name": "a",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 18
            }
          },
          "preview": "float r, g, b, a;"
        }
      ]
    },
    {
      "name": "RGBATimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ColorTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 62,
          "character": 2
        }
      },
      "preview": "class SP_API RGBATimeline : public SlotCurveTimeline {",
      "documentation": "Changes a slot's SlotPose::getColor().",
      "supertypes": [
        "SlotCurveTimeline"
      ],
      "members": [
        {
          "name": "RGBATimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 77
            }
          },
          "preview": "explicit RGBATimeline(size_t frameCount, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~RGBATimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 25
            }
          },
          "preview": "virtual ~RGBATimeline();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 74
            }
          },
          "preview": "void setFrame(int frame, float time, float r, float g, float b, float a);",
          "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 98
            }
          },
          "preview": "virtual void apply(Slot& slot, SlotPose& pose, float time, float alpha, MixBlend blend) override;"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 5;"
        },
        {
          "name": "R",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 24
            }
          },
          "preview": "static const int R = 1;"
        },
        {
          "name": "G",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 24
            }
          },
          "preview": "static const int G = 2;"
        },
        {
          "name": "B",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 24
            }
          },
          "preview": "static const int B = 3;"
        },
        {
          "name": "A",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 24
            }
          },
          "preview": "static const int A = 4;"
        }
      ]
    },
    {
      "name": "RGBTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ColorTimeline.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 2
        }
      },
      "preview": "class SP_API RGBTimeline : public SlotCurveTimeline {",
      "documentation": "Changes the RGB for a slot's SlotPose::getColor().",
      "supertypes": [
        "SlotCurveTimeline"
      ],
      "members": [
        {
          "name": "RGBTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 76
            }
          },
          "preview": "explicit RGBTimeline(size_t frameCount, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~RGBTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 24
            }
          },
          "preview": "virtual ~RGBTimeline();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 65
            }
          },
          "preview": "void setFrame(int frame, float time, float r, float g, float b);",
          "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 98
            }
          },
          "preview": "virtual void apply(Slot& slot, SlotPose& pose, float time, float alpha, MixBlend blend) override;"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 4;"
        },
        {
          "name": "R",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 24
            }
          },
          "preview": "static const int R = 1;"
        },
        {
          "name": "G",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 24
            }
          },
          "preview": "static const int G = 2;"
        },
        {
          "name": "B",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 24
            }
          },
          "preview": "static const int B = 3;"
        }
      ]
    },
    {
      "name": "AlphaTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ColorTimeline.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 106,
          "character": 2
        }
      },
      "preview": "class SP_API AlphaTimeline : public CurveTimeline1, public SlotTimeline {",
      "supertypes": [
        "SlotTimeline",
        "CurveTimeline1"
      ],
      "members": [
        {
          "name": "AlphaTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 78
            }
          },
          "preview": "explicit AlphaTimeline(size_t frameCount, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~AlphaTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 26
            }
          },
          "preview": "virtual ~AlphaTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "RGBA2Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ColorTimeline.h",
      "range": {
        "start": {
          "line": 109,
          "character": 0
        },
        "end": {
          "line": 137,
          "character": 2
        }
      },
      "preview": "class SP_API RGBA2Timeline : public SlotCurveTimeline {",
      "documentation": "Changes a slot's SlotPose::getColor() and SlotPose::getDarkColor() for two color tinting.",
      "supertypes": [
        "SlotCurveTimeline"
      ],
      "members": [
        {
          "name": "RGBA2Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 78
            }
          },
          "preview": "explicit RGBA2Timeline(size_t frameCount, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~RGBA2Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 26
            }
          },
          "preview": "virtual ~RGBA2Timeline();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 104
            }
          },
          "preview": "void setFrame(int frame, float time, float r, float g, float b, float a, float r2, float g2, float b2);",
          "documentation": "Sets the time, light color, and dark color for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 98
            }
          },
          "preview": "virtual void apply(Slot& slot, SlotPose& pose, float time, float alpha, MixBlend blend) override;"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 8;"
        },
        {
          "name": "R",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 24
            }
          },
          "preview": "static const int R = 1;"
        },
        {
          "name": "G",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 24
            }
          },
          "preview": "static const int G = 2;"
        },
        {
          "name": "B",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 24
            }
          },
          "preview": "static const int B = 3;"
        },
        {
          "name": "A",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 24
            }
          },
          "preview": "static const int A = 4;"
        },
        {
          "name": "R2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 25
            }
          },
          "preview": "static const int R2 = 5;"
        },
        {
          "name": "G2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 25
            }
          },
          "preview": "static const int G2 = 6;"
        },
        {
          "name": "B2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 25
            }
          },
          "preview": "static const int B2 = 7;"
        }
      ]
    },
    {
      "name": "RGB2Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ColorTimeline.h",
      "range": {
        "start": {
          "line": 140,
          "character": 0
        },
        "end": {
          "line": 167,
          "character": 2
        }
      },
      "preview": "class SP_API RGB2Timeline : public SlotCurveTimeline {",
      "documentation": "Changes the RGB for a slot's SlotPose::getColor() and SlotPose::getDarkColor() for two color tinting.",
      "supertypes": [
        "SlotCurveTimeline"
      ],
      "members": [
        {
          "name": "RGB2Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 77
            }
          },
          "preview": "explicit RGB2Timeline(size_t frameCount, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~RGB2Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 25
            }
          },
          "preview": "virtual ~RGB2Timeline();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 95
            }
          },
          "preview": "void setFrame(int frame, float time, float r, float g, float b, float r2, float g2, float b2);",
          "documentation": "Sets the time, light color, and dark color for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 98
            }
          },
          "preview": "virtual void apply(Slot& slot, SlotPose& pose, float time, float alpha, MixBlend blend) override;"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 7;"
        },
        {
          "name": "R",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 24
            }
          },
          "preview": "static const int R = 1;"
        },
        {
          "name": "G",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 162,
              "character": 0
            },
            "end": {
              "line": 162,
              "character": 24
            }
          },
          "preview": "static const int G = 2;"
        },
        {
          "name": "B",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 24
            }
          },
          "preview": "static const int B = 3;"
        },
        {
          "name": "R2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 164,
              "character": 25
            }
          },
          "preview": "static const int R2 = 4;"
        },
        {
          "name": "G2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 165,
              "character": 25
            }
          },
          "preview": "static const int G2 = 5;"
        },
        {
          "name": "B2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 166,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 25
            }
          },
          "preview": "static const int B2 = 6;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Constraint.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Constraint.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API Constraint : public Update {",
      "supertypes": [
        "Update"
      ],
      "members": [
        {
          "name": "Constraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 14
            }
          },
          "preview": "Constraint();"
        },
        {
          "name": "~Constraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 23
            }
          },
          "preview": "virtual ~Constraint();"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 39
            }
          },
          "preview": "virtual ConstraintData &getData() = 0;"
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 43
            }
          },
          "preview": "virtual void sort(Skeleton &skeleton) = 0;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 3
            }
          },
          "preview": "virtual bool isSourceActive() {"
        },
        {
          "name": "pose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 25
            }
          },
          "preview": "virtual void pose() = 0;"
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 30
            }
          },
          "preview": "virtual void setupPose() = 0;"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 71
            }
          },
          "preview": "virtual void update(Skeleton &skeleton, Physics physics) override = 0;"
        },
        {
          "name": "_active",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 14
            }
          },
          "preview": "bool _active;"
        }
      ]
    },
    {
      "name": "ConstraintGeneric",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Constraint.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 2
        }
      },
      "preview": "class SP_API ConstraintGeneric : public PosedGeneric<D, P, P>, public PosedActive, public Constraint {",
      "supertypes": [
        "PosedGeneric",
        "PosedActive",
        "Constraint"
      ],
      "members": [
        {
          "name": "ConstraintGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 3
            }
          },
          "preview": "ConstraintGeneric(D &data) : PosedGeneric<D, P, P>(data), PosedActive(), Constraint() {"
        },
        {
          "name": "~ConstraintGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 3
            }
          },
          "preview": "virtual ~ConstraintGeneric() {"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 3
            }
          },
          "preview": "virtual ConstraintData &getData() override {"
        },
        {
          "name": "pose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 3
            }
          },
          "preview": "virtual void pose() override {"
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 3
            }
          },
          "preview": "virtual void setupPose() override {"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintData.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 17
        }
      },
      "preview": "class Constraint;"
    },
    {
      "name": "ConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 2
        }
      },
      "preview": "class SP_API ConstraintData : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "ConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 59
            }
          },
          "preview": "ConstraintData(const String &name) : SpineObject(name) {}"
        },
        {
          "name": "~ConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 30
            }
          },
          "preview": "virtual ~ConstraintData() {}"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 52
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) = 0;"
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 43
            }
          },
          "preview": "virtual const String &getName() const = 0;"
        },
        {
          "name": "isSkinRequired",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 41
            }
          },
          "preview": "virtual bool isSkinRequired() const = 0;"
        }
      ]
    },
    {
      "name": "ConstraintDataGeneric",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintData.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 2
        }
      },
      "preview": "class SP_API ConstraintDataGeneric: public PosedDataGeneric<P>, public ConstraintData {",
      "supertypes": [
        "ConstraintData",
        "PosedDataGeneric"
      ],
      "members": [
        {
          "name": "ConstraintDataGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 96
            }
          },
          "preview": "ConstraintDataGeneric(const String &name) : PosedDataGeneric<P>(name), ConstraintData(name) {}"
        },
        {
          "name": "~ConstraintDataGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 37
            }
          },
          "preview": "virtual ~ConstraintDataGeneric() {}"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 52
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) = 0;"
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 91
            }
          },
          "preview": "virtual const String &getName() const override { return PosedDataGeneric<P>::getName(); }"
        },
        {
          "name": "isSkinRequired",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 96
            }
          },
          "preview": "virtual bool isSkinRequired() const override { return PosedDataGeneric<P>::isSkinRequired(); }"
        }
      ]
    },
    {
      "name": "ConstraintTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 5
        }
      },
      "preview": "class SP_API ConstraintTimeline {",
      "documentation": "An interface for timelines which change the property of a constraint.",
      "members": [
        {
          "name": "ConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 47
            }
          },
          "preview": "ConstraintTimeline(int constraintIndex);"
        },
        {
          "name": "~ConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 40
            }
          },
          "preview": "virtual ~ConstraintTimeline() {}"
        },
        {
          "name": "getConstraintIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 69
            }
          },
          "preview": "virtual int getConstraintIndex() { return _constraintIndex; }",
          "documentation": "The index of the constraint in Skeleton::getConstraints() that will be changed when this timeline is applied."
        },
        {
          "name": "setConstraintIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 84
            }
          },
          "preview": "virtual void setConstraintIndex(int inValue) { _constraintIndex = inValue; }"
        },
        {
          "name": "_constraintIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 28
            }
          },
          "preview": "int _constraintIndex;"
        }
      ]
    },
    {
      "name": "ConstraintTimeline1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ConstraintTimeline1.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 2
        }
      },
      "preview": "class SP_API ConstraintTimeline1 : public CurveTimeline1, public ConstraintTimeline {",
      "documentation": "Base class for single-value constraint timelines.",
      "supertypes": [
        "ConstraintTimeline",
        "CurveTimeline1"
      ],
      "members": [
        {
          "name": "ConstraintTimeline1",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 100
            }
          },
          "preview": "ConstraintTimeline1(size_t frameCount, size_t bezierCount, int constraintIndex, Property property);"
        },
        {
          "name": "~ConstraintTimeline1",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 35
            }
          },
          "preview": "virtual ~ConstraintTimeline1() {}"
        }
      ]
    },
    {
      "name": "ContainerUtil",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ContainerUtil.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 125,
          "character": 2
        }
      },
      "preview": "class SP_API ContainerUtil : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "findWithName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 3
            }
          },
          "preview": "static T *findWithName(Vector<T *> &items, const String &name) {"
        },
        {
          "name": "findIndexWithName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 3
            }
          },
          "preview": "static int findIndexWithName(Vector<T *> &items, const String &name) {"
        },
        {
          "name": "findWithDataName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 3
            }
          },
          "preview": "static T *findWithDataName(Vector<T *> &items, const String &name) {"
        },
        {
          "name": "findIndexWithDataName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 3
            }
          },
          "preview": "static int findIndexWithDataName(Vector<T *> &items, const String &name) {"
        },
        {
          "name": "cleanUpVectorOfPointers",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 3
            }
          },
          "preview": "static void cleanUpVectorOfPointers(Vector<T *> &items) {"
        },
        {
          "name": "ContainerUtil",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 17
            }
          },
          "preview": "ContainerUtil();"
        },
        {
          "name": "ContainerUtil",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 38
            }
          },
          "preview": "ContainerUtil(const ContainerUtil &);"
        },
        {
          "name": "operator=",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 49
            }
          },
          "preview": "ContainerUtil &operator=(const ContainerUtil &);"
        }
      ]
    },
    {
      "name": "CurveTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/CurveTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 2
        }
      },
      "preview": "class SP_API CurveTimeline : public Timeline {",
      "documentation": "Base class for frames that use an interpolation bezier curve.",
      "supertypes": [
        "Timeline"
      ],
      "members": [
        {
          "name": "CurveTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 84
            }
          },
          "preview": "explicit CurveTimeline(size_t frameCount, size_t frameEntries, size_t bezierCount);"
        },
        {
          "name": "~CurveTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 26
            }
          },
          "preview": "virtual ~CurveTimeline();"
        },
        {
          "name": "setLinear",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 30
            }
          },
          "preview": "void setLinear(size_t frame);"
        },
        {
          "name": "setStepped",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 31
            }
          },
          "preview": "void setStepped(size_t frame);"
        },
        {
          "name": "setBezier",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 43
            }
          },
          "preview": "setBezier(size_t bezier, size_t frame, float value, float time1, float value1, float cx1, float cy1, float cx2,"
        },
        {
          "name": "getBezierValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 78
            }
          },
          "preview": "float getBezierValue(float time, size_t frame, size_t valueOffset, size_t i);"
        },
        {
          "name": "getCurves",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 28
            }
          },
          "preview": "Vector<float> &getCurves();"
        },
        {
          "name": "LINEAR",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 29
            }
          },
          "preview": "static const int LINEAR = 0;"
        },
        {
          "name": "STEPPED",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 30
            }
          },
          "preview": "static const int STEPPED = 1;"
        },
        {
          "name": "BEZIER",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 29
            }
          },
          "preview": "static const int BEZIER = 2;"
        },
        {
          "name": "BEZIER_SIZE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 35
            }
          },
          "preview": "static const int BEZIER_SIZE = 18;"
        },
        {
          "name": "_curves",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 23
            }
          },
          "preview": "Vector<float> _curves; // type, x, y, ..."
        }
      ]
    },
    {
      "name": "CurveTimeline1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/CurveTimeline.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 2
        }
      },
      "preview": "class SP_API CurveTimeline1 : public CurveTimeline {",
      "documentation": "The base class for a CurveTimeline that sets one property.",
      "supertypes": [
        "CurveTimeline"
      ],
      "members": [
        {
          "name": "CurveTimeline1",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 64
            }
          },
          "preview": "explicit CurveTimeline1(size_t frameCount, size_t bezierCount);",
          "documentation": "@param frameCount The number of frames for this timeline.\n@param bezierCount The maximum number of Bezier curves."
        },
        {
          "name": "~CurveTimeline1",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 27
            }
          },
          "preview": "virtual ~CurveTimeline1();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 54
            }
          },
          "preview": "void setFrame(size_t frame, float time, float value);",
          "documentation": "Sets the time and value for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "getCurveValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 33
            }
          },
          "preview": "float getCurveValue(float time);",
          "documentation": "Returns the interpolated value for the specified time."
        },
        {
          "name": "getRelativeValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 99
            }
          },
          "preview": "float getRelativeValue(float time, float alpha, MixBlend blend, float current, float setup);"
        },
        {
          "name": "getAbsoluteValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 99
            }
          },
          "preview": "float getAbsoluteValue(float time, float alpha, MixBlend blend, float current, float setup);"
        },
        {
          "name": "getAbsoluteValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 113
            }
          },
          "preview": "float getAbsoluteValue (float time, float alpha, MixBlend blend, float current, float setup, float value);"
        },
        {
          "name": "getScaleValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 121
            }
          },
          "preview": "float getScaleValue (float time, float alpha, MixBlend blend, MixDirection direction, float current, float setup);"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 2;"
        },
        {
          "name": "VALUE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 28
            }
          },
          "preview": "static const int VALUE = 1;"
        }
      ]
    },
    {
      "name": "CurveTimeline2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/CurveTimeline.h",
      "range": {
        "start": {
          "line": 98,
          "character": 0
        },
        "end": {
          "line": 114,
          "character": 2
        }
      },
      "preview": "class SP_API CurveTimeline2 : public CurveTimeline {",
      "supertypes": [
        "CurveTimeline"
      ],
      "members": [
        {
          "name": "CurveTimeline2",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 64
            }
          },
          "preview": "explicit CurveTimeline2(size_t frameCount, size_t bezierCount);"
        },
        {
          "name": "~CurveTimeline2",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 27
            }
          },
          "preview": "virtual ~CurveTimeline2();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 69
            }
          },
          "preview": "void setFrame(size_t frame, float time, float value1, float value2);"
        },
        {
          "name": "getCurveValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 33
            }
          },
          "preview": "float getCurveValue(float time);"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 3;"
        },
        {
          "name": "VALUE1",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 29
            }
          },
          "preview": "static const int VALUE1 = 1;"
        },
        {
          "name": "VALUE2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 29
            }
          },
          "preview": "static const int VALUE2 = 2;"
        }
      ]
    },
    {
      "name": "DebugExtension",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Debug.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 134,
          "character": 2
        }
      },
      "preview": "class SP_API DebugExtension : public SpineExtension {",
      "supertypes": [
        "SpineExtension"
      ],
      "members": [
        {
          "name": "DebugExtension",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 3
            }
          },
          "preview": "DebugExtension(SpineExtension *extension) : _extension(extension), _allocations(0), _reallocations(0),"
        },
        {
          "name": "reportLeaks",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 3
            }
          },
          "preview": "void reportLeaks() {"
        },
        {
          "name": "clearAllocations",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 3
            }
          },
          "preview": "void clearAllocations() {"
        },
        {
          "name": "_alloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 3
            }
          },
          "preview": "virtual void *_alloc(size_t size, const char *file, int line) {"
        },
        {
          "name": "_calloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 3
            }
          },
          "preview": "virtual void *_calloc(size_t size, const char *file, int line) {"
        },
        {
          "name": "_realloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 3
            }
          },
          "preview": "virtual void *_realloc(void *ptr, size_t size, const char *file, int line) {"
        },
        {
          "name": "_free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 3
            }
          },
          "preview": "virtual void _free(void *mem, const char *file, int line) {"
        },
        {
          "name": "_readFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 3
            }
          },
          "preview": "virtual char *_readFile(const String &path, int *length) {"
        },
        {
          "name": "getUsedMemory",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 3
            }
          },
          "preview": "size_t getUsedMemory() {"
        },
        {
          "name": "_extension",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 28
            }
          },
          "preview": "SpineExtension *_extension;"
        },
        {
          "name": "_allocated",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 41
            }
          },
          "preview": "std::map<void *, Allocation> _allocated;"
        },
        {
          "name": "_allocations",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 21
            }
          },
          "preview": "size_t _allocations;"
        },
        {
          "name": "_reallocations",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 23
            }
          },
          "preview": "size_t _reallocations;"
        },
        {
          "name": "_frees",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 15
            }
          },
          "preview": "size_t _frees;"
        },
        {
          "name": "_usedMemory",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 20
            }
          },
          "preview": "size_t _usedMemory;"
        }
      ]
    },
    {
      "name": "Allocation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Debug.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 3
        }
      },
      "preview": "struct Allocation {",
      "members": [
        {
          "name": "address",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 16
            }
          },
          "preview": "void *address;"
        },
        {
          "name": "size",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 14
            }
          },
          "preview": "size_t size;"
        },
        {
          "name": "fileName",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 23
            }
          },
          "preview": "const char *fileName;"
        },
        {
          "name": "line",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 11
            }
          },
          "preview": "int line;"
        },
        {
          "name": "Allocation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 4
            }
          },
          "preview": "Allocation() : address(NULL), size(0), fileName(NULL), line(0) {"
        },
        {
          "name": "Allocation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 4
            }
          },
          "preview": "Allocation(void *a, size_t s, const char *f, int l) : address(a), size(s), fileName(f), line(l) {"
        }
      ]
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/DeformTimeline.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 23
        }
      },
      "preview": "class VertexAttachment;"
    },
    {
      "name": "DeformTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/DeformTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 2
        }
      },
      "preview": "class SP_API DeformTimeline : public SlotCurveTimeline {",
      "supertypes": [
        "SlotCurveTimeline"
      ],
      "members": [
        {
          "name": "DeformTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 109
            }
          },
          "preview": "explicit DeformTimeline(size_t frameCount, size_t bezierCount, int slotIndex, VertexAttachment *attachment);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 68
            }
          },
          "preview": "void setFrame(int frameIndex, float time, Vector<float> &vertices);",
          "documentation": "Sets the time and vertices for the specified frame."
        },
        {
          "name": "getVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 39
            }
          },
          "preview": "Vector <Vector<float>> &getVertices();",
          "documentation": "The vertices for each frame."
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 35
            }
          },
          "preview": "VertexAttachment *getAttachment();",
          "documentation": "The attachment that will be deformed."
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 47
            }
          },
          "preview": "void setAttachment(VertexAttachment *inValue);"
        },
        {
          "name": "setBezier",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 52
            }
          },
          "preview": "setBezier(size_t bezier, size_t frame, float value, float time1, float value1, float cx1, float cy1, float cx2,"
        },
        {
          "name": "getCurvePercent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 46
            }
          },
          "preview": "float getCurvePercent(float time, int frame);"
        },
        {
          "name": "getFrameCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 51
            }
          },
          "preview": "size_t getFrameCount() { return _frames.size(); }"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 90
            }
          },
          "preview": "void apply(Slot &slot, SlotPose &pose, float time, float alpha, MixBlend blend) override;"
        },
        {
          "name": "_vertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 34
            }
          },
          "preview": "Vector <Vector<float>> _vertices;"
        },
        {
          "name": "_attachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 31
            }
          },
          "preview": "VertexAttachment *_attachment;"
        }
      ]
    },
    {
      "name": "DrawOrderTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/DrawOrderTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 2
        }
      },
      "preview": "class SP_API DrawOrderTimeline : public Timeline {",
      "documentation": "Changes a skeleton's Skeleton::getDrawOrder().",
      "supertypes": [
        "Timeline"
      ],
      "members": [
        {
          "name": "DrawOrderTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 47
            }
          },
          "preview": "explicit DrawOrderTimeline(size_t frameCount);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "getFrameCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 24
            }
          },
          "preview": "size_t getFrameCount();"
        },
        {
          "name": "getDrawOrders",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 39
            }
          },
          "preview": "Vector <Vector<int>> &getDrawOrders();",
          "documentation": "The draw order for each frame. See setFrame()."
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 65
            }
          },
          "preview": "void setFrame(size_t frame, float time, Vector<int> *drawOrder);",
          "documentation": "Sets the time and draw order for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds.\n@param drawOrder For each slot in Skeleton::slots, the index of the slot in the new draw order. May be null to use setup pose draw order."
        },
        {
          "name": "_drawOrders",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 34
            }
          },
          "preview": "Vector <Vector<int>> _drawOrders;"
        }
      ]
    },
    {
      "name": "EventData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Event.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 16
        }
      },
      "preview": "class EventData;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Event.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 2
        }
      },
      "preview": "class SP_API Event : public SpineObject {",
      "documentation": "Stores the current pose values for an Event.\nSee Timeline::apply(), AnimationStateListener::event(), and\n@see https://esotericsoftware.com/spine-events Events in the Spine User Guide.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Event",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 42
            }
          },
          "preview": "Event(float time, const EventData &data);"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 28
            }
          },
          "preview": "const EventData &getData();",
          "documentation": "The event's setup pose data."
        },
        {
          "name": "getTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 17
            }
          },
          "preview": "float getTime();",
          "documentation": "The animation time this event was keyed."
        },
        {
          "name": "getIntValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 19
            }
          },
          "preview": "int getIntValue();"
        },
        {
          "name": "setIntValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 31
            }
          },
          "preview": "void setIntValue(int inValue);"
        },
        {
          "name": "getFloatValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 23
            }
          },
          "preview": "float getFloatValue();"
        },
        {
          "name": "setFloatValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 35
            }
          },
          "preview": "void setFloatValue(float inValue);"
        },
        {
          "name": "getStringValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 32
            }
          },
          "preview": "const String &getStringValue();"
        },
        {
          "name": "setStringValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 44
            }
          },
          "preview": "void setStringValue(const String &inValue);"
        },
        {
          "name": "getVolume",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 19
            }
          },
          "preview": "float getVolume();"
        },
        {
          "name": "setVolume",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 31
            }
          },
          "preview": "void setVolume(float inValue);"
        },
        {
          "name": "getBalance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 20
            }
          },
          "preview": "float getBalance();"
        },
        {
          "name": "setBalance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 32
            }
          },
          "preview": "void setBalance(float inValue);"
        },
        {
          "name": "_data",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 24
            }
          },
          "preview": "const EventData &_data;"
        },
        {
          "name": "_time",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 19
            }
          },
          "preview": "const float _time;"
        },
        {
          "name": "_intValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 15
            }
          },
          "preview": "int _intValue;"
        },
        {
          "name": "_floatValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 19
            }
          },
          "preview": "float _floatValue;"
        },
        {
          "name": "_stringValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 21
            }
          },
          "preview": "String _stringValue;"
        },
        {
          "name": "_volume",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 15
            }
          },
          "preview": "float _volume;"
        },
        {
          "name": "_balance",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 16
            }
          },
          "preview": "float _balance;"
        }
      ]
    },
    {
      "name": "EventData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/EventData.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 82,
          "character": 2
        }
      },
      "preview": "class SP_API EventData : public SpineObject {",
      "documentation": "Stores the setup pose values for an Event.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "EventData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 40
            }
          },
          "preview": "explicit EventData(const String &name);"
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 31
            }
          },
          "preview": "const String &getName() const;",
          "documentation": "The name of the event, which is unique within the skeleton."
        },
        {
          "name": "getIntValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 25
            }
          },
          "preview": "int getIntValue() const;"
        },
        {
          "name": "setIntValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 31
            }
          },
          "preview": "void setIntValue(int inValue);"
        },
        {
          "name": "getFloatValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 29
            }
          },
          "preview": "float getFloatValue() const;"
        },
        {
          "name": "setFloatValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 35
            }
          },
          "preview": "void setFloatValue(float inValue);"
        },
        {
          "name": "getStringValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 38
            }
          },
          "preview": "const String &getStringValue() const;"
        },
        {
          "name": "setStringValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 44
            }
          },
          "preview": "void setStringValue(const String &inValue);"
        },
        {
          "name": "getAudioPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 36
            }
          },
          "preview": "const String &getAudioPath() const;"
        },
        {
          "name": "setAudioPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 42
            }
          },
          "preview": "void setAudioPath(const String &inValue);"
        },
        {
          "name": "getVolume",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 25
            }
          },
          "preview": "float getVolume() const;"
        },
        {
          "name": "setVolume",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 31
            }
          },
          "preview": "void setVolume(float inValue);"
        },
        {
          "name": "getBalance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 26
            }
          },
          "preview": "float getBalance() const;"
        },
        {
          "name": "setBalance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 32
            }
          },
          "preview": "void setBalance(float inValue);"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 20
            }
          },
          "preview": "const String _name;"
        },
        {
          "name": "_intValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 15
            }
          },
          "preview": "int _intValue;"
        },
        {
          "name": "_floatValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 19
            }
          },
          "preview": "float _floatValue;"
        },
        {
          "name": "_stringValue",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 21
            }
          },
          "preview": "String _stringValue;"
        },
        {
          "name": "_audioPath",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 19
            }
          },
          "preview": "String _audioPath;"
        },
        {
          "name": "_volume",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 15
            }
          },
          "preview": "float _volume;"
        },
        {
          "name": "_balance",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 16
            }
          },
          "preview": "float _balance;"
        }
      ]
    },
    {
      "name": "EventTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/EventTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 2
        }
      },
      "preview": "class SP_API EventTimeline : public Timeline {",
      "documentation": "Fires an Event when specific animation times are reached.",
      "supertypes": [
        "Timeline"
      ],
      "members": [
        {
          "name": "EventTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 43
            }
          },
          "preview": "explicit EventTimeline(size_t frameCount);"
        },
        {
          "name": "~EventTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 18
            }
          },
          "preview": "~EventTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "getFrameCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 24
            }
          },
          "preview": "size_t getFrameCount();"
        },
        {
          "name": "getEvents",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 30
            }
          },
          "preview": "Vector<Event *> &getEvents();",
          "documentation": "The event for each frame."
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 43
            }
          },
          "preview": "void setFrame(size_t frame, Event *event);",
          "documentation": "Sets the time and event for the specified frame.\n@param frame Between 0 and frameCount, inclusive."
        },
        {
          "name": "_events",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 25
            }
          },
          "preview": "Vector<Event *> _events;"
        }
      ]
    },
    {
      "name": "String",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Extension.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 13
        }
      },
      "preview": "class String;"
    },
    {
      "name": "SpineExtension",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Extension.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 2
        }
      },
      "preview": "class SP_API SpineExtension {",
      "members": [
        {
          "name": "alloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 3
            }
          },
          "preview": "static T *alloc(size_t num, const char *file, int line) {"
        },
        {
          "name": "calloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 3
            }
          },
          "preview": "static T *calloc(size_t num, const char *file, int line) {"
        },
        {
          "name": "realloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 3
            }
          },
          "preview": "static T *realloc(T *ptr, size_t num, const char *file, int line) {"
        },
        {
          "name": "free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 3
            }
          },
          "preview": "static void free(T *ptr, const char *file, int line) {"
        },
        {
          "name": "beforeFree",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 3
            }
          },
          "preview": "static void beforeFree(T *ptr) {"
        },
        {
          "name": "readFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 3
            }
          },
          "preview": "static char *readFile(const String &path, int *length) {"
        },
        {
          "name": "setInstance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 59
            }
          },
          "preview": "static void setInstance(SpineExtension *inSpineExtension);"
        },
        {
          "name": "getInstance",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 38
            }
          },
          "preview": "static SpineExtension *getInstance();"
        },
        {
          "name": "~SpineExtension",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 27
            }
          },
          "preview": "virtual ~SpineExtension();"
        },
        {
          "name": "_alloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 67
            }
          },
          "preview": "virtual void *_alloc(size_t size, const char *file, int line) = 0;",
          "documentation": "Implement this function to use your own memory allocator"
        },
        {
          "name": "_calloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 68
            }
          },
          "preview": "virtual void *_calloc(size_t size, const char *file, int line) = 0;"
        },
        {
          "name": "_realloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 80
            }
          },
          "preview": "virtual void *_realloc(void *ptr, size_t size, const char *file, int line) = 0;"
        },
        {
          "name": "_free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 63
            }
          },
          "preview": "virtual void _free(void *mem, const char *file, int line) = 0;",
          "documentation": "If you provide a spineAllocFunc, you should also provide a spineFreeFunc"
        },
        {
          "name": "_readFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 62
            }
          },
          "preview": "virtual char *_readFile(const String &path, int *length) = 0;"
        },
        {
          "name": "_beforeFree",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 57
            }
          },
          "preview": "virtual void _beforeFree(void *ptr) { SP_UNUSED(ptr); }"
        },
        {
          "name": "SpineExtension",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 18
            }
          },
          "preview": "SpineExtension();"
        },
        {
          "name": "_instance",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 34
            }
          },
          "preview": "static SpineExtension *_instance;"
        }
      ]
    },
    {
      "name": "DefaultSpineExtension",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Extension.h",
      "range": {
        "start": {
          "line": 99,
          "character": 0
        },
        "end": {
          "line": 115,
          "character": 2
        }
      },
      "preview": "class SP_API DefaultSpineExtension : public SpineExtension {",
      "supertypes": [
        "SpineExtension"
      ],
      "members": [
        {
          "name": "DefaultSpineExtension",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 25
            }
          },
          "preview": "DefaultSpineExtension();"
        },
        {
          "name": "~DefaultSpineExtension",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 34
            }
          },
          "preview": "virtual ~DefaultSpineExtension();"
        },
        {
          "name": "_alloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 72
            }
          },
          "preview": "virtual void *_alloc(size_t size, const char *file, int line) override;"
        },
        {
          "name": "_calloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 73
            }
          },
          "preview": "virtual void *_calloc(size_t size, const char *file, int line) override;"
        },
        {
          "name": "_realloc",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 85
            }
          },
          "preview": "virtual void *_realloc(void *ptr, size_t size, const char *file, int line) override;"
        },
        {
          "name": "_free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 68
            }
          },
          "preview": "virtual void _free(void *mem, const char *file, int line) override;"
        },
        {
          "name": "_readFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 67
            }
          },
          "preview": "virtual char *_readFile(const String &path, int *length) override;"
        }
      ]
    },
    {
      "name": "DisposeRendererObject",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HasRendererObject.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 60
        }
      },
      "preview": "typedef void (*DisposeRendererObject)(void *rendererObject);"
    },
    {
      "name": "HasRendererObject",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HasRendererObject.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 60,
          "character": 2
        }
      },
      "preview": "class SP_API HasRendererObject {",
      "members": [
        {
          "name": "HasRendererObject",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 67
            }
          },
          "preview": "explicit HasRendererObject() : _rendererObject(0), _dispose(0) {};"
        },
        {
          "name": "~HasRendererObject",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 3
            }
          },
          "preview": "virtual ~HasRendererObject() {"
        },
        {
          "name": "getRendererObject",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 55
            }
          },
          "preview": "void *getRendererObject() { return _rendererObject; }"
        },
        {
          "name": "setRendererObject",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 3
            }
          },
          "preview": "void setRendererObject(void *rendererObject, DisposeRendererObject dispose = 0) {"
        },
        {
          "name": "_rendererObject",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 23
            }
          },
          "preview": "void *_rendererObject;"
        },
        {
          "name": "_dispose",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 32
            }
          },
          "preview": "DisposeRendererObject _dispose;"
        }
      ]
    },
    {
      "name": "HashMap",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HashMap.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 196,
          "character": 2
        }
      },
      "preview": "class SP_API HashMap : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "HashMap",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 3
            }
          },
          "preview": "HashMap() :"
        },
        {
          "name": "~HashMap",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 3
            }
          },
          "preview": "~HashMap() {"
        },
        {
          "name": "clear",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 3
            }
          },
          "preview": "void clear() {"
        },
        {
          "name": "size",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 3
            }
          },
          "preview": "size_t size() {"
        },
        {
          "name": "put",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 3
            }
          },
          "preview": "void put(const K &key, const V &value) {"
        },
        {
          "name": "addAll",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 139,
              "character": 3
            }
          },
          "preview": "bool addAll(Vector <K> &keys, const V &value) {"
        },
        {
          "name": "containsKey",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 3
            }
          },
          "preview": "bool containsKey(const K &key) {"
        },
        {
          "name": "remove",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 3
            }
          },
          "preview": "bool remove(const K &key) {"
        },
        {
          "name": "operator[]",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 162,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 3
            }
          },
          "preview": "V operator[](const K &key) {"
        },
        {
          "name": "getEntries",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 171,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 3
            }
          },
          "preview": "Entries getEntries() const {"
        },
        {
          "name": "find",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 176,
              "character": 0
            },
            "end": {
              "line": 182,
              "character": 3
            }
          },
          "preview": "Entry *find(const K &key) {"
        },
        {
          "name": "_head",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 194,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 14
            }
          },
          "preview": "Entry *_head;"
        },
        {
          "name": "_size",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 195,
              "character": 0
            },
            "end": {
              "line": 195,
              "character": 14
            }
          },
          "preview": "size_t _size;"
        }
      ]
    },
    {
      "name": "Entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HashMap.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 13
        }
      },
      "preview": "class Entry;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "Pair",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HashMap.h",
      "range": {
        "start": {
          "line": 50,
          "character": 0
        },
        "end": {
          "line": 56,
          "character": 3
        }
      },
      "preview": "class SP_API Pair {",
      "members": [
        {
          "name": "Pair",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 50
            }
          },
          "preview": "explicit Pair(K &k, V &v) : key(k), value(v) {}"
        },
        {
          "name": "key",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 9
            }
          },
          "preview": "K &key;"
        },
        {
          "name": "value",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 11
            }
          },
          "preview": "V &value;"
        }
      ]
    },
    {
      "name": "Entries",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HashMap.h",
      "range": {
        "start": {
          "line": 58,
          "character": 0
        },
        "end": {
          "line": 85,
          "character": 3
        }
      },
      "preview": "class SP_API Entries {",
      "members": [
        {
          "name": "Entries",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 4
            }
          },
          "preview": "explicit Entries(Entry *entry) : _entry(NULL), _hasChecked(false) {"
        },
        {
          "name": "next",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 4
            }
          },
          "preview": "Pair next() {"
        },
        {
          "name": "hasNext",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 4
            }
          },
          "preview": "bool hasNext() {"
        },
        {
          "name": "_hasChecked",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 19
            }
          },
          "preview": "bool _hasChecked;"
        },
        {
          "name": "_start",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 15
            }
          },
          "preview": "Entry _start;"
        },
        {
          "name": "_entry",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 16
            }
          },
          "preview": "Entry *_entry;"
        }
      ]
    },
    {
      "name": "Entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/HashMap.h",
      "range": {
        "start": {
          "line": 184,
          "character": 0
        },
        "end": {
          "line": 192,
          "character": 3
        }
      },
      "preview": "class SP_API Entry : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_key",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 186,
              "character": 0
            },
            "end": {
              "line": 186,
              "character": 9
            }
          },
          "preview": "K _key;"
        },
        {
          "name": "_value",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 187,
              "character": 0
            },
            "end": {
              "line": 187,
              "character": 11
            }
          },
          "preview": "V _value;"
        },
        {
          "name": "next",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 188,
              "character": 0
            },
            "end": {
              "line": 188,
              "character": 14
            }
          },
          "preview": "Entry *next;"
        },
        {
          "name": "prev",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 14
            }
          },
          "preview": "Entry *prev;"
        },
        {
          "name": "Entry",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 191,
              "character": 38
            }
          },
          "preview": "Entry() : next(NULL), prev(NULL) {}"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraint.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraint.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraint.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "IkConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraint.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 2
        }
      },
      "preview": "class SP_API IkConstraint : public ConstraintGeneric<IkConstraint, IkConstraintData, IkConstraintPose> {",
      "members": [
        {
          "name": "IkConstraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 58
            }
          },
          "preview": "IkConstraint(IkConstraintData &data, Skeleton &skeleton);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 48
            }
          },
          "preview": "virtual IkConstraint* copy(Skeleton& skeleton);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 67
            }
          },
          "preview": "virtual void update(Skeleton& skeleton, Physics physics) override;"
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 48
            }
          },
          "preview": "virtual void sort(Skeleton& skeleton) override;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 40
            }
          },
          "preview": "virtual bool isSourceActive() override;"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 29
            }
          },
          "preview": "IkConstraintData &getData();"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 32
            }
          },
          "preview": "Vector<BonePose *> &getBones();"
        },
        {
          "name": "getTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 19
            }
          },
          "preview": "Bone *getTarget();"
        },
        {
          "name": "setTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 31
            }
          },
          "preview": "void setTarget(Bone *inValue);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 127
            }
          },
          "preview": "apply(Skeleton& skeleton, BonePose& bone, float targetX, float targetY, bool compress, bool stretch, bool uniform, float mix);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 31
            }
          },
          "preview": "apply(Skeleton& skeleton, BonePose& parent, BonePose& child, float targetX, float targetY, int bendDirection, bool stretch, bool uniform,"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 27
            }
          },
          "preview": "Vector<BonePose *> _bones;"
        },
        {
          "name": "_target",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 15
            }
          },
          "preview": "Bone *_target;"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraintData.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "IkConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraintData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 19
        }
      },
      "preview": "class IkConstraint;"
    },
    {
      "name": "IkConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraintData.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 2
        }
      },
      "preview": "class SP_API IkConstraintData : public ConstraintDataGeneric<IkConstraint, IkConstraintPose> {",
      "members": [
        {
          "name": "IkConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 47
            }
          },
          "preview": "explicit IkConstraintData(const String &name);"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 57
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) override;"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 32
            }
          },
          "preview": "Vector<BoneData *> &getBones();",
          "documentation": "The bones that are constrained by this IK Constraint."
        },
        {
          "name": "getTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 23
            }
          },
          "preview": "BoneData *getTarget();",
          "documentation": "The bone that is the IK target."
        },
        {
          "name": "setTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 35
            }
          },
          "preview": "void setTarget(BoneData *inValue);"
        },
        {
          "name": "getUniform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 19
            }
          },
          "preview": "bool getUniform();",
          "documentation": "When true and IkConstraintPose compress or stretch is used, the bone is scaled on both the X and Y axes."
        },
        {
          "name": "setUniform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 31
            }
          },
          "preview": "void setUniform(bool uniform);"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 27
            }
          },
          "preview": "Vector<BoneData *> _bones;"
        },
        {
          "name": "_target",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 19
            }
          },
          "preview": "BoneData *_target;"
        },
        {
          "name": "_uniform",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 15
            }
          },
          "preview": "bool _uniform;"
        }
      ]
    },
    {
      "name": "IkConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraintPose.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 2
        }
      },
      "preview": "class SP_API IkConstraintPose : public Pose<IkConstraintPose> {",
      "documentation": "Stores the current pose for an IK constraint.",
      "members": [
        {
          "name": "IkConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 20
            }
          },
          "preview": "IkConstraintPose();"
        },
        {
          "name": "~IkConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 29
            }
          },
          "preview": "virtual ~IkConstraintPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 51
            }
          },
          "preview": "virtual void set(IkConstraintPose& pose) override;"
        },
        {
          "name": "getMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 16
            }
          },
          "preview": "float getMix();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation.\nFor two bone IK: if the parent bone has local nonuniform scale, the child bone's local Y translation is set to 0."
        },
        {
          "name": "setMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 24
            }
          },
          "preview": "void setMix(float mix);"
        },
        {
          "name": "getSoftness",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 21
            }
          },
          "preview": "float getSoftness();",
          "documentation": "For two bone IK, the target bone's distance from the maximum reach of the bones where rotation begins to slow. The bones\nwill not straighten completely until the target is this far out of range."
        },
        {
          "name": "setSoftness",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 34
            }
          },
          "preview": "void setSoftness(float softness);"
        },
        {
          "name": "getBendDirection",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 24
            }
          },
          "preview": "int getBendDirection();",
          "documentation": "For two bone IK, controls the bend direction of the IK bones, either 1 or -1."
        },
        {
          "name": "setBendDirection",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 42
            }
          },
          "preview": "void setBendDirection(int bendDirection);"
        },
        {
          "name": "getCompress",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 20
            }
          },
          "preview": "bool getCompress();",
          "documentation": "For one bone IK, when true and the target is too close, the bone is scaled to reach it."
        },
        {
          "name": "setCompress",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 33
            }
          },
          "preview": "void setCompress(bool compress);"
        },
        {
          "name": "getStretch",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 19
            }
          },
          "preview": "bool getStretch();",
          "documentation": "When true and the target is out of range, the parent bone is scaled to reach it.\nFor two bone IK: 1) the child bone's local Y translation is set to 0, 2) stretch is not applied if getSoftness() is\n> 0, and 3) if the parent bone has local nonuniform scale, stretch is not applied."
        },
        {
          "name": "setStretch",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 31
            }
          },
          "preview": "void setStretch(bool stretch);"
        },
        {
          "name": "_bendDirection",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 20
            }
          },
          "preview": "int _bendDirection;"
        },
        {
          "name": "_compress",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 16
            }
          },
          "preview": "bool _compress, _stretch;"
        },
        {
          "name": "_stretch",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 26
            }
          },
          "preview": "bool _compress, _stretch;"
        },
        {
          "name": "_mix",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 12
            }
          },
          "preview": "float _mix, _softness;"
        },
        {
          "name": "_softness",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 23
            }
          },
          "preview": "float _mix, _softness;"
        }
      ]
    },
    {
      "name": "IkConstraintTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/IkConstraintTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API IkConstraintTimeline : public CurveTimeline, public ConstraintTimeline {",
      "supertypes": [
        "CurveTimeline",
        "ConstraintTimeline"
      ],
      "members": [
        {
          "name": "IkConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 93
            }
          },
          "preview": "explicit IkConstraintTimeline(size_t frameCount, size_t bezierCount, int ikConstraintIndex);"
        },
        {
          "name": "~IkConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 33
            }
          },
          "preview": "virtual ~IkConstraintTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 113
            }
          },
          "preview": "void setFrame(int frame, float time, float mix, float softness, int bendDirection, bool compress, bool stretch);",
          "documentation": "Sets the time, mix, softness, bend direction, compress, and stretch for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds.\n@param bendDirection 1 or -1."
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 6;"
        },
        {
          "name": "MIX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 26
            }
          },
          "preview": "static const int MIX = 1;"
        },
        {
          "name": "SOFTNESS",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 31
            }
          },
          "preview": "static const int SOFTNESS = 2;"
        },
        {
          "name": "BEND_DIRECTION",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 37
            }
          },
          "preview": "static const int BEND_DIRECTION = 3;"
        },
        {
          "name": "COMPRESS",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 31
            }
          },
          "preview": "static const int COMPRESS = 4;"
        },
        {
          "name": "STRETCH",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 30
            }
          },
          "preview": "static const int STRETCH = 5;"
        }
      ]
    },
    {
      "name": "Inherit",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 2
        }
      },
      "preview": "enum Inherit {",
      "documentation": "Determines how a bone inherits world transforms from parent bones.",
      "members": []
    },
    {
      "name": "Inherit_Normal",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 20
        }
      },
      "preview": "Inherit_Normal = 0,"
    },
    {
      "name": "Inherit_OnlyTranslation",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 25
        }
      },
      "preview": "Inherit_OnlyTranslation,"
    },
    {
      "name": "Inherit_NoRotationOrReflection",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 32
        }
      },
      "preview": "Inherit_NoRotationOrReflection,"
    },
    {
      "name": "Inherit_NoScale",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 17
        }
      },
      "preview": "Inherit_NoScale,"
    },
    {
      "name": "Inherit_NoScaleOrReflection",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Inherit.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 29
        }
      },
      "preview": "Inherit_NoScaleOrReflection"
    },
    {
      "name": "InheritTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/InheritTimeline.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 2
        }
      },
      "preview": "class SP_API InheritTimeline : public Timeline, public BoneTimeline {",
      "supertypes": [
        "BoneTimeline",
        "Timeline"
      ],
      "members": [
        {
          "name": "InheritTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 60
            }
          },
          "preview": "explicit InheritTimeline(size_t frameCount, int boneIndex);"
        },
        {
          "name": "~InheritTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 28
            }
          },
          "preview": "virtual ~InheritTimeline();"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 61
            }
          },
          "preview": "void setFrame(int frame, float time, Inherit inherit);",
          "documentation": "Sets the inherit transform mode for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 36
            }
          },
          "preview": "static const int ENTRIES = 2;"
        },
        {
          "name": "INHERIT",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 36
            }
          },
          "preview": "static const int INHERIT = 1;"
        }
      ]
    },
    {
      "name": "Json",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Json.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 112,
          "character": 2
        }
      },
      "preview": "class SP_API Json : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "JSON_FALSE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 29
            }
          },
          "preview": "static const int JSON_FALSE;",
          "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*****************************************************************************/\n#ifndef Spine_Json_h\n#define Spine_Json_h\n#include <spine/SpineObject.h>\n#ifndef SPINE_JSON_HAVE_PREV\n/* spine doesn't use the \"prev\" link in the Json sibling lists. */\n#define SPINE_JSON_HAVE_PREV 0\n#endif\nnamespace spine {\nclass SP_API Json : public SpineObject {\nfriend class SkeletonJson;\npublic:\n/* Json Types:"
        },
        {
          "name": "JSON_TRUE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 28
            }
          },
          "preview": "static const int JSON_TRUE;"
        },
        {
          "name": "JSON_NULL",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 28
            }
          },
          "preview": "static const int JSON_NULL;"
        },
        {
          "name": "JSON_NUMBER",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 30
            }
          },
          "preview": "static const int JSON_NUMBER;"
        },
        {
          "name": "JSON_STRING",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 30
            }
          },
          "preview": "static const int JSON_STRING;"
        },
        {
          "name": "JSON_ARRAY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 29
            }
          },
          "preview": "static const int JSON_ARRAY;"
        },
        {
          "name": "JSON_OBJECT",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 30
            }
          },
          "preview": "static const int JSON_OBJECT;"
        },
        {
          "name": "getItem",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 56
            }
          },
          "preview": "static Json *getItem(Json *object, const char *string);"
        },
        {
          "name": "getItem",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 52
            }
          },
          "preview": "static Json *getItem(Json *object, int childIndex);"
        },
        {
          "name": "getString",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 88
            }
          },
          "preview": "static const char *getString(Json *object, const char *name, const char *defaultValue);"
        },
        {
          "name": "getFloat",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 75
            }
          },
          "preview": "static float getFloat(Json *object, const char *name, float defaultValue);"
        },
        {
          "name": "getInt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 69
            }
          },
          "preview": "static int getInt(Json *object, const char *name, int defaultValue);"
        },
        {
          "name": "getBoolean",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 75
            }
          },
          "preview": "static bool getBoolean(Json *object, const char *name, bool defaultValue);"
        },
        {
          "name": "getError",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 31
            }
          },
          "preview": "static const char *getError();"
        },
        {
          "name": "Json",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 34
            }
          },
          "preview": "explicit Json(const char *value);"
        },
        {
          "name": "~Json",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 9
            }
          },
          "preview": "~Json();"
        },
        {
          "name": "_error",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 27
            }
          },
          "preview": "static const char *_error;"
        },
        {
          "name": "_next",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 13
            }
          },
          "preview": "Json *_next;"
        },
        {
          "name": "_child",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 14
            }
          },
          "preview": "Json *_child; /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */"
        },
        {
          "name": "_type",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 11
            }
          },
          "preview": "int _type; /* The type of the item, as above. */"
        },
        {
          "name": "_size",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 11
            }
          },
          "preview": "int _size; /* The number of children. */"
        },
        {
          "name": "_valueString",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 26
            }
          },
          "preview": "const char *_valueString; /* The item's string, if type==JSON_STRING */"
        },
        {
          "name": "_valueInt",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 15
            }
          },
          "preview": "int _valueInt; /* The item's number, if type==JSON_NUMBER */"
        },
        {
          "name": "_valueFloat",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 19
            }
          },
          "preview": "float _valueFloat; /* The item's number, if type==JSON_NUMBER */"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 19
            }
          },
          "preview": "const char *_name; /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */"
        },
        {
          "name": "skip",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 46
            }
          },
          "preview": "static const char *skip(const char *inValue);"
        },
        {
          "name": "parseValue",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 62
            }
          },
          "preview": "static const char *parseValue(Json *item, const char *value);"
        },
        {
          "name": "parseString",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 61
            }
          },
          "preview": "static const char *parseString(Json *item, const char *str);"
        },
        {
          "name": "parseNumber",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 61
            }
          },
          "preview": "static const char *parseNumber(Json *item, const char *num);"
        },
        {
          "name": "parseArray",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 62
            }
          },
          "preview": "static const char *parseArray(Json *item, const char *value);"
        },
        {
          "name": "parseObject",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 63
            }
          },
          "preview": "static const char *parseObject(Json *item, const char *value);"
        },
        {
          "name": "json_strcasecmp",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 60
            }
          },
          "preview": "static int json_strcasecmp(const char *s1, const char *s2);"
        }
      ]
    },
    {
      "name": "MeshAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/LinkedMesh.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 21
        }
      },
      "preview": "class MeshAttachment;"
    },
    {
      "name": "LinkedMesh",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/LinkedMesh.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 2
        }
      },
      "preview": "class SP_API LinkedMesh : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "LinkedMesh",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 28
            }
          },
          "preview": "LinkedMesh(MeshAttachment *mesh, const int skinIndex, size_t slotIndex, const String &parent,"
        },
        {
          "name": "LinkedMesh",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 40
            }
          },
          "preview": "LinkedMesh(MeshAttachment *mesh, const String &skin, size_t slotIndex, const String &parent,"
        },
        {
          "name": "_mesh",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 23
            }
          },
          "preview": "MeshAttachment *_mesh;"
        },
        {
          "name": "_skinIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 16
            }
          },
          "preview": "int _skinIndex;"
        },
        {
          "name": "_skin",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 20
            }
          },
          "preview": "String _skin;"
        },
        {
          "name": "_slotIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 19
            }
          },
          "preview": "size_t _slotIndex;"
        },
        {
          "name": "_parent",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 16
            }
          },
          "preview": "String _parent;"
        },
        {
          "name": "_inheritTimeline",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 23
            }
          },
          "preview": "bool _inheritTimeline;"
        }
      ]
    },
    {
      "name": "MathUtil",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MathUtil.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 2
        }
      },
      "preview": "class SP_API MathUtil : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "MathUtil",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 12
            }
          },
          "preview": "MathUtil();"
        },
        {
          "name": "Pi",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 23
            }
          },
          "preview": "static const float Pi;"
        },
        {
          "name": "Pi_2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 25
            }
          },
          "preview": "static const float Pi_2;"
        },
        {
          "name": "InvPi_2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 34
            }
          },
          "preview": "static const float InvPi_2;"
        },
        {
          "name": "Deg_Rad",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 28
            }
          },
          "preview": "static const float Deg_Rad;"
        },
        {
          "name": "Rad_Deg",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 28
            }
          },
          "preview": "static const float Rad_Deg;"
        },
        {
          "name": "min",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 57
            }
          },
          "preview": "static inline T min(T a, T b) { return a < b ? a : b; }"
        },
        {
          "name": "max",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 57
            }
          },
          "preview": "static inline T max(T a, T b) { return a > b ? a : b; }"
        },
        {
          "name": "sign",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 30
            }
          },
          "preview": "static float sign(float val);"
        },
        {
          "name": "clamp",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 55
            }
          },
          "preview": "static float clamp(float x, float lower, float upper);"
        },
        {
          "name": "abs",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 27
            }
          },
          "preview": "static float abs(float v);"
        },
        {
          "name": "sin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 33
            }
          },
          "preview": "static float sin(float radians);",
          "documentation": "Returns the sine in radians from a lookup table."
        },
        {
          "name": "cos",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 33
            }
          },
          "preview": "static float cos(float radians);",
          "documentation": "Returns the cosine in radians from a lookup table."
        },
        {
          "name": "sinDeg",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 36
            }
          },
          "preview": "static float sinDeg(float degrees);",
          "documentation": "Returns the sine in radians from a lookup table."
        },
        {
          "name": "cosDeg",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 36
            }
          },
          "preview": "static float cosDeg(float degrees);",
          "documentation": "Returns the cosine in radians from a lookup table."
        },
        {
          "name": "atan2",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 38
            }
          },
          "preview": "static float atan2(float y, float x);",
          "documentation": "Returns atan2 in radians, faster but less accurate than Math.Atan2. Average error of 0.00231 radians (0.1323\ndegrees), largest error of 0.00488 radians (0.2796 degrees)."
        },
        {
          "name": "atan2Deg",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 47
            }
          },
          "preview": "static float atan2Deg(float x, float y);"
        },
        {
          "name": "acos",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 28
            }
          },
          "preview": "static float acos(float v);"
        },
        {
          "name": "sqrt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 28
            }
          },
          "preview": "static float sqrt(float v);"
        },
        {
          "name": "fmod",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 37
            }
          },
          "preview": "static float fmod(float a, float b);"
        },
        {
          "name": "isNan",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 28
            }
          },
          "preview": "static bool isNan(float v);"
        },
        {
          "name": "quietNan",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 31
            }
          },
          "preview": "static float quietNan();"
        },
        {
          "name": "random",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 23
            }
          },
          "preview": "static float random();"
        },
        {
          "name": "randomTriangular",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 53
            }
          },
          "preview": "static float randomTriangular(float min, float max);"
        },
        {
          "name": "randomTriangular",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 65
            }
          },
          "preview": "static float randomTriangular(float min, float max, float mode);"
        },
        {
          "name": "pow",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 36
            }
          },
          "preview": "static float pow(float a, float b);"
        },
        {
          "name": "ceil",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 34
            }
          },
          "preview": "static float ceil(float v);"
        }
      ]
    },
    {
      "name": "Interpolation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MathUtil.h",
      "range": {
        "start": {
          "line": 103,
          "character": 0
        },
        "end": {
          "line": 111,
          "character": 2
        }
      },
      "preview": "struct SP_API Interpolation {",
      "members": [
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 34
            }
          },
          "preview": "virtual float apply(float a) = 0;"
        },
        {
          "name": "interpolate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 3
            }
          },
          "preview": "virtual float interpolate(float start, float end, float a) {"
        },
        {
          "name": "~Interpolation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 29
            }
          },
          "preview": "virtual ~Interpolation() {};"
        }
      ]
    },
    {
      "name": "PowInterpolation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MathUtil.h",
      "range": {
        "start": {
          "line": 113,
          "character": 0
        },
        "end": {
          "line": 123,
          "character": 2
        }
      },
      "preview": "struct SP_API PowInterpolation : public Interpolation {",
      "supertypes": [
        "Interpolation"
      ],
      "members": [
        {
          "name": "PowInterpolation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 3
            }
          },
          "preview": "PowInterpolation(int power) : power(power) {"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 3
            }
          },
          "preview": "float apply(float a) {"
        },
        {
          "name": "power",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 11
            }
          },
          "preview": "int power;"
        }
      ]
    },
    {
      "name": "PowOutInterpolation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MathUtil.h",
      "range": {
        "start": {
          "line": 125,
          "character": 0
        },
        "end": {
          "line": 134,
          "character": 2
        }
      },
      "preview": "struct SP_API PowOutInterpolation : public Interpolation {",
      "supertypes": [
        "Interpolation"
      ],
      "members": [
        {
          "name": "PowOutInterpolation",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 3
            }
          },
          "preview": "PowOutInterpolation(int power) : power(power) {"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 3
            }
          },
          "preview": "float apply(float a) {"
        },
        {
          "name": "power",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 11
            }
          },
          "preview": "int power;"
        }
      ]
    },
    {
      "name": "MeshAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MeshAttachment.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 118,
          "character": 2
        }
      },
      "preview": "class SP_API MeshAttachment : public VertexAttachment {",
      "documentation": "Attachment that displays a texture region using a mesh.",
      "supertypes": [
        "VertexAttachment"
      ],
      "members": [
        {
          "name": "MeshAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 45
            }
          },
          "preview": "explicit MeshAttachment(const String &name);"
        },
        {
          "name": "~MeshAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 27
            }
          },
          "preview": "virtual ~MeshAttachment();"
        },
        {
          "name": "computeWorldVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 29
            }
          },
          "preview": "virtual void computeWorldVertices(Skeleton &skeleton, Slot &slot, size_t start, size_t count, float *worldVertices, size_t offset,"
        },
        {
          "name": "updateRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 21
            }
          },
          "preview": "void updateRegion();"
        },
        {
          "name": "getHullLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 21
            }
          },
          "preview": "int getHullLength();"
        },
        {
          "name": "setHullLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 33
            }
          },
          "preview": "void setHullLength(int inValue);"
        },
        {
          "name": "getRegionUVs",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 31
            }
          },
          "preview": "Vector<float> &getRegionUVs();"
        },
        {
          "name": "getUVs",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 25
            }
          },
          "preview": "Vector<float> &getUVs();",
          "documentation": "The UV pair for each vertex, normalized within the entire texture. See also MeshAttachment::updateRegion"
        },
        {
          "name": "getTriangles",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 40
            }
          },
          "preview": "Vector<unsigned short> &getTriangles();"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "getPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 25
            }
          },
          "preview": "const String &getPath();"
        },
        {
          "name": "setPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 37
            }
          },
          "preview": "void setPath(const String &inValue);"
        },
        {
          "name": "getRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 28
            }
          },
          "preview": "TextureRegion *getRegion();"
        },
        {
          "name": "setRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 39
            }
          },
          "preview": "void setRegion(TextureRegion *region);"
        },
        {
          "name": "getSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 25
            }
          },
          "preview": "Sequence *getSequence();"
        },
        {
          "name": "setSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 38
            }
          },
          "preview": "void setSequence(Sequence *sequence);"
        },
        {
          "name": "getParentMesh",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 33
            }
          },
          "preview": "MeshAttachment *getParentMesh();"
        },
        {
          "name": "setParentMesh",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 45
            }
          },
          "preview": "void setParentMesh(MeshAttachment *inValue);"
        },
        {
          "name": "getEdges",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 36
            }
          },
          "preview": "Vector<unsigned short> &getEdges();"
        },
        {
          "name": "getWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 18
            }
          },
          "preview": "float getWidth();"
        },
        {
          "name": "setWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 30
            }
          },
          "preview": "void setWidth(float inValue);"
        },
        {
          "name": "getHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 19
            }
          },
          "preview": "float getHeight();"
        },
        {
          "name": "setHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 31
            }
          },
          "preview": "void setHeight(float inValue);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "newLinkedMesh",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 33
            }
          },
          "preview": "MeshAttachment *newLinkedMesh();"
        },
        {
          "name": "_parentMesh",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 29
            }
          },
          "preview": "MeshAttachment *_parentMesh;"
        },
        {
          "name": "_uvs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 20
            }
          },
          "preview": "Vector<float> _uvs;"
        },
        {
          "name": "_regionUVs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 26
            }
          },
          "preview": "Vector<float> _regionUVs;"
        },
        {
          "name": "_triangles",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 35
            }
          },
          "preview": "Vector<unsigned short> _triangles;"
        },
        {
          "name": "_edges",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 31
            }
          },
          "preview": "Vector<unsigned short> _edges;"
        },
        {
          "name": "_path",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 14
            }
          },
          "preview": "String _path;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 14
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "_hullLength",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 17
            }
          },
          "preview": "int _hullLength;"
        },
        {
          "name": "_width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 12
            }
          },
          "preview": "int _width, _height;"
        },
        {
          "name": "_height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 21
            }
          },
          "preview": "int _width, _height;"
        },
        {
          "name": "_region",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 24
            }
          },
          "preview": "TextureRegion *_region;"
        },
        {
          "name": "_sequence",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 21
            }
          },
          "preview": "Sequence *_sequence;"
        }
      ]
    },
    {
      "name": "MixBlend",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixBlend.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 2
        }
      },
      "preview": "enum MixBlend {",
      "documentation": "Controls how timeline values are mixed with setup pose values or current pose values when a timeline is applied with\nalpha < 1.\nSee Timeline::apply().",
      "members": []
    },
    {
      "name": "MixBlend_Setup",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixBlend.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 20
        }
      },
      "preview": "MixBlend_Setup = 0,",
      "documentation": "Transitions between the setup and timeline values (the current value is not used). Before the first frame, the setup\nvalue is used.\nMixBlend_Setup is intended to transition to or from the setup pose, not for animations layered on top of others."
    },
    {
      "name": "MixBlend_First",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixBlend.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 16
        }
      },
      "preview": "MixBlend_First,",
      "documentation": "Transitions between the current and timeline values. Before the first frame, transitions between the current and setup\nvalues. Timelines which perform instant transitions, such as DrawOrderTimeline or AttachmentTimeline, use\nthe setup value before the first frame.\nMixBlend_First is intended for the first animations applied, not for animations layered on top of others."
    },
    {
      "name": "MixBlend_Replace",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixBlend.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 18
        }
      },
      "preview": "MixBlend_Replace,",
      "documentation": "Transitions between the current and timeline values. No change is made before the first frame.\nMixBlend_Replace is intended for animations layered on top of others, not for the first animations applied."
    },
    {
      "name": "MixBlend_Add",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixBlend.h",
      "range": {
        "start": {
          "line": 60,
          "character": 0
        },
        "end": {
          "line": 60,
          "character": 14
        }
      },
      "preview": "MixBlend_Add",
      "documentation": "Transitions between the current value and the current plus timeline values. No change is made before the first frame.\nMixBlend_Add is intended for animations layered on top of others, not for the first animations applied.\nProperties set by additive animations must be set manually or by another animation before applying the additive\nanimations, else the property values will increase each time the additive animations are applied."
    },
    {
      "name": "MixDirection",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixDirection.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 2
        }
      },
      "preview": "enum MixDirection {",
      "documentation": "Indicates whether a timeline's alpha is mixing out over time toward 0 (the setup or current pose value) or\nmixing in toward 1 (the timeline's value). Some timelines use this to decide how values are applied.\nSee Timeline::apply().",
      "members": []
    },
    {
      "name": "MixDirection_In",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixDirection.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 21
        }
      },
      "preview": "MixDirection_In = 0,"
    },
    {
      "name": "MixDirection_Out",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/MixDirection.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 18
        }
      },
      "preview": "MixDirection_Out"
    },
    {
      "name": "PathAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathAttachment.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API PathAttachment : public VertexAttachment {",
      "supertypes": [
        "VertexAttachment"
      ],
      "members": [
        {
          "name": "PathAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 45
            }
          },
          "preview": "explicit PathAttachment(const String &name);"
        },
        {
          "name": "getLengths",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 29
            }
          },
          "preview": "Vector<float> &getLengths();",
          "documentation": "The length in the setup pose from the start of the path to the end of each curve."
        },
        {
          "name": "isClosed",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 17
            }
          },
          "preview": "bool isClosed();"
        },
        {
          "name": "setClosed",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 30
            }
          },
          "preview": "void setClosed(bool inValue);"
        },
        {
          "name": "isConstantSpeed",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 24
            }
          },
          "preview": "bool isConstantSpeed();"
        },
        {
          "name": "setConstantSpeed",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 37
            }
          },
          "preview": "void setConstantSpeed(bool inValue);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "_lengths",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 24
            }
          },
          "preview": "Vector<float> _lengths;"
        },
        {
          "name": "_closed",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 14
            }
          },
          "preview": "bool _closed;"
        },
        {
          "name": "_constantSpeed",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 21
            }
          },
          "preview": "bool _constantSpeed;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 14
            }
          },
          "preview": "Color _color;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "PathAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 21
        }
      },
      "preview": "class PathAttachment;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 11
        }
      },
      "preview": "class Skin;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "PathConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraint.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 110,
          "character": 2
        }
      },
      "preview": "class SP_API PathConstraint : public ConstraintGeneric<PathConstraint, PathConstraintData, PathConstraintPose> {",
      "documentation": "Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\nconstrained bones so they follow a PathAttachment.\nSee https://esotericsoftware.com/spine-path-constraints Path constraints in the Spine User Guide.",
      "members": [
        {
          "name": "epsilon",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 28
            }
          },
          "preview": "static const float epsilon;"
        },
        {
          "name": "NONE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 23
            }
          },
          "preview": "static const int NONE, BEFORE, AFTER;"
        },
        {
          "name": "BEFORE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 31
            }
          },
          "preview": "static const int NONE, BEFORE, AFTER;"
        },
        {
          "name": "AFTER",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 38
            }
          },
          "preview": "static const int NONE, BEFORE, AFTER;"
        },
        {
          "name": "PathConstraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 62
            }
          },
          "preview": "PathConstraint(PathConstraintData &data, Skeleton &skeleton);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 42
            }
          },
          "preview": "PathConstraint* copy(Skeleton &skeleton);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 67
            }
          },
          "preview": "virtual void update(Skeleton& skeleton, Physics physics) override;",
          "documentation": "Applies the constraint to the constrained bones."
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 48
            }
          },
          "preview": "virtual void sort(Skeleton& skeleton) override;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 40
            }
          },
          "preview": "virtual bool isSourceActive() override;"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 32
            }
          },
          "preview": "Vector<BonePose *> &getBones();",
          "documentation": "The bones that will be modified by this path constraint."
        },
        {
          "name": "getSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 17
            }
          },
          "preview": "Slot *getSlot();",
          "documentation": "The slot whose path attachment will be used to constrained the bones."
        },
        {
          "name": "setSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 26
            }
          },
          "preview": "void setSlot(Slot *slot);"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 31
            }
          },
          "preview": "PathConstraintData &getData();"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 27
            }
          },
          "preview": "Vector<BonePose *> _bones;"
        },
        {
          "name": "_slot",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 13
            }
          },
          "preview": "Slot *_slot;"
        },
        {
          "name": "_spaces",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 23
            }
          },
          "preview": "Vector<float> _spaces;"
        },
        {
          "name": "_positions",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 26
            }
          },
          "preview": "Vector<float> _positions;"
        },
        {
          "name": "_world",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 22
            }
          },
          "preview": "Vector<float> _world;"
        },
        {
          "name": "_curves",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 23
            }
          },
          "preview": "Vector<float> _curves;"
        },
        {
          "name": "_lengths",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 24
            }
          },
          "preview": "Vector<float> _lengths;"
        },
        {
          "name": "_segments",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 25
            }
          },
          "preview": "Vector<float> _segments;"
        },
        {
          "name": "computeWorldPositions",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 112
            }
          },
          "preview": "Vector<float> &computeWorldPositions(Skeleton& skeleton, PathAttachment &path, int spacesCount, bool tangents);"
        },
        {
          "name": "addBeforePosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 91
            }
          },
          "preview": "void addBeforePosition(float p, Vector<float> &temp, int i, Vector<float> &output, int o);"
        },
        {
          "name": "addAfterPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 90
            }
          },
          "preview": "void addAfterPosition(float p, Vector<float> &temp, int i, Vector<float> &output, int o);"
        },
        {
          "name": "addCurvePosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 51
            }
          },
          "preview": "void addCurvePosition(float p, float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2,"
        },
        {
          "name": "sortPathSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 82
            }
          },
          "preview": "void sortPathSlot(Skeleton& skeleton, Skin& skin, int slotIndex, Bone& slotBone);"
        },
        {
          "name": "sortPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 75
            }
          },
          "preview": "void sortPath(Skeleton& skeleton, Attachment* attachment, Bone& slotBone);"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintData.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "SlotData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintData.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 15
        }
      },
      "preview": "class SlotData;"
    },
    {
      "name": "PathConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintData.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 21
        }
      },
      "preview": "class PathConstraint;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintData.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "PathConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintData.h",
      "range": {
        "start": {
          "line": 50,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 2
        }
      },
      "preview": "class SP_API PathConstraintData : public ConstraintDataGeneric<PathConstraint, PathConstraintPose> {",
      "documentation": "Stores the setup pose for a PathConstraint.\nSee https://esotericsoftware.com/spine-path-constraints Path constraints in the Spine User Guide.",
      "members": [
        {
          "name": "PathConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 49
            }
          },
          "preview": "explicit PathConstraintData(const String &name);"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 57
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) override;"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 32
            }
          },
          "preview": "Vector<BoneData *> &getBones();",
          "documentation": "The bones that will be modified by this path constraint."
        },
        {
          "name": "getSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 21
            }
          },
          "preview": "SlotData *getSlot();",
          "documentation": "The slot whose path attachment will be used to constrained the bones."
        },
        {
          "name": "setSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 30
            }
          },
          "preview": "void setSlot(SlotData *slot);"
        },
        {
          "name": "getPositionMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 32
            }
          },
          "preview": "PositionMode getPositionMode();",
          "documentation": "The mode for positioning the first bone on the path."
        },
        {
          "name": "setPositionMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 49
            }
          },
          "preview": "void setPositionMode(PositionMode positionMode);"
        },
        {
          "name": "getSpacingMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 30
            }
          },
          "preview": "SpacingMode getSpacingMode();",
          "documentation": "The mode for positioning the bones after the first bone on the path."
        },
        {
          "name": "setSpacingMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 46
            }
          },
          "preview": "void setSpacingMode(SpacingMode spacingMode);"
        },
        {
          "name": "getRotateMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 28
            }
          },
          "preview": "RotateMode getRotateMode();",
          "documentation": "The mode for adjusting the rotation of the bones."
        },
        {
          "name": "setRotateMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 43
            }
          },
          "preview": "void setRotateMode(RotateMode rotateMode);"
        },
        {
          "name": "getOffsetRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 27
            }
          },
          "preview": "float getOffsetRotation();",
          "documentation": "An offset added to the constrained bone rotation."
        },
        {
          "name": "setOffsetRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 46
            }
          },
          "preview": "void setOffsetRotation(float offsetRotation);"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 27
            }
          },
          "preview": "Vector<BoneData *> _bones;"
        },
        {
          "name": "_slot",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 17
            }
          },
          "preview": "SlotData *_slot;"
        },
        {
          "name": "_positionMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 28
            }
          },
          "preview": "PositionMode _positionMode;"
        },
        {
          "name": "_spacingMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 26
            }
          },
          "preview": "SpacingMode _spacingMode;"
        },
        {
          "name": "_rotateMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 24
            }
          },
          "preview": "RotateMode _rotateMode;"
        },
        {
          "name": "_offsetRotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 23
            }
          },
          "preview": "float _offsetRotation;"
        }
      ]
    },
    {
      "name": "PathConstraintMixTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintMixTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 2
        }
      },
      "preview": "class SP_API PathConstraintMixTimeline : public CurveTimeline, public ConstraintTimeline {",
      "supertypes": [
        "CurveTimeline",
        "ConstraintTimeline"
      ],
      "members": [
        {
          "name": "PathConstraintMixTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 100
            }
          },
          "preview": "explicit PathConstraintMixTimeline(size_t frameCount, size_t bezierCount, int pathConstraintIndex);"
        },
        {
          "name": "~PathConstraintMixTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 38
            }
          },
          "preview": "virtual ~PathConstraintMixTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 79
            }
          },
          "preview": "void setFrame(int frame, float time, float mixRotate, float mixX, float mixY);",
          "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 4;"
        },
        {
          "name": "ROTATE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 29
            }
          },
          "preview": "static const int ROTATE = 1;"
        },
        {
          "name": "X",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 24
            }
          },
          "preview": "static const int X = 2;"
        },
        {
          "name": "Y",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 24
            }
          },
          "preview": "static const int Y = 3;"
        }
      ]
    },
    {
      "name": "PathConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintPose.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 75,
          "character": 5
        }
      },
      "preview": "class SP_API PathConstraintPose : public Pose<PathConstraintPose> {",
      "documentation": "Stores a pose for a path constraint.",
      "members": [
        {
          "name": "_position",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 23
            }
          },
          "preview": "float _position;"
        },
        {
          "name": "_spacing",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 22
            }
          },
          "preview": "float _spacing;"
        },
        {
          "name": "_mixRotate",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 24
            }
          },
          "preview": "float _mixRotate;"
        },
        {
          "name": "_mixX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 19
            }
          },
          "preview": "float _mixX;"
        },
        {
          "name": "_mixY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 19
            }
          },
          "preview": "float _mixY;"
        },
        {
          "name": "PathConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 28
            }
          },
          "preview": "PathConstraintPose();"
        },
        {
          "name": "~PathConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 37
            }
          },
          "preview": "virtual ~PathConstraintPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 59
            }
          },
          "preview": "virtual void set(PathConstraintPose& pose) override;"
        },
        {
          "name": "getPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 27
            }
          },
          "preview": "float getPosition();",
          "documentation": "The position along the path."
        },
        {
          "name": "setPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 40
            }
          },
          "preview": "void setPosition(float position);"
        },
        {
          "name": "getSpacing",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 26
            }
          },
          "preview": "float getSpacing();",
          "documentation": "The spacing between bones."
        },
        {
          "name": "setSpacing",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 38
            }
          },
          "preview": "void setSpacing(float spacing);"
        },
        {
          "name": "getMixRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 28
            }
          },
          "preview": "float getMixRotate();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation."
        },
        {
          "name": "setMixRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 42
            }
          },
          "preview": "void setMixRotate(float mixRotate);"
        },
        {
          "name": "getMixX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 23
            }
          },
          "preview": "float getMixX();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation X."
        },
        {
          "name": "setMixX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 32
            }
          },
          "preview": "void setMixX(float mixX);"
        },
        {
          "name": "getMixY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 23
            }
          },
          "preview": "float getMixY();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation Y."
        },
        {
          "name": "setMixY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 32
            }
          },
          "preview": "void setMixY(float mixY);"
        }
      ]
    },
    {
      "name": "PathConstraintPositionTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintPositionTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 2
        }
      },
      "preview": "class SP_API PathConstraintPositionTimeline : public ConstraintTimeline1 {",
      "supertypes": [
        "ConstraintTimeline1"
      ],
      "members": [
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 26
            }
          },
          "preview": "static const int ENTRIES;"
        },
        {
          "name": "PathConstraintPositionTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 105
            }
          },
          "preview": "explicit PathConstraintPositionTimeline(size_t frameCount, size_t bezierCount, int pathConstraintIndex);"
        },
        {
          "name": "~PathConstraintPositionTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 43
            }
          },
          "preview": "virtual ~PathConstraintPositionTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "PathConstraintSpacingTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PathConstraintSpacingTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 2
        }
      },
      "preview": "class SP_API PathConstraintSpacingTimeline : public ConstraintTimeline1 {",
      "documentation": "Changes a path constraint's PathConstraintPose::getSpacing().",
      "supertypes": [
        "ConstraintTimeline1"
      ],
      "members": [
        {
          "name": "PathConstraintSpacingTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 104
            }
          },
          "preview": "explicit PathConstraintSpacingTimeline(size_t frameCount, size_t bezierCount, int pathConstraintIndex);"
        },
        {
          "name": "~PathConstraintSpacingTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 42
            }
          },
          "preview": "virtual ~PathConstraintSpacingTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "Physics",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Physics.h",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 5
        }
      },
      "preview": "enum Physics {",
      "members": []
    },
    {
      "name": "Physics_None",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Physics.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 20
        }
      },
      "preview": "Physics_None,",
      "documentation": "Physics are not updated or applied."
    },
    {
      "name": "Physics_Reset",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Physics.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 21
        }
      },
      "preview": "Physics_Reset,",
      "documentation": "Physics are reset to the current pose."
    },
    {
      "name": "Physics_Update",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Physics.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 22
        }
      },
      "preview": "Physics_Update,",
      "documentation": "Physics are updated and the pose from physics is applied."
    },
    {
      "name": "Physics_Pose",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Physics.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 20
        }
      },
      "preview": "Physics_Pose",
      "documentation": "Physics are not updated but the pose from physics is applied."
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraint.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraint.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class BonePose;",
      "supertypes": [
        "Update",
        "BoneLocal"
      ]
    },
    {
      "name": "PhysicsConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraint.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 28
        }
      },
      "preview": "class PhysicsConstraintPose;"
    },
    {
      "name": "PhysicsConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraint.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 2
        }
      },
      "preview": "class SP_API PhysicsConstraint : public ConstraintGeneric<PhysicsConstraint, PhysicsConstraintData, PhysicsConstraintPose> {",
      "documentation": "Stores the current pose for a physics constraint. A physics constraint applies physics to bones.\nSee https://esotericsoftware.com/spine-physics-constraints Physics constraints in the Spine User Guide.",
      "members": [
        {
          "name": "PhysicsConstraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 68
            }
          },
          "preview": "PhysicsConstraint(PhysicsConstraintData& data, Skeleton& skeleton);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 59
            }
          },
          "preview": "void update(Skeleton& skeleton, Physics physics) override;"
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 40
            }
          },
          "preview": "void sort(Skeleton& skeleton) override;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 32
            }
          },
          "preview": "bool isSourceActive() override;"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 45
            }
          },
          "preview": "PhysicsConstraint* copy(Skeleton& skeleton);"
        },
        {
          "name": "reset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 32
            }
          },
          "preview": "void reset(Skeleton& skeleton);"
        },
        {
          "name": "translate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 34
            }
          },
          "preview": "void translate(float x, float y);",
          "documentation": "Translates the physics constraint so next update() forces are applied as if the bone moved an additional amount in world space."
        },
        {
          "name": "rotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 46
            }
          },
          "preview": "void rotate(float x, float y, float degrees);",
          "documentation": "Rotates the physics constraint so next update() forces are applied as if the bone rotated around the specified point in world space."
        },
        {
          "name": "getBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 21
            }
          },
          "preview": "BonePose& getBone();",
          "documentation": "The bone constrained by this physics constraint."
        },
        {
          "name": "setBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 30
            }
          },
          "preview": "void setBone(BonePose& bone);"
        },
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 17
            }
          },
          "preview": "BonePose* _bone;"
        },
        {
          "name": "_reset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 13
            }
          },
          "preview": "bool _reset;"
        },
        {
          "name": "_ux",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 11
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_uy",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 16
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_cx",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 21
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_cy",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 26
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_tx",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 31
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_ty",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 36
            }
          },
          "preview": "float _ux, _uy, _cx, _cy, _tx, _ty;"
        },
        {
          "name": "_xOffset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 16
            }
          },
          "preview": "float _xOffset, _xLag, _xVelocity;"
        },
        {
          "name": "_xLag",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 23
            }
          },
          "preview": "float _xOffset, _xLag, _xVelocity;"
        },
        {
          "name": "_xVelocity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 35
            }
          },
          "preview": "float _xOffset, _xLag, _xVelocity;"
        },
        {
          "name": "_yOffset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 16
            }
          },
          "preview": "float _yOffset, _yLag, _yVelocity;"
        },
        {
          "name": "_yLag",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 23
            }
          },
          "preview": "float _yOffset, _yLag, _yVelocity;"
        },
        {
          "name": "_yVelocity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 35
            }
          },
          "preview": "float _yOffset, _yLag, _yVelocity;"
        },
        {
          "name": "_rotateOffset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 21
            }
          },
          "preview": "float _rotateOffset, _rotateLag, _rotateVelocity;"
        },
        {
          "name": "_rotateLag",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 33
            }
          },
          "preview": "float _rotateOffset, _rotateLag, _rotateVelocity;"
        },
        {
          "name": "_rotateVelocity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 50
            }
          },
          "preview": "float _rotateOffset, _rotateLag, _rotateVelocity;"
        },
        {
          "name": "_scaleOffset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 20
            }
          },
          "preview": "float _scaleOffset, _scaleLag, _scaleVelocity;"
        },
        {
          "name": "_scaleLag",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 31
            }
          },
          "preview": "float _scaleOffset, _scaleLag, _scaleVelocity;"
        },
        {
          "name": "_scaleVelocity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 47
            }
          },
          "preview": "float _scaleOffset, _scaleLag, _scaleVelocity;"
        },
        {
          "name": "_remaining",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 18
            }
          },
          "preview": "float _remaining, _lastTime;"
        },
        {
          "name": "_lastTime",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 29
            }
          },
          "preview": "float _remaining, _lastTime;"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintData.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "PhysicsConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintData.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 24
        }
      },
      "preview": "class PhysicsConstraint;"
    },
    {
      "name": "PhysicsConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintData.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 2
        }
      },
      "preview": "class SP_API PhysicsConstraintData : public ConstraintDataGeneric<PhysicsConstraint, PhysicsConstraintPose> {",
      "documentation": "Stores the setup pose for a PhysicsConstraint.\nSee https://esotericsoftware.com/spine-physics-constraints Physics constraints in the Spine User Guide.",
      "members": [
        {
          "name": "PhysicsConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 52
            }
          },
          "preview": "explicit PhysicsConstraintData(const String &name);"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 57
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) override;"
        },
        {
          "name": "getBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 21
            }
          },
          "preview": "BoneData* getBone();",
          "documentation": "The bone constrained by this physics constraint."
        },
        {
          "name": "setBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 30
            }
          },
          "preview": "void setBone(BoneData* bone);"
        },
        {
          "name": "getStep",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 17
            }
          },
          "preview": "float getStep();"
        },
        {
          "name": "setStep",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 26
            }
          },
          "preview": "void setStep(float step);"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 14
            }
          },
          "preview": "float getX();"
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 20
            }
          },
          "preview": "void setX(float x);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 14
            }
          },
          "preview": "float getY();"
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 20
            }
          },
          "preview": "void setY(float y);"
        },
        {
          "name": "getRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 19
            }
          },
          "preview": "float getRotate();"
        },
        {
          "name": "setRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 30
            }
          },
          "preview": "void setRotate(float rotate);"
        },
        {
          "name": "getScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 19
            }
          },
          "preview": "float getScaleX();"
        },
        {
          "name": "setScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 30
            }
          },
          "preview": "void setScaleX(float scaleX);"
        },
        {
          "name": "getShearX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 19
            }
          },
          "preview": "float getShearX();"
        },
        {
          "name": "setShearX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 30
            }
          },
          "preview": "void setShearX(float shearX);"
        },
        {
          "name": "getLimit",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 18
            }
          },
          "preview": "float getLimit();"
        },
        {
          "name": "setLimit",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 28
            }
          },
          "preview": "void setLimit(float limit);"
        },
        {
          "name": "getInertiaGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 25
            }
          },
          "preview": "bool getInertiaGlobal();"
        },
        {
          "name": "setInertiaGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 43
            }
          },
          "preview": "void setInertiaGlobal(bool inertiaGlobal);"
        },
        {
          "name": "getStrengthGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 26
            }
          },
          "preview": "bool getStrengthGlobal();"
        },
        {
          "name": "setStrengthGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 45
            }
          },
          "preview": "void setStrengthGlobal(bool strengthGlobal);"
        },
        {
          "name": "getDampingGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 25
            }
          },
          "preview": "bool getDampingGlobal();"
        },
        {
          "name": "setDampingGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 43
            }
          },
          "preview": "void setDampingGlobal(bool dampingGlobal);"
        },
        {
          "name": "getMassGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 22
            }
          },
          "preview": "bool getMassGlobal();"
        },
        {
          "name": "setMassGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 37
            }
          },
          "preview": "void setMassGlobal(bool massGlobal);"
        },
        {
          "name": "getWindGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 22
            }
          },
          "preview": "bool getWindGlobal();"
        },
        {
          "name": "setWindGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 37
            }
          },
          "preview": "void setWindGlobal(bool windGlobal);"
        },
        {
          "name": "getGravityGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 25
            }
          },
          "preview": "bool getGravityGlobal();"
        },
        {
          "name": "setGravityGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 43
            }
          },
          "preview": "void setGravityGlobal(bool gravityGlobal);"
        },
        {
          "name": "getMixGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 21
            }
          },
          "preview": "bool getMixGlobal();"
        },
        {
          "name": "setMixGlobal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 35
            }
          },
          "preview": "void setMixGlobal(bool mixGlobal);"
        },
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 17
            }
          },
          "preview": "BoneData* _bone;"
        },
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 10
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 14
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_rotate",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 23
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_scaleX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 32
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_shearX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 41
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_limit",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 49
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_step",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 56
            }
          },
          "preview": "float _x, _y, _rotate, _scaleX, _shearX, _limit, _step;"
        },
        {
          "name": "_inertiaGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 21
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_strengthGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 38
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_dampingGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 54
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_massGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 67
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_windGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 80
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_gravityGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 96
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        },
        {
          "name": "_mixGlobal",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 108
            }
          },
          "preview": "bool _inertiaGlobal, _strengthGlobal, _dampingGlobal, _massGlobal, _windGlobal, _gravityGlobal, _mixGlobal;"
        }
      ]
    },
    {
      "name": "PhysicsConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintPose.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintPose : public Pose<PhysicsConstraintPose> {",
      "documentation": "Stores a pose for a physics constraint.",
      "members": [
        {
          "name": "_inertia",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 22
            }
          },
          "preview": "float _inertia;"
        },
        {
          "name": "_strength",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 23
            }
          },
          "preview": "float _strength;"
        },
        {
          "name": "_damping",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "float _damping;"
        },
        {
          "name": "_massInverse",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 26
            }
          },
          "preview": "float _massInverse;"
        },
        {
          "name": "_wind",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 19
            }
          },
          "preview": "float _wind;"
        },
        {
          "name": "_gravity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 22
            }
          },
          "preview": "float _gravity;"
        },
        {
          "name": "_mix",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 18
            }
          },
          "preview": "float _mix;"
        },
        {
          "name": "PhysicsConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 31
            }
          },
          "preview": "PhysicsConstraintPose();"
        },
        {
          "name": "~PhysicsConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 40
            }
          },
          "preview": "virtual ~PhysicsConstraintPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 62
            }
          },
          "preview": "virtual void set(PhysicsConstraintPose& pose) override;"
        },
        {
          "name": "getInertia",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 26
            }
          },
          "preview": "float getInertia();"
        },
        {
          "name": "setInertia",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 38
            }
          },
          "preview": "void setInertia(float inertia);"
        },
        {
          "name": "getStrength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 27
            }
          },
          "preview": "float getStrength();"
        },
        {
          "name": "setStrength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 40
            }
          },
          "preview": "void setStrength(float strength);"
        },
        {
          "name": "getDamping",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 26
            }
          },
          "preview": "float getDamping();"
        },
        {
          "name": "setDamping",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 38
            }
          },
          "preview": "void setDamping(float damping);"
        },
        {
          "name": "getMassInverse",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 30
            }
          },
          "preview": "float getMassInverse();"
        },
        {
          "name": "setMassInverse",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 46
            }
          },
          "preview": "void setMassInverse(float massInverse);"
        },
        {
          "name": "getWind",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 23
            }
          },
          "preview": "float getWind();"
        },
        {
          "name": "setWind",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 32
            }
          },
          "preview": "void setWind(float wind);"
        },
        {
          "name": "getGravity",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 26
            }
          },
          "preview": "float getGravity();"
        },
        {
          "name": "setGravity",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 38
            }
          },
          "preview": "void setGravity(float gravity);"
        },
        {
          "name": "getMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 22
            }
          },
          "preview": "float getMix();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained poses."
        },
        {
          "name": "setMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 30
            }
          },
          "preview": "void setMix(float mix);"
        }
      ]
    },
    {
      "name": "PhysicsConstraintTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 2
        }
      },
      "preview": "class SP_API PhysicsConstraintTimeline : public CurveTimeline1, public ConstraintTimeline {",
      "supertypes": [
        "ConstraintTimeline",
        "CurveTimeline1"
      ],
      "members": [
        {
          "name": "PhysicsConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 122
            }
          },
          "preview": "explicit PhysicsConstraintTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex, Property property);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 58
            }
          },
          "preview": "virtual float get(PhysicsConstraintPose &pose) = 0;"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 70
            }
          },
          "preview": "virtual void set(PhysicsConstraintPose &pose, float value) = 0;"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 70
            }
          },
          "preview": "virtual bool global(PhysicsConstraintData &constraintData) = 0;"
        },
        {
          "name": "_constraintIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 22
            }
          },
          "preview": "int _constraintIndex;"
        }
      ]
    },
    {
      "name": "PhysicsConstraintInertiaTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 85,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintInertiaTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintInertiaTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 230
            }
          },
          "preview": "explicit PhysicsConstraintInertiaTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintInertia) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintStrengthTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 87,
          "character": 0
        },
        "end": {
          "line": 109,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintStrengthTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintStrengthTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 232
            }
          },
          "preview": "explicit PhysicsConstraintStrengthTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintStrength) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintDampingTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 111,
          "character": 0
        },
        "end": {
          "line": 133,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintDampingTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintDampingTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 230
            }
          },
          "preview": "explicit PhysicsConstraintDampingTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintDamping) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintMassTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 135,
          "character": 0
        },
        "end": {
          "line": 157,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintMassTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintMassTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 143,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 224
            }
          },
          "preview": "explicit PhysicsConstraintMassTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintMass) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 152,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 154,
              "character": 0
            },
            "end": {
              "line": 156,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintWindTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 159,
          "character": 0
        },
        "end": {
          "line": 181,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintWindTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintWindTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 167,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 224
            }
          },
          "preview": "explicit PhysicsConstraintWindTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintWind) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 170,
              "character": 0
            },
            "end": {
              "line": 172,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 174,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 180,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintGravityTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 183,
          "character": 0
        },
        "end": {
          "line": 205,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintGravityTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintGravityTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 191,
              "character": 230
            }
          },
          "preview": "explicit PhysicsConstraintGravityTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintGravity) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 194,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 198,
              "character": 0
            },
            "end": {
              "line": 200,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 202,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintMixTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 207,
          "character": 0
        },
        "end": {
          "line": 229,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintMixTimeline : public PhysicsConstraintTimeline {",
      "supertypes": [
        "PhysicsConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintMixTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 222
            }
          },
          "preview": "explicit PhysicsConstraintMixTimeline(size_t frameCount, size_t bezierCount, int physicsConstraintIndex): PhysicsConstraintTimeline(frameCount, bezierCount, physicsConstraintIndex, Property_PhysicsConstraintMix) {};"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 218,
              "character": 0
            },
            "end": {
              "line": 220,
              "character": 9
            }
          },
          "preview": "float get(PhysicsConstraintPose &pose) override {"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 9
            }
          },
          "preview": "void set(PhysicsConstraintPose &pose, float value) override {"
        },
        {
          "name": "global",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 226,
              "character": 0
            },
            "end": {
              "line": 228,
              "character": 9
            }
          },
          "preview": "bool global(PhysicsConstraintData &constraintData) override {"
        }
      ]
    },
    {
      "name": "PhysicsConstraintResetTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PhysicsConstraintTimeline.h",
      "range": {
        "start": {
          "line": 231,
          "character": 0
        },
        "end": {
          "line": 256,
          "character": 5
        }
      },
      "preview": "class SP_API PhysicsConstraintResetTimeline : public Timeline, public ConstraintTimeline {",
      "supertypes": [
        "Timeline",
        "ConstraintTimeline"
      ],
      "members": [
        {
          "name": "PhysicsConstraintResetTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 239,
              "character": 0
            },
            "end": {
              "line": 242,
              "character": 9
            }
          },
          "preview": "explicit PhysicsConstraintResetTimeline(size_t frameCount, int physicsConstraintIndex): Timeline(frameCount, 1), ConstraintTimeline(physicsConstraintIndex) {"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 245,
              "character": 0
            },
            "end": {
              "line": 246,
              "character": 64
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "getFrameCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 248,
              "character": 0
            },
            "end": {
              "line": 248,
              "character": 59
            }
          },
          "preview": "int getFrameCount() { return (int)_frames.size(); }"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 251,
              "character": 0
            },
            "end": {
              "line": 253,
              "character": 9
            }
          },
          "preview": "void setFrame(int frame, float time) {",
          "documentation": "Sets the time for the specified frame."
        },
        {
          "name": "_constraintIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 255,
              "character": 0
            },
            "end": {
              "line": 255,
              "character": 28
            }
          },
          "preview": "int _constraintIndex;"
        }
      ]
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PointAttachment.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PointAttachment.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "PointAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PointAttachment.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 2
        }
      },
      "preview": "class SP_API PointAttachment : public Attachment {",
      "documentation": "An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\nused in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\nskin.\nSee https://esotericsoftware.com/spine-points for Point Attachments in the Spine User Guide.",
      "supertypes": [
        "Attachment"
      ],
      "members": [
        {
          "name": "PointAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 46
            }
          },
          "preview": "explicit PointAttachment(const String &name);"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 14
            }
          },
          "preview": "float getX();"
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 26
            }
          },
          "preview": "void setX(float inValue);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 14
            }
          },
          "preview": "float getY();"
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 26
            }
          },
          "preview": "void setY(float inValue);"
        },
        {
          "name": "getRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 21
            }
          },
          "preview": "float getRotation();"
        },
        {
          "name": "setRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 33
            }
          },
          "preview": "void setRotation(float inValue);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "computeWorldPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 65
            }
          },
          "preview": "void computeWorldPosition(BonePose &bone, float &ox, float &oy);"
        },
        {
          "name": "computeWorldRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 44
            }
          },
          "preview": "float computeWorldRotation(BonePose &bone);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 10
            }
          },
          "preview": "float _x, _y, _rotation;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 14
            }
          },
          "preview": "float _x, _y, _rotation;"
        },
        {
          "name": "_rotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 25
            }
          },
          "preview": "float _x, _y, _rotation;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 14
            }
          },
          "preview": "Color _color;"
        }
      ]
    },
    {
      "name": "Pool",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Pool.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 2
        }
      },
      "preview": "class SP_API Pool : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Pool",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 3
            }
          },
          "preview": "Pool() {"
        },
        {
          "name": "~Pool",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 3
            }
          },
          "preview": "~Pool() {"
        },
        {
          "name": "obtain",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 3
            }
          },
          "preview": "T *obtain() {"
        },
        {
          "name": "free",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 3
            }
          },
          "preview": "void free(T *object) {"
        },
        {
          "name": "_objects",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 22
            }
          },
          "preview": "Vector<T *> _objects;"
        }
      ]
    },
    {
      "name": "Pose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Pose.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 5
        }
      },
      "preview": "class SP_API Pose : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Pose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 17
            }
          },
          "preview": "Pose() {};"
        },
        {
          "name": "~Pose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 26
            }
          },
          "preview": "virtual ~Pose() {};"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 37
            }
          },
          "preview": "virtual void set(P& pose) = 0;",
          "documentation": "Sets the pose values."
        }
      ]
    },
    {
      "name": "Posed",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Posed.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 2
        }
      },
      "preview": "class SP_API Posed {",
      "members": [
        {
          "name": "Posed",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 12
            }
          },
          "preview": "Posed() {}"
        },
        {
          "name": "~Posed",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 21
            }
          },
          "preview": "virtual ~Posed() {}"
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 30
            }
          },
          "preview": "virtual void setupPose() = 0;"
        },
        {
          "name": "pose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 25
            }
          },
          "preview": "virtual void pose() = 0;"
        },
        {
          "name": "constrained",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 32
            }
          },
          "preview": "virtual void constrained() = 0;"
        },
        {
          "name": "resetConstrained",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 37
            }
          },
          "preview": "virtual void resetConstrained() = 0;"
        },
        {
          "name": "isPoseEqualToApplied",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 47
            }
          },
          "preview": "virtual bool isPoseEqualToApplied() const = 0;"
        }
      ]
    },
    {
      "name": "PosedGeneric",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Posed.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 131,
          "character": 2
        }
      },
      "preview": "class SP_API PosedGeneric : public Posed, public SpineObject {",
      "supertypes": [
        "SpineObject",
        "Posed"
      ],
      "members": [
        {
          "name": "PosedGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 3
            }
          },
          "preview": "PosedGeneric(D &data) : _data(data), _pose(), _constrained(), _applied(&_pose) {"
        },
        {
          "name": "~PosedGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 3
            }
          },
          "preview": "virtual ~PosedGeneric() {"
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 3
            }
          },
          "preview": "virtual void setupPose() override {"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 3
            }
          },
          "preview": "D &getData() {",
          "documentation": "The constraint's setup pose data."
        },
        {
          "name": "getPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 3
            }
          },
          "preview": "P &getPose() {"
        },
        {
          "name": "getAppliedPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 3
            }
          },
          "preview": "A &getAppliedPose() {"
        },
        {
          "name": "resetConstrained",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 3
            }
          },
          "preview": "virtual void resetConstrained() override {"
        },
        {
          "name": "pose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 3
            }
          },
          "preview": "virtual void pose() override {"
        },
        {
          "name": "constrained",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 3
            }
          },
          "preview": "virtual void constrained() override {"
        },
        {
          "name": "isPoseEqualToApplied",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 3
            }
          },
          "preview": "virtual bool isPoseEqualToApplied() const override {"
        },
        {
          "name": "_data",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 10
            }
          },
          "preview": "D &_data;"
        },
        {
          "name": "_pose",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 9
            }
          },
          "preview": "A _pose;       ///< Stored as A type (concrete pose type) to match Java behavior"
        },
        {
          "name": "_constrained",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 16
            }
          },
          "preview": "A _constrained;///< Stored as A type (concrete pose type) to match Java behavior"
        },
        {
          "name": "_applied",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 13
            }
          },
          "preview": "A *_applied;   ///< Points to either _pose or _constrained, reassignable like Java"
        }
      ]
    },
    {
      "name": "PosedActive",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PosedActive.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 2
        }
      },
      "preview": "class SP_API PosedActive {",
      "documentation": "Simple mixin class that adds active state tracking",
      "members": [
        {
          "name": "_active",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 14
            }
          },
          "preview": "bool _active;"
        },
        {
          "name": "PosedActive",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 34
            }
          },
          "preview": "PosedActive() : _active(true) {}"
        },
        {
          "name": "~PosedActive",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 27
            }
          },
          "preview": "virtual ~PosedActive() {}"
        },
        {
          "name": "isActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 43
            }
          },
          "preview": "bool isActive() const { return _active; }"
        },
        {
          "name": "setActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 51
            }
          },
          "preview": "void setActive(bool active) { _active = active; }"
        }
      ]
    },
    {
      "name": "Pose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PosedData.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 14
        }
      },
      "preview": "class Pose;"
    },
    {
      "name": "PosedData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PosedData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 80,
          "character": 5
        }
      },
      "preview": "class SP_API PosedData : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "PosedData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 44
            }
          },
          "preview": "PosedData(const spine::String& name);"
        },
        {
          "name": "~PosedData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 28
            }
          },
          "preview": "virtual ~PosedData();"
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 62
            }
          },
          "preview": "const spine::String& getName() const { return _name; };",
          "documentation": "The constraint's name, which is unique across all constraints in the skeleton of the same type."
        },
        {
          "name": "isSkinRequired",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 61
            }
          },
          "preview": "bool isSkinRequired() const { return _skinRequired; };",
          "documentation": "When true, Skeleton::updateWorldTransform(Physics) only updates this constraint if the Skeleton::getSkin()\ncontains this constraint.\nSee Skin::getConstraints()."
        },
        {
          "name": "setSkinRequired",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 81
            }
          },
          "preview": "void setSkinRequired(bool skinRequired) { _skinRequired = skinRequired; };"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 31
            }
          },
          "preview": "spine::String _name;"
        },
        {
          "name": "_skinRequired",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 30
            }
          },
          "preview": "bool _skinRequired;"
        }
      ]
    },
    {
      "name": "PosedDataGeneric",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PosedData.h",
      "range": {
        "start": {
          "line": 90,
          "character": 0
        },
        "end": {
          "line": 130,
          "character": 5
        }
      },
      "preview": "class SP_API PosedDataGeneric : public PosedData {",
      "supertypes": [
        "PosedData"
      ],
      "members": [
        {
          "name": "_setup",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 16
            }
          },
          "preview": "P _setup;"
        },
        {
          "name": "PosedDataGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 5
            }
          },
          "preview": "PosedDataGeneric(const spine::String& name): PosedData(name), _setup() {"
        },
        {
          "name": "~PosedDataGeneric",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 38
            }
          },
          "preview": "virtual ~PosedDataGeneric() {};"
        },
        {
          "name": "getSetupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 44
            }
          },
          "preview": "P& getSetupPose() { return _setup; };"
        },
        {
          "name": "getSetupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 56
            }
          },
          "preview": "const P& getSetupPose() const { return _setup; };"
        }
      ]
    },
    {
      "name": "PositionMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PositionMode.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 2
        }
      },
      "preview": "enum PositionMode {",
      "documentation": "Controls how the first bone is positioned along the path.\n@see https://esotericsoftware.com/spine-path-constraints#Position-mode Position mode in the Spine User Guide.",
      "members": []
    },
    {
      "name": "PositionMode_Fixed",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PositionMode.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 24
        }
      },
      "preview": "PositionMode_Fixed = 0,"
    },
    {
      "name": "PositionMode_Percent",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/PositionMode.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 22
        }
      },
      "preview": "PositionMode_Percent"
    },
    {
      "name": "PropertyId",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 33,
          "character": 0
        },
        "end": {
          "line": 33,
          "character": 29
        }
      },
      "preview": "typedef long long PropertyId;"
    },
    {
      "name": "Property",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "enum Property {",
      "members": []
    },
    {
      "name": "Property_Rotate",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 26
        }
      },
      "preview": "Property_Rotate = 1 << 0,"
    },
    {
      "name": "Property_X",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 21
        }
      },
      "preview": "Property_X = 1 << 1,"
    },
    {
      "name": "Property_Y",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 21
        }
      },
      "preview": "Property_Y = 1 << 2,"
    },
    {
      "name": "Property_ScaleX",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 26
        }
      },
      "preview": "Property_ScaleX = 1 << 3,"
    },
    {
      "name": "Property_ScaleY",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 26
        }
      },
      "preview": "Property_ScaleY = 1 << 4,"
    },
    {
      "name": "Property_ShearX",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 26
        }
      },
      "preview": "Property_ShearX = 1 << 5,"
    },
    {
      "name": "Property_ShearY",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 26
        }
      },
      "preview": "Property_ShearY = 1 << 6,"
    },
    {
      "name": "Property_Inherit",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 33
        }
      },
      "preview": "Property_Inherit = 1 << 7,"
    },
    {
      "name": "Property_Rgb",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 23
        }
      },
      "preview": "Property_Rgb = 1 << 8,"
    },
    {
      "name": "Property_Alpha",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 25
        }
      },
      "preview": "Property_Alpha = 1 << 9,"
    },
    {
      "name": "Property_Rgb2",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 25
        }
      },
      "preview": "Property_Rgb2 = 1 << 10,"
    },
    {
      "name": "Property_Attachment",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 31
        }
      },
      "preview": "Property_Attachment = 1 << 11,"
    },
    {
      "name": "Property_Deform",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 27
        }
      },
      "preview": "Property_Deform = 1 << 12,"
    },
    {
      "name": "Property_Event",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 48,
          "character": 0
        },
        "end": {
          "line": 48,
          "character": 26
        }
      },
      "preview": "Property_Event = 1 << 13,"
    },
    {
      "name": "Property_DrawOrder",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 30
        }
      },
      "preview": "Property_DrawOrder = 1 << 14,"
    },
    {
      "name": "Property_IkConstraint",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 50,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 33
        }
      },
      "preview": "Property_IkConstraint = 1 << 15,"
    },
    {
      "name": "Property_TransformConstraint",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 40
        }
      },
      "preview": "Property_TransformConstraint = 1 << 16,"
    },
    {
      "name": "Property_PathConstraintPosition",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 52,
          "character": 43
        }
      },
      "preview": "Property_PathConstraintPosition = 1 << 17,"
    },
    {
      "name": "Property_PathConstraintSpacing",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 42
        }
      },
      "preview": "Property_PathConstraintSpacing = 1 << 18,"
    },
    {
      "name": "Property_PathConstraintMix",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 54,
          "character": 0
        },
        "end": {
          "line": 54,
          "character": 38
        }
      },
      "preview": "Property_PathConstraintMix = 1 << 19,"
    },
    {
      "name": "Property_PhysicsConstraintInertia",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 51
        }
      },
      "preview": "Property_PhysicsConstraintInertia = 1 << 20,"
    },
    {
      "name": "Property_PhysicsConstraintStrength",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 56,
          "character": 0
        },
        "end": {
          "line": 56,
          "character": 52
        }
      },
      "preview": "Property_PhysicsConstraintStrength = 1 << 21,"
    },
    {
      "name": "Property_PhysicsConstraintDamping",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 51
        }
      },
      "preview": "Property_PhysicsConstraintDamping = 1 << 22,"
    },
    {
      "name": "Property_PhysicsConstraintMass",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 58,
          "character": 0
        },
        "end": {
          "line": 58,
          "character": 48
        }
      },
      "preview": "Property_PhysicsConstraintMass = 1 << 23,"
    },
    {
      "name": "Property_PhysicsConstraintWind",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 48
        }
      },
      "preview": "Property_PhysicsConstraintWind = 1 << 24,"
    },
    {
      "name": "Property_PhysicsConstraintGravity",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 60,
          "character": 0
        },
        "end": {
          "line": 60,
          "character": 51
        }
      },
      "preview": "Property_PhysicsConstraintGravity = 1 << 25,"
    },
    {
      "name": "Property_PhysicsConstraintMix",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 47
        }
      },
      "preview": "Property_PhysicsConstraintMix = 1 << 26,"
    },
    {
      "name": "Property_PhysicsConstraintReset",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 62,
          "character": 0
        },
        "end": {
          "line": 62,
          "character": 49
        }
      },
      "preview": "Property_PhysicsConstraintReset = 1 << 27,"
    },
    {
      "name": "Property_Sequence",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 29
        }
      },
      "preview": "Property_Sequence = 1 << 28,"
    },
    {
      "name": "Property_SliderTime",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 31
        }
      },
      "preview": "Property_SliderTime = 1 << 29,"
    },
    {
      "name": "Property_SliderMix",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Property.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 30
        }
      },
      "preview": "Property_SliderMix = 1 << 30"
    },
    {
      "name": "RTTI",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RTTI.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 2
        }
      },
      "preview": "class SP_API RTTI {",
      "members": [
        {
          "name": "RTTI",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 38
            }
          },
          "preview": "explicit RTTI(const char *className);"
        },
        {
          "name": "RTTI",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 51
            }
          },
          "preview": "RTTI(const char *className, const RTTI &baseRTTI);"
        },
        {
          "name": "RTTI",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 34
            }
          },
          "preview": "RTTI(const char *className, const RTTI &baseRTTI,"
        },
        {
          "name": "getClassName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 34
            }
          },
          "preview": "const char *getClassName() const;"
        },
        {
          "name": "isExactly",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 40
            }
          },
          "preview": "bool isExactly(const RTTI &rtti) const;"
        },
        {
          "name": "instanceOf",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 41
            }
          },
          "preview": "bool instanceOf(const RTTI &rtti) const;"
        },
        {
          "name": "RTTI",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 23
            }
          },
          "preview": "RTTI(const RTTI &obj);"
        },
        {
          "name": "operator=",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 34
            }
          },
          "preview": "RTTI &operator=(const RTTI &obj);"
        },
        {
          "name": "_className",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 24
            }
          },
          "preview": "const char *_className;"
        },
        {
          "name": "_pBaseRTTI",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 24
            }
          },
          "preview": "const RTTI *_pBaseRTTI;"
        },
        {
          "name": "_interfaces",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 28
            }
          },
          "preview": "const RTTI *_interfaces[3];  // Support up to 3 interfaces"
        },
        {
          "name": "_interfaceCount",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 21
            }
          },
          "preview": "int _interfaceCount;"
        }
      ]
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RegionAttachment.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RegionAttachment.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 44,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "RegionAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RegionAttachment.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 137,
          "character": 2
        }
      },
      "preview": "class SP_API RegionAttachment : public Attachment {",
      "documentation": "Attachment that displays a texture region.",
      "supertypes": [
        "Attachment"
      ],
      "members": [
        {
          "name": "RegionAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 47
            }
          },
          "preview": "explicit RegionAttachment(const String &name);"
        },
        {
          "name": "~RegionAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 29
            }
          },
          "preview": "virtual ~RegionAttachment();"
        },
        {
          "name": "updateRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 21
            }
          },
          "preview": "void updateRegion();"
        },
        {
          "name": "computeWorldVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 95
            }
          },
          "preview": "void computeWorldVertices(Slot &slot, float *worldVertices, size_t offset, size_t stride = 2);",
          "documentation": "Transforms the attachment's four vertices to world coordinates.\n@param slot The parent slot.\n@param worldVertices The output world vertices. Must have a length greater than or equal to offset + 8.\n@param offset The worldVertices index to begin writing values.\n@param stride The number of worldVertices entries between the value pairs written."
        },
        {
          "name": "computeWorldVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 103
            }
          },
          "preview": "void computeWorldVertices(Slot &slot, Vector<float> &worldVertices, size_t offset, size_t stride = 2);"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 14
            }
          },
          "preview": "float getX();"
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 26
            }
          },
          "preview": "void setX(float inValue);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 14
            }
          },
          "preview": "float getY();"
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 26
            }
          },
          "preview": "void setY(float inValue);"
        },
        {
          "name": "getRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 21
            }
          },
          "preview": "float getRotation();"
        },
        {
          "name": "setRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 33
            }
          },
          "preview": "void setRotation(float inValue);"
        },
        {
          "name": "getScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 19
            }
          },
          "preview": "float getScaleX();"
        },
        {
          "name": "setScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 31
            }
          },
          "preview": "void setScaleX(float inValue);"
        },
        {
          "name": "getScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 19
            }
          },
          "preview": "float getScaleY();"
        },
        {
          "name": "setScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 31
            }
          },
          "preview": "void setScaleY(float inValue);"
        },
        {
          "name": "getWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 18
            }
          },
          "preview": "float getWidth();"
        },
        {
          "name": "setWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 30
            }
          },
          "preview": "void setWidth(float inValue);"
        },
        {
          "name": "getHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 19
            }
          },
          "preview": "float getHeight();"
        },
        {
          "name": "setHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 31
            }
          },
          "preview": "void setHeight(float inValue);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "getPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 25
            }
          },
          "preview": "const String &getPath();"
        },
        {
          "name": "setPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 37
            }
          },
          "preview": "void setPath(const String &inValue);"
        },
        {
          "name": "getRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 28
            }
          },
          "preview": "TextureRegion *getRegion();"
        },
        {
          "name": "setRegion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 39
            }
          },
          "preview": "void setRegion(TextureRegion *region);"
        },
        {
          "name": "getSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 25
            }
          },
          "preview": "Sequence *getSequence();"
        },
        {
          "name": "setSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 38
            }
          },
          "preview": "void setSequence(Sequence *sequence);"
        },
        {
          "name": "getOffset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 28
            }
          },
          "preview": "Vector<float> &getOffset();"
        },
        {
          "name": "getUVs",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 25
            }
          },
          "preview": "Vector<float> &getUVs();"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 37
            }
          },
          "preview": "virtual Attachment *copy() override;"
        },
        {
          "name": "BLX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 22
            }
          },
          "preview": "static const int BLX;"
        },
        {
          "name": "BLY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 22
            }
          },
          "preview": "static const int BLY;"
        },
        {
          "name": "ULX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 22
            }
          },
          "preview": "static const int ULX;"
        },
        {
          "name": "ULY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 22
            }
          },
          "preview": "static const int ULY;"
        },
        {
          "name": "URX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 22
            }
          },
          "preview": "static const int URX;"
        },
        {
          "name": "URY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 22
            }
          },
          "preview": "static const int URY;"
        },
        {
          "name": "BRX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 22
            }
          },
          "preview": "static const int BRX;"
        },
        {
          "name": "BRY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 22
            }
          },
          "preview": "static const int BRY;"
        },
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 10
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 14
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_rotation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 25
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_scaleX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 34
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_scaleY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 43
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 51
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 60
            }
          },
          "preview": "float _x, _y, _rotation, _scaleX, _scaleY, _width, _height;"
        },
        {
          "name": "_vertexOffset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 29
            }
          },
          "preview": "Vector<float> _vertexOffset;"
        },
        {
          "name": "_uvs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 20
            }
          },
          "preview": "Vector<float> _uvs;"
        },
        {
          "name": "_path",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 14
            }
          },
          "preview": "String _path;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 14
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "_region",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 24
            }
          },
          "preview": "TextureRegion *_region;"
        },
        {
          "name": "_sequence",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 21
            }
          },
          "preview": "Sequence *_sequence;"
        }
      ]
    },
    {
      "name": "RotateMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RotateMode.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 2
        }
      },
      "preview": "enum RotateMode {",
      "documentation": "Controls how bones are rotated, translated, and scaled to match the path.\n@see https://esotericsoftware.com/spine-path-constraints#Rotate-Mix Rotate mode in the Spine User Guide.",
      "members": []
    },
    {
      "name": "RotateMode_Tangent",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RotateMode.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 24
        }
      },
      "preview": "RotateMode_Tangent = 0,"
    },
    {
      "name": "RotateMode_Chain",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RotateMode.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 18
        }
      },
      "preview": "RotateMode_Chain,"
    },
    {
      "name": "RotateMode_ChainScale",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RotateMode.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 23
        }
      },
      "preview": "RotateMode_ChainScale",
      "documentation": "When chain scale, constrained bones should all have the same parent. That way when the path constraint scales a bone, it\ndoesn't affect other constrained bones."
    },
    {
      "name": "RotateTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/RotateTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 2
        }
      },
      "preview": "class SP_API RotateTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local rotation.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "RotateTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 79
            }
          },
          "preview": "explicit RotateTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "ScaleTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ScaleTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 2
        }
      },
      "preview": "class SP_API ScaleTimeline : public BoneTimeline2 {",
      "documentation": "Changes a bone's local scale X and Y.",
      "supertypes": [
        "BoneTimeline2"
      ],
      "members": [
        {
          "name": "ScaleTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 78
            }
          },
          "preview": "explicit ScaleTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "ScaleXTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ScaleTimeline.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 2
        }
      },
      "preview": "class SP_API ScaleXTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local scale X.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "ScaleXTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 79
            }
          },
          "preview": "explicit ScaleXTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "ScaleYTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ScaleTimeline.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 2
        }
      },
      "preview": "class SP_API ScaleYTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local scale Y.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "ScaleYTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 79
            }
          },
          "preview": "explicit ScaleYTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "SlotPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class SlotPose;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "SkeletonBinary",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 21
        }
      },
      "preview": "class SkeletonBinary;"
    },
    {
      "name": "SkeletonJson",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 19
        }
      },
      "preview": "class SkeletonJson;"
    },
    {
      "name": "Sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 2
        }
      },
      "preview": "class SP_API Sequence : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Sequence",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 21
            }
          },
          "preview": "Sequence(int count);"
        },
        {
          "name": "~Sequence",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 13
            }
          },
          "preview": "~Sequence();"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 18
            }
          },
          "preview": "Sequence* copy();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 52
            }
          },
          "preview": "void apply(SlotPose* slot, Attachment* attachment);"
        },
        {
          "name": "getPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 51
            }
          },
          "preview": "String getPath(const String &basePath, int index);"
        },
        {
          "name": "getId",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 29
            }
          },
          "preview": "int getId() { return _id; }",
          "documentation": "Returns a unique ID for this attachment."
        },
        {
          "name": "setId",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 34
            }
          },
          "preview": "void setId(int id) { _id = id; }"
        },
        {
          "name": "getStart",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 35
            }
          },
          "preview": "int getStart() { return _start; }"
        },
        {
          "name": "setStart",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 46
            }
          },
          "preview": "void setStart(int start) { _start = start; }"
        },
        {
          "name": "getDigits",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 37
            }
          },
          "preview": "int getDigits() { return _digits; }"
        },
        {
          "name": "setDigits",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 50
            }
          },
          "preview": "void setDigits(int digits) { _digits = digits; }"
        },
        {
          "name": "getSetupIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 45
            }
          },
          "preview": "int getSetupIndex() { return _setupIndex; }",
          "documentation": "The index of the region to show for the setup pose."
        },
        {
          "name": "setSetupIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 66
            }
          },
          "preview": "void setSetupIndex(int setupIndex) { _setupIndex = setupIndex; }"
        },
        {
          "name": "getRegions",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 60
            }
          },
          "preview": "Vector<TextureRegion *> &getRegions() { return _regions; }"
        },
        {
          "name": "_nextID",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 20
            }
          },
          "preview": "static int _nextID;"
        },
        {
          "name": "_id",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 9
            }
          },
          "preview": "int _id;"
        },
        {
          "name": "_regions",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 34
            }
          },
          "preview": "Vector<TextureRegion *> _regions;"
        },
        {
          "name": "_start",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 12
            }
          },
          "preview": "int _start;"
        },
        {
          "name": "_digits",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 13
            }
          },
          "preview": "int _digits;"
        },
        {
          "name": "_setupIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 17
            }
          },
          "preview": "int _setupIndex;"
        },
        {
          "name": "nextID",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 21
            }
          },
          "preview": "static int nextID();"
        }
      ]
    },
    {
      "name": "SequenceMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 89,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 2
        }
      },
      "preview": "enum SequenceMode {",
      "members": []
    },
    {
      "name": "SequenceMode_hold",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 90,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 23
        }
      },
      "preview": "SequenceMode_hold = 0,"
    },
    {
      "name": "SequenceMode_once",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 91,
          "character": 23
        }
      },
      "preview": "SequenceMode_once = 1,"
    },
    {
      "name": "SequenceMode_loop",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 92,
          "character": 0
        },
        "end": {
          "line": 92,
          "character": 23
        }
      },
      "preview": "SequenceMode_loop = 2,"
    },
    {
      "name": "SequenceMode_pingpong",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 93,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 27
        }
      },
      "preview": "SequenceMode_pingpong = 3,"
    },
    {
      "name": "SequenceMode_onceReverse",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 94,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 30
        }
      },
      "preview": "SequenceMode_onceReverse = 4,"
    },
    {
      "name": "SequenceMode_loopReverse",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 95,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 30
        }
      },
      "preview": "SequenceMode_loopReverse = 5,"
    },
    {
      "name": "SequenceMode_pingpongReverse",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Sequence.h",
      "range": {
        "start": {
          "line": 96,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 34
        }
      },
      "preview": "SequenceMode_pingpongReverse = 6"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SequenceTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "HasTextureRegion",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SequenceTimeline.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 23
        }
      },
      "preview": "class HasTextureRegion;"
    },
    {
      "name": "SequenceTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SequenceTimeline.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API SequenceTimeline : public Timeline, public SlotTimeline {",
      "supertypes": [
        "Timeline",
        "SlotTimeline"
      ],
      "members": [
        {
          "name": "SequenceTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 92
            }
          },
          "preview": "explicit SequenceTimeline(size_t frameCount, int slotIndex, spine::Attachment *attachment);"
        },
        {
          "name": "~SequenceTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 29
            }
          },
          "preview": "virtual ~SequenceTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 55
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 81
            }
          },
          "preview": "void setFrame(int frame, float time, SequenceMode mode, int index, float delay);"
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 66
            }
          },
          "preview": "Attachment *getAttachment() { return (Attachment*)_attachment; }"
        },
        {
          "name": "_attachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 31
            }
          },
          "preview": "HasTextureRegion *_attachment;"
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 3;"
        },
        {
          "name": "MODE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 27
            }
          },
          "preview": "static const int MODE = 1;"
        },
        {
          "name": "DELAY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 28
            }
          },
          "preview": "static const int DELAY = 2;"
        }
      ]
    },
    {
      "name": "ShearTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ShearTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 2
        }
      },
      "preview": "class SP_API ShearTimeline : public BoneTimeline2 {",
      "documentation": "Changes a bone's local shear X and Y.",
      "supertypes": [
        "BoneTimeline2"
      ],
      "members": [
        {
          "name": "ShearTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 78
            }
          },
          "preview": "explicit ShearTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "ShearXTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ShearTimeline.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 2
        }
      },
      "preview": "class SP_API ShearXTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local shear X.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "ShearXTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 79
            }
          },
          "preview": "explicit ShearXTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "ShearYTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/ShearTimeline.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 2
        }
      },
      "preview": "class SP_API ShearYTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local shear Y.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "ShearYTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 79
            }
          },
          "preview": "explicit ShearYTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 19
        }
      },
      "preview": "class SkeletonData;"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "Updatable",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 16
        }
      },
      "preview": "class Updatable;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "IkConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 19
        }
      },
      "preview": "class IkConstraint;"
    },
    {
      "name": "PathConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 21
        }
      },
      "preview": "class PathConstraint;"
    },
    {
      "name": "PhysicsConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 24
        }
      },
      "preview": "class PhysicsConstraint;"
    },
    {
      "name": "TransformConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 26
        }
      },
      "preview": "class TransformConstraint;"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 11
        }
      },
      "preview": "class Skin;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "SkeletonClipping",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 23
        }
      },
      "preview": "class SkeletonClipping;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skeleton.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 325,
          "character": 2
        }
      },
      "preview": "class SP_API Skeleton : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Skeleton",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 153,
              "character": 0
            },
            "end": {
              "line": 153,
              "character": 47
            }
          },
          "preview": "explicit Skeleton(SkeletonData &skeletonData);"
        },
        {
          "name": "~Skeleton",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 13
            }
          },
          "preview": "~Skeleton();"
        },
        {
          "name": "updateCache",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 20
            }
          },
          "preview": "void updateCache();",
          "documentation": "Caches information about bones and constraints. Must be called if bones, constraints or weighted path attachments are added\nor removed."
        },
        {
          "name": "printUpdateCache",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 25
            }
          },
          "preview": "void printUpdateCache();"
        },
        {
          "name": "constrained",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 33
            }
          },
          "preview": "void constrained(Posed &object);"
        },
        {
          "name": "sortBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 165,
              "character": 27
            }
          },
          "preview": "void sortBone(Bone *bone);"
        },
        {
          "name": "sortReset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 167,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 46
            }
          },
          "preview": "static void sortReset(Vector<Bone *> &bones);"
        },
        {
          "name": "updateWorldTransform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 44
            }
          },
          "preview": "void updateWorldTransform(Physics physics);",
          "documentation": "Updates the world transform for each bone and applies all constraints.\nSee [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\nRuntimes Guide."
        },
        {
          "name": "updateWorldTransform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 175,
              "character": 0
            },
            "end": {
              "line": 175,
              "character": 62
            }
          },
          "preview": "void updateWorldTransform(Physics physics, BonePose *parent);"
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 178,
              "character": 18
            }
          },
          "preview": "void setupPose();",
          "documentation": "Sets the bones, constraints, and slots to their setup pose values."
        },
        {
          "name": "setupPoseBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 23
            }
          },
          "preview": "void setupPoseBones();",
          "documentation": "Sets the bones and constraints to their setup pose values."
        },
        {
          "name": "setupPoseSlots",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 183,
              "character": 0
            },
            "end": {
              "line": 183,
              "character": 23
            }
          },
          "preview": "void setupPoseSlots();"
        },
        {
          "name": "getData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 185,
              "character": 0
            },
            "end": {
              "line": 185,
              "character": 25
            }
          },
          "preview": "SkeletonData *getData();"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 187,
              "character": 0
            },
            "end": {
              "line": 187,
              "character": 28
            }
          },
          "preview": "Vector<Bone *> &getBones();"
        },
        {
          "name": "getUpdateCache",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 36
            }
          },
          "preview": "Vector<Update *> &getUpdateCache();"
        },
        {
          "name": "getRootBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 191,
              "character": 21
            }
          },
          "preview": "Bone *getRootBone();"
        },
        {
          "name": "findBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 194,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 40
            }
          },
          "preview": "Bone *findBone(const String &boneName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "getSlots",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 28
            }
          },
          "preview": "Vector<Slot *> &getSlots();"
        },
        {
          "name": "findSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 199,
              "character": 0
            },
            "end": {
              "line": 199,
              "character": 40
            }
          },
          "preview": "Slot *findSlot(const String &slotName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "getDrawOrder",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 201,
              "character": 32
            }
          },
          "preview": "Vector<Slot *> &getDrawOrder();"
        },
        {
          "name": "getSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 203,
              "character": 0
            },
            "end": {
              "line": 203,
              "character": 17
            }
          },
          "preview": "Skin *getSkin();"
        },
        {
          "name": "setSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 206,
              "character": 0
            },
            "end": {
              "line": 206,
              "character": 38
            }
          },
          "preview": "void setSkin(const String &skinName);",
          "documentation": "Sets a skin by name (see setSkin)."
        },
        {
          "name": "setSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 29
            }
          },
          "preview": "void setSkin(Skin *newSkin);",
          "documentation": "Attachments from the new skin are attached if the corresponding attachment from the old skin was attached.\nIf there was no old skin, each slot's setup mode attachment is attached from the new skin.\nAfter changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\nSee Skeleton::setSlotsToSetupPose()\nAlso, often AnimationState::apply(Skeleton&) is called before the next time the\nskeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n@param newSkin May be NULL."
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 218,
              "character": 0
            },
            "end": {
              "line": 218,
              "character": 81
            }
          },
          "preview": "Attachment *getAttachment(const String &slotName, const String &attachmentName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 72
            }
          },
          "preview": "Attachment *getAttachment(int slotIndex, const String &attachmentName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 74
            }
          },
          "preview": "void setAttachment(const String &slotName, const String &attachmentName);",
          "documentation": "@param attachmentName May be empty."
        },
        {
          "name": "getConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 226,
              "character": 0
            },
            "end": {
              "line": 226,
              "character": 40
            }
          },
          "preview": "Vector<Constraint *> &getConstraints();"
        },
        {
          "name": "getPhysicsConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 228,
              "character": 0
            },
            "end": {
              "line": 228,
              "character": 54
            }
          },
          "preview": "Vector<PhysicsConstraint *> &getPhysicsConstraints();"
        },
        {
          "name": "findConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 231,
              "character": 0
            },
            "end": {
              "line": 242,
              "character": 3
            }
          },
          "preview": "T *findConstraint(const String &constraintName) {"
        },
        {
          "name": "getBounds",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 251,
              "character": 0
            },
            "end": {
              "line": 251,
              "character": 109
            }
          },
          "preview": "void getBounds(float &outX, float &outY, float &outWidth, float &outHeight, Vector<float> &outVertexBuffer);"
        },
        {
          "name": "getBounds",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 252,
              "character": 0
            },
            "end": {
              "line": 252,
              "character": 136
            }
          },
          "preview": "void getBounds(float &outX, float &outY, float &outWidth, float &outHeight, Vector<float> &outVertexBuffer, SkeletonClipping *clipper);"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 254,
              "character": 0
            },
            "end": {
              "line": 254,
              "character": 19
            }
          },
          "preview": "Color &getColor();"
        },
        {
          "name": "setColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 256,
              "character": 0
            },
            "end": {
              "line": 256,
              "character": 29
            }
          },
          "preview": "void setColor(Color &color);"
        },
        {
          "name": "setColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 258,
              "character": 0
            },
            "end": {
              "line": 258,
              "character": 51
            }
          },
          "preview": "void setColor(float r, float g, float b, float a);"
        },
        {
          "name": "getScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 260,
              "character": 0
            },
            "end": {
              "line": 260,
              "character": 19
            }
          },
          "preview": "float getScaleX();"
        },
        {
          "name": "setScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 262,
              "character": 0
            },
            "end": {
              "line": 262,
              "character": 31
            }
          },
          "preview": "void setScaleX(float inValue);"
        },
        {
          "name": "getScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 264,
              "character": 0
            },
            "end": {
              "line": 264,
              "character": 19
            }
          },
          "preview": "float getScaleY();"
        },
        {
          "name": "setScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 266,
              "character": 0
            },
            "end": {
              "line": 266,
              "character": 31
            }
          },
          "preview": "void setScaleY(float inValue);"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 268,
              "character": 0
            },
            "end": {
              "line": 268,
              "character": 43
            }
          },
          "preview": "void setScale(float scaleX, float scaleY);"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 270,
              "character": 0
            },
            "end": {
              "line": 270,
              "character": 14
            }
          },
          "preview": "float getX();"
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 272,
              "character": 0
            },
            "end": {
              "line": 272,
              "character": 26
            }
          },
          "preview": "void setX(float inValue);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 274,
              "character": 0
            },
            "end": {
              "line": 274,
              "character": 14
            }
          },
          "preview": "float getY();"
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 276,
              "character": 0
            },
            "end": {
              "line": 276,
              "character": 26
            }
          },
          "preview": "void setY(float inValue);"
        },
        {
          "name": "setPosition",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 278,
              "character": 0
            },
            "end": {
              "line": 278,
              "character": 36
            }
          },
          "preview": "void setPosition(float x, float y);"
        },
        {
          "name": "getWindX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 280,
              "character": 0
            },
            "end": {
              "line": 280,
              "character": 18
            }
          },
          "preview": "float getWindX();"
        },
        {
          "name": "setWindX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 282,
              "character": 0
            },
            "end": {
              "line": 282,
              "character": 28
            }
          },
          "preview": "void setWindX(float windX);"
        },
        {
          "name": "getWindY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 284,
              "character": 0
            },
            "end": {
              "line": 284,
              "character": 18
            }
          },
          "preview": "float getWindY();"
        },
        {
          "name": "setWindY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 286,
              "character": 0
            },
            "end": {
              "line": 286,
              "character": 28
            }
          },
          "preview": "void setWindY(float windY);"
        },
        {
          "name": "getGravityX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 288,
              "character": 21
            }
          },
          "preview": "float getGravityX();"
        },
        {
          "name": "setGravityX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 290,
              "character": 0
            },
            "end": {
              "line": 290,
              "character": 34
            }
          },
          "preview": "void setGravityX(float gravityX);"
        },
        {
          "name": "getGravityY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 292,
              "character": 21
            }
          },
          "preview": "float getGravityY();"
        },
        {
          "name": "setGravityY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 294,
              "character": 0
            },
            "end": {
              "line": 294,
              "character": 34
            }
          },
          "preview": "void setGravityY(float gravityY);"
        },
        {
          "name": "physicsTranslate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 298,
              "character": 0
            },
            "end": {
              "line": 298,
              "character": 41
            }
          },
          "preview": "void physicsTranslate(float x, float y);",
          "documentation": "Rotates the physics constraint so next {@link #update(Physics)} forces are applied as if the bone rotated around the\nspecified point in world space."
        },
        {
          "name": "physicsRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 301,
              "character": 0
            },
            "end": {
              "line": 301,
              "character": 53
            }
          },
          "preview": "void physicsRotate(float x, float y, float degrees);",
          "documentation": "Calls {@link PhysicsConstraint#rotate(float, float, float)} for each physics constraint. */"
        },
        {
          "name": "getTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 303,
              "character": 0
            },
            "end": {
              "line": 303,
              "character": 17
            }
          },
          "preview": "float getTime();"
        },
        {
          "name": "setTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 305,
              "character": 0
            },
            "end": {
              "line": 305,
              "character": 26
            }
          },
          "preview": "void setTime(float time);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 307,
              "character": 0
            },
            "end": {
              "line": 307,
              "character": 26
            }
          },
          "preview": "void update(float delta);"
        },
        {
          "name": "_data",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 310,
              "character": 0
            },
            "end": {
              "line": 310,
              "character": 21
            }
          },
          "preview": "SkeletonData &_data;"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 311,
              "character": 0
            },
            "end": {
              "line": 311,
              "character": 23
            }
          },
          "preview": "Vector<Bone *> _bones;"
        },
        {
          "name": "_slots",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 312,
              "character": 0
            },
            "end": {
              "line": 312,
              "character": 23
            }
          },
          "preview": "Vector<Slot *> _slots;"
        },
        {
          "name": "_drawOrder",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 313,
              "character": 0
            },
            "end": {
              "line": 313,
              "character": 27
            }
          },
          "preview": "Vector<Slot *> _drawOrder;"
        },
        {
          "name": "_constraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 314,
              "character": 0
            },
            "end": {
              "line": 314,
              "character": 35
            }
          },
          "preview": "Vector<Constraint *> _constraints;"
        },
        {
          "name": "_physics",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 315,
              "character": 0
            },
            "end": {
              "line": 315,
              "character": 38
            }
          },
          "preview": "Vector<PhysicsConstraint *> _physics;"
        },
        {
          "name": "_updateCache",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 316,
              "character": 0
            },
            "end": {
              "line": 316,
              "character": 31
            }
          },
          "preview": "Vector<Update *> _updateCache;"
        },
        {
          "name": "_resetCache",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 317,
              "character": 0
            },
            "end": {
              "line": 317,
              "character": 29
            }
          },
          "preview": "Vector<Posed *> _resetCache;"
        },
        {
          "name": "_skin",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 318,
              "character": 0
            },
            "end": {
              "line": 318,
              "character": 13
            }
          },
          "preview": "Skin *_skin;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 319,
              "character": 0
            },
            "end": {
              "line": 319,
              "character": 14
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 320,
              "character": 0
            },
            "end": {
              "line": 320,
              "character": 10
            }
          },
          "preview": "float _x, _y;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 320,
              "character": 0
            },
            "end": {
              "line": 320,
              "character": 14
            }
          },
          "preview": "float _x, _y;"
        },
        {
          "name": "_scaleX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 321,
              "character": 0
            },
            "end": {
              "line": 321,
              "character": 15
            }
          },
          "preview": "float _scaleX, _scaleY;"
        },
        {
          "name": "_scaleY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 321,
              "character": 0
            },
            "end": {
              "line": 321,
              "character": 24
            }
          },
          "preview": "float _scaleX, _scaleY;"
        },
        {
          "name": "_windX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 322,
              "character": 0
            },
            "end": {
              "line": 322,
              "character": 14
            }
          },
          "preview": "float _windX, _windY, _gravityX, _gravityY;"
        },
        {
          "name": "_windY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 322,
              "character": 0
            },
            "end": {
              "line": 322,
              "character": 22
            }
          },
          "preview": "float _windX, _windY, _gravityX, _gravityY;"
        },
        {
          "name": "_gravityX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 322,
              "character": 0
            },
            "end": {
              "line": 322,
              "character": 33
            }
          },
          "preview": "float _windX, _windY, _gravityX, _gravityY;"
        },
        {
          "name": "_gravityY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 322,
              "character": 0
            },
            "end": {
              "line": 322,
              "character": 44
            }
          },
          "preview": "float _windX, _windY, _gravityX, _gravityY;"
        },
        {
          "name": "_time",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 323,
              "character": 0
            },
            "end": {
              "line": 323,
              "character": 13
            }
          },
          "preview": "float _time;"
        },
        {
          "name": "_update",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 324,
              "character": 0
            },
            "end": {
              "line": 324,
              "character": 13
            }
          },
          "preview": "int _update;"
        }
      ]
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 19
        }
      },
      "preview": "class SkeletonData;"
    },
    {
      "name": "Atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 12
        }
      },
      "preview": "class Atlas;"
    },
    {
      "name": "AttachmentLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 23
        }
      },
      "preview": "class AttachmentLoader;"
    },
    {
      "name": "LinkedMesh",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 17
        }
      },
      "preview": "class LinkedMesh;"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 11
        }
      },
      "preview": "class Skin;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 23
        }
      },
      "preview": "class VertexAttachment;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 15
        }
      },
      "preview": "class Timeline;"
    },
    {
      "name": "CurveTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 20
        }
      },
      "preview": "class CurveTimeline;"
    },
    {
      "name": "CurveTimeline1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 21
        }
      },
      "preview": "class CurveTimeline1;"
    },
    {
      "name": "CurveTimeline2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 21
        }
      },
      "preview": "class CurveTimeline2;"
    },
    {
      "name": "Sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 15
        }
      },
      "preview": "class Sequence;"
    },
    {
      "name": "SkeletonBinary",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 174,
          "character": 2
        }
      },
      "preview": "class SP_API SkeletonBinary : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "BONE_ROTATE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 34
            }
          },
          "preview": "static const int BONE_ROTATE = 0;"
        },
        {
          "name": "BONE_TRANSLATE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 37
            }
          },
          "preview": "static const int BONE_TRANSLATE = 1;"
        },
        {
          "name": "BONE_TRANSLATEX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 38
            }
          },
          "preview": "static const int BONE_TRANSLATEX = 2;"
        },
        {
          "name": "BONE_TRANSLATEY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 38
            }
          },
          "preview": "static const int BONE_TRANSLATEY = 3;"
        },
        {
          "name": "BONE_SCALE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 33
            }
          },
          "preview": "static const int BONE_SCALE = 4;"
        },
        {
          "name": "BONE_SCALEX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 34
            }
          },
          "preview": "static const int BONE_SCALEX = 5;"
        },
        {
          "name": "BONE_SCALEY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 34
            }
          },
          "preview": "static const int BONE_SCALEY = 6;"
        },
        {
          "name": "BONE_SHEAR",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 33
            }
          },
          "preview": "static const int BONE_SHEAR = 7;"
        },
        {
          "name": "BONE_SHEARX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 34
            }
          },
          "preview": "static const int BONE_SHEARX = 8;"
        },
        {
          "name": "BONE_SHEARY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 34
            }
          },
          "preview": "static const int BONE_SHEARY = 9;"
        },
        {
          "name": "BONE_INHERIT",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 42
            }
          },
          "preview": "static const int BONE_INHERIT = 10;"
        },
        {
          "name": "SLOT_ATTACHMENT",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 38
            }
          },
          "preview": "static const int SLOT_ATTACHMENT = 0;"
        },
        {
          "name": "SLOT_RGBA",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 32
            }
          },
          "preview": "static const int SLOT_RGBA = 1;"
        },
        {
          "name": "SLOT_RGB",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 31
            }
          },
          "preview": "static const int SLOT_RGB = 2;"
        },
        {
          "name": "SLOT_RGBA2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 33
            }
          },
          "preview": "static const int SLOT_RGBA2 = 3;"
        },
        {
          "name": "SLOT_RGB2",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 32
            }
          },
          "preview": "static const int SLOT_RGB2 = 4;"
        },
        {
          "name": "SLOT_ALPHA",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 33
            }
          },
          "preview": "static const int SLOT_ALPHA = 5;"
        },
        {
          "name": "ATTACHMENT_DEFORM",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 40
            }
          },
          "preview": "static const int ATTACHMENT_DEFORM = 0;"
        },
        {
          "name": "ATTACHMENT_SEQUENCE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 42
            }
          },
          "preview": "static const int ATTACHMENT_SEQUENCE = 1;"
        },
        {
          "name": "PATH_POSITION",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 36
            }
          },
          "preview": "static const int PATH_POSITION = 0;"
        },
        {
          "name": "PATH_SPACING",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 35
            }
          },
          "preview": "static const int PATH_SPACING = 1;"
        },
        {
          "name": "PATH_MIX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 31
            }
          },
          "preview": "static const int PATH_MIX = 2;"
        },
        {
          "name": "PHYSICS_INERTIA",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 44
            }
          },
          "preview": "static const int PHYSICS_INERTIA = 0;"
        },
        {
          "name": "PHYSICS_STRENGTH",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 45
            }
          },
          "preview": "static const int PHYSICS_STRENGTH = 1;"
        },
        {
          "name": "PHYSICS_DAMPING",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 44
            }
          },
          "preview": "static const int PHYSICS_DAMPING = 2;"
        },
        {
          "name": "PHYSICS_MASS",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 41
            }
          },
          "preview": "static const int PHYSICS_MASS = 4;"
        },
        {
          "name": "PHYSICS_WIND",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 41
            }
          },
          "preview": "static const int PHYSICS_WIND = 5;"
        },
        {
          "name": "PHYSICS_GRAVITY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 44
            }
          },
          "preview": "static const int PHYSICS_GRAVITY = 6;"
        },
        {
          "name": "PHYSICS_MIX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 40
            }
          },
          "preview": "static const int PHYSICS_MIX = 7;"
        },
        {
          "name": "PHYSICS_RESET",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 42
            }
          },
          "preview": "static const int PHYSICS_RESET = 8;"
        },
        {
          "name": "CURVE_LINEAR",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 35
            }
          },
          "preview": "static const int CURVE_LINEAR = 0;"
        },
        {
          "name": "CURVE_STEPPED",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 36
            }
          },
          "preview": "static const int CURVE_STEPPED = 1;"
        },
        {
          "name": "CURVE_BEZIER",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 35
            }
          },
          "preview": "static const int CURVE_BEZIER = 2;"
        },
        {
          "name": "SkeletonBinary",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 44
            }
          },
          "preview": "explicit SkeletonBinary(Atlas *atlasArray);"
        },
        {
          "name": "SkeletonBinary",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 86
            }
          },
          "preview": "explicit SkeletonBinary(AttachmentLoader *attachmentLoader, bool ownsLoader = false);"
        },
        {
          "name": "~SkeletonBinary",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 19
            }
          },
          "preview": "~SkeletonBinary();"
        },
        {
          "name": "readSkeletonData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 73
            }
          },
          "preview": "SkeletonData *readSkeletonData(const unsigned char *binary, int length);"
        },
        {
          "name": "readSkeletonDataFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 56
            }
          },
          "preview": "SkeletonData *readSkeletonDataFile(const String &path);"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 48
            }
          },
          "preview": "void setScale(float scale) { _scale = scale; }"
        },
        {
          "name": "getError",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 39
            }
          },
          "preview": "String &getError() { return _error; }"
        },
        {
          "name": "_attachmentLoader",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 37
            }
          },
          "preview": "AttachmentLoader *_attachmentLoader;"
        },
        {
          "name": "_linkedMeshes",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 36
            }
          },
          "preview": "Vector<LinkedMesh *> _linkedMeshes;"
        },
        {
          "name": "_error",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 15
            }
          },
          "preview": "String _error;"
        },
        {
          "name": "_scale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 14
            }
          },
          "preview": "float _scale;"
        },
        {
          "name": "_ownsLoader",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 24
            }
          },
          "preview": "const bool _ownsLoader;"
        },
        {
          "name": "setError",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 55
            }
          },
          "preview": "void setError(const char *value1, const char *value2);"
        },
        {
          "name": "readString",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 36
            }
          },
          "preview": "char *readString(DataInput *input);"
        },
        {
          "name": "readStringRef",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 67
            }
          },
          "preview": "char *readStringRef(DataInput *input, SkeletonData *skeletonData);"
        },
        {
          "name": "readFloat",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 35
            }
          },
          "preview": "float readFloat(DataInput *input);"
        },
        {
          "name": "readByte",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 42
            }
          },
          "preview": "unsigned char readByte(DataInput *input);"
        },
        {
          "name": "readSByte",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 142,
              "character": 0
            },
            "end": {
              "line": 142,
              "character": 41
            }
          },
          "preview": "signed char readSByte(DataInput *input);"
        },
        {
          "name": "readBoolean",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 36
            }
          },
          "preview": "bool readBoolean(DataInput *input);"
        },
        {
          "name": "readInt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 146,
              "character": 31
            }
          },
          "preview": "int readInt(DataInput *input);"
        },
        {
          "name": "readColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 48
            }
          },
          "preview": "void readColor(DataInput *input, Color &color);"
        },
        {
          "name": "readVarint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 57
            }
          },
          "preview": "int readVarint(DataInput *input, bool optimizePositive);"
        },
        {
          "name": "readSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 152,
              "character": 99
            }
          },
          "preview": "Skin *readSkin(DataInput *input, bool defaultSkin, SkeletonData *skeletonData, bool nonessential);"
        },
        {
          "name": "readSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 154,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 42
            }
          },
          "preview": "Sequence *readSequence(DataInput *input);"
        },
        {
          "name": "readAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 157,
              "character": 57
            }
          },
          "preview": "Attachment *readAttachment(DataInput *input, Skin *skin, int slotIndex, const String &attachmentName,"
        },
        {
          "name": "readVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 96
            }
          },
          "preview": "int readVertices(DataInput *input, Vector<float> &vertices, Vector<int> &bones, bool weighted);"
        },
        {
          "name": "readFloatArray",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 81
            }
          },
          "preview": "void readFloatArray(DataInput *input, int n, float scale, Vector<float> &array);"
        },
        {
          "name": "readShortArray",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 77
            }
          },
          "preview": "void readShortArray(DataInput *input, Vector<unsigned short> &array, int n);"
        },
        {
          "name": "readAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 165,
              "character": 92
            }
          },
          "preview": "Animation *readAnimation(const String &name, DataInput *input, SkeletonData *skeletonData);"
        },
        {
          "name": "setBezier",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 168,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 46
            }
          },
          "preview": "setBezier(DataInput *input, CurveTimeline *timeline, int bezier, int frame, int value, float time1, float time2,"
        },
        {
          "name": "readTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 171,
              "character": 0
            },
            "end": {
              "line": 171,
              "character": 106
            }
          },
          "preview": "void readTimeline(DataInput *input, Vector<Timeline*> &timelines, CurveTimeline1 *timeline, float scale);"
        },
        {
          "name": "readTimeline2",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 107
            }
          },
          "preview": "void readTimeline2(DataInput *input, Vector<Timeline*> &timelines, CurveTimeline2 *timeline, float scale);"
        }
      ]
    },
    {
      "name": "DataInput",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBinary.h",
      "range": {
        "start": {
          "line": 121,
          "character": 0
        },
        "end": {
          "line": 124,
          "character": 3
        }
      },
      "preview": "struct DataInput : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "cursor",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 30
            }
          },
          "preview": "const unsigned char *cursor;"
        },
        {
          "name": "end",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 27
            }
          },
          "preview": "const unsigned char *end;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBounds.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "BoundingBoxAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBounds.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 28
        }
      },
      "preview": "class BoundingBoxAttachment;"
    },
    {
      "name": "Polygon",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBounds.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 14
        }
      },
      "preview": "class Polygon;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "SkeletonBounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBounds.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 2
        }
      },
      "preview": "class SP_API SkeletonBounds : public SpineObject {",
      "documentation": "Collects each BoundingBoxAttachment that is visible and computes the world vertices for its polygon.\nThe polygon vertices are provided along with convenience methods for doing hit detection.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "SkeletonBounds",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 18
            }
          },
          "preview": "SkeletonBounds();"
        },
        {
          "name": "~SkeletonBounds",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "~SkeletonBounds();"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 50
            }
          },
          "preview": "void update(Skeleton &skeleton, bool updateAabb);",
          "documentation": "Clears any previous polygons, finds all visible bounding box attachments,\nand computes the world vertices for each bounding box's polygon.\n@param skeleton The skeleton.\n@param updateAabb\nIf true, the axis aligned bounding box containing all the polygons is computed.\nIf false, the SkeletonBounds AABB methods will always return true."
        },
        {
          "name": "aabbContainsPoint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 42
            }
          },
          "preview": "bool aabbContainsPoint(float x, float y);",
          "documentation": "Returns true if the axis aligned bounding box contains the point."
        },
        {
          "name": "aabbIntersectsSegment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 68
            }
          },
          "preview": "bool aabbIntersectsSegment(float x1, float y1, float x2, float y2);",
          "documentation": "Returns true if the axis aligned bounding box intersects the line segment."
        },
        {
          "name": "aabbIntersectsSkeleton",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 53
            }
          },
          "preview": "bool aabbIntersectsSkeleton(SkeletonBounds &bounds);",
          "documentation": "Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds."
        },
        {
          "name": "containsPoint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 56
            }
          },
          "preview": "bool containsPoint(Polygon *polygon, float x, float y);",
          "documentation": "Returns true if the polygon contains the point."
        },
        {
          "name": "containsPoint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 56
            }
          },
          "preview": "BoundingBoxAttachment *containsPoint(float x, float y);",
          "documentation": "Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\nefficient to only call this method if aabbContainsPoint(float, float) returns true."
        },
        {
          "name": "intersectsSegment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 82
            }
          },
          "preview": "BoundingBoxAttachment *intersectsSegment(float x1, float y1, float x2, float y2);",
          "documentation": "Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\nis usually more efficient to only call this method if aabbIntersectsSegment(float, float, float, float) returns true."
        },
        {
          "name": "intersectsSegment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 82
            }
          },
          "preview": "bool intersectsSegment(Polygon *polygon, float x1, float y1, float x2, float y2);",
          "documentation": "Returns true if the polygon contains any part of the line segment."
        },
        {
          "name": "getPolygon",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 56
            }
          },
          "preview": "Polygon *getPolygon(BoundingBoxAttachment *attachment);",
          "documentation": "Returns the polygon for the given bounding box attachment or null if no\npolygon can be found for the attachment. Requires a call to update() first."
        },
        {
          "name": "getBoundingBox",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 64
            }
          },
          "preview": "BoundingBoxAttachment * getBoundingBox(Polygon *polygon);",
          "documentation": "Returns the bounding box for the given polygon or null. Requires a call to update() first."
        },
        {
          "name": "getPolygons",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 40
            }
          },
          "preview": "Vector<Polygon *> &getPolygons();",
          "documentation": "Returns all polygons or an empty vector. Requires a call to update() first."
        },
        {
          "name": "getBoundingBoxes",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 59
            }
          },
          "preview": "Vector<BoundingBoxAttachment *> &getBoundingBoxes();",
          "documentation": "Returns all bounding boxes. Requires a call to update() first."
        },
        {
          "name": "getWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 18
            }
          },
          "preview": "float getWidth();"
        },
        {
          "name": "getHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 19
            }
          },
          "preview": "float getHeight();"
        },
        {
          "name": "_polygonPool",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 29
            }
          },
          "preview": "Pool <Polygon> _polygonPool;"
        },
        {
          "name": "_boundingBoxes",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 48
            }
          },
          "preview": "Vector<BoundingBoxAttachment *> _boundingBoxes;"
        },
        {
          "name": "_polygons",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 29
            }
          },
          "preview": "Vector<Polygon *> _polygons;"
        },
        {
          "name": "_minX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 13
            }
          },
          "preview": "float _minX, _minY, _maxX, _maxY;"
        },
        {
          "name": "_minY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 20
            }
          },
          "preview": "float _minX, _minY, _maxX, _maxY;"
        },
        {
          "name": "_maxX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 27
            }
          },
          "preview": "float _minX, _minY, _maxX, _maxY;"
        },
        {
          "name": "_maxY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 34
            }
          },
          "preview": "float _minX, _minY, _maxX, _maxY;"
        },
        {
          "name": "aabbCompute",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 20
            }
          },
          "preview": "void aabbCompute();"
        }
      ]
    },
    {
      "name": "Polygon",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonBounds.h",
      "range": {
        "start": {
          "line": 109,
          "character": 0
        },
        "end": {
          "line": 117,
          "character": 2
        }
      },
      "preview": "class Polygon : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_vertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 25
            }
          },
          "preview": "Vector<float> _vertices;"
        },
        {
          "name": "_count",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "preview": "int _count;"
        },
        {
          "name": "Polygon",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 3
            }
          },
          "preview": "Polygon() : _count(0) {"
        }
      ]
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonClipping.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonClipping.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "ClippingAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonClipping.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 25
        }
      },
      "preview": "class ClippingAttachment;"
    },
    {
      "name": "SkeletonClipping",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonClipping.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 2
        }
      },
      "preview": "class SP_API SkeletonClipping : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "SkeletonClipping",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 20
            }
          },
          "preview": "SkeletonClipping();"
        },
        {
          "name": "clipStart",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 76
            }
          },
          "preview": "size_t clipStart(Skeleton &skeleton, Slot &slot, ClippingAttachment *clip);"
        },
        {
          "name": "clipEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 26
            }
          },
          "preview": "void clipEnd(Slot &slot);"
        },
        {
          "name": "clipEnd",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 16
            }
          },
          "preview": "void clipEnd();"
        },
        {
          "name": "clipTriangles",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 89
            }
          },
          "preview": "clipTriangles(float *vertices, unsigned short *triangles, size_t trianglesLength);"
        },
        {
          "name": "clipTriangles",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 110
            }
          },
          "preview": "clipTriangles(float *vertices, unsigned short *triangles, size_t trianglesLength, float *uvs, size_t stride);"
        },
        {
          "name": "clipTriangles",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 110
            }
          },
          "preview": "clipTriangles(Vector<float> &vertices, Vector<unsigned short> &triangles, Vector<float> &uvs, size_t stride);"
        },
        {
          "name": "isClipping",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 19
            }
          },
          "preview": "bool isClipping();"
        },
        {
          "name": "getClippedVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 37
            }
          },
          "preview": "Vector<float> &getClippedVertices();"
        },
        {
          "name": "getClippedTriangles",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 47
            }
          },
          "preview": "Vector<unsigned short> &getClippedTriangles();"
        },
        {
          "name": "getClippedUVs",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 32
            }
          },
          "preview": "Vector<float> &getClippedUVs();"
        },
        {
          "name": "_triangulator",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 28
            }
          },
          "preview": "Triangulator _triangulator;"
        },
        {
          "name": "_clippingPolygon",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 32
            }
          },
          "preview": "Vector<float> _clippingPolygon;"
        },
        {
          "name": "_clipOutput",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 27
            }
          },
          "preview": "Vector<float> _clipOutput;"
        },
        {
          "name": "_clippedVertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 32
            }
          },
          "preview": "Vector<float> _clippedVertices;"
        },
        {
          "name": "_clippedTriangles",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 42
            }
          },
          "preview": "Vector<unsigned short> _clippedTriangles;"
        },
        {
          "name": "_clippedUVs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 27
            }
          },
          "preview": "Vector<float> _clippedUVs;"
        },
        {
          "name": "_scratch",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 24
            }
          },
          "preview": "Vector<float> _scratch;"
        },
        {
          "name": "_clipAttachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 37
            }
          },
          "preview": "ClippingAttachment *_clipAttachment;"
        },
        {
          "name": "_clippingPolygons",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 44
            }
          },
          "preview": "Vector<Vector<float> *> *_clippingPolygons;"
        },
        {
          "name": "clip",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 28
            }
          },
          "preview": "bool clip(float x1, float y1, float x2, float y2, float x3, float y3, Vector<float> *clippingArea,",
          "documentation": "Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\narea, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list."
        },
        {
          "name": "makeClockwise",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 51
            }
          },
          "preview": "static void makeClockwise(Vector<float> &polygon);"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "SlotData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class SlotData;"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 11
        }
      },
      "preview": "class Skin;"
    },
    {
      "name": "EventData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 16
        }
      },
      "preview": "class EventData;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "IkConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 23
        }
      },
      "preview": "class IkConstraintData;"
    },
    {
      "name": "TransformConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 30
        }
      },
      "preview": "class TransformConstraintData;"
    },
    {
      "name": "PathConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 25
        }
      },
      "preview": "class PathConstraintData;"
    },
    {
      "name": "PhysicsConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 31
        }
      },
      "preview": "class PhysicsConstraintData;"
    },
    {
      "name": "ConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 21
        }
      },
      "preview": "class ConstraintData;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonData.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 231,
          "character": 2
        }
      },
      "preview": "class SP_API SkeletonData : public SpineObject {",
      "documentation": "Stores the setup pose and all of the stateless data for a skeleton.\nSee <a href=\"https://esotericsoftware.com/spine-runtime-architecture#Data-objects\">Data objects</a> in the Spine Runtimes\nGuide.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "SkeletonData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 16
            }
          },
          "preview": "SkeletonData();"
        },
        {
          "name": "~SkeletonData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 17
            }
          },
          "preview": "~SkeletonData();"
        },
        {
          "name": "findBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 44
            }
          },
          "preview": "BoneData *findBone(const String &boneName);",
          "documentation": "Finds a bone by comparing each bone's name.\nIt is more efficient to cache the results of this method than to call it multiple times.\n@return May be NULL."
        },
        {
          "name": "findSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 44
            }
          },
          "preview": "SlotData *findSlot(const String &slotName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 40
            }
          },
          "preview": "Skin *findSkin(const String &skinName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findEvent",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 58
            }
          },
          "preview": "spine::EventData *findEvent(const String &eventDataName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 55
            }
          },
          "preview": "Animation *findAnimation(const String &animationName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findIkConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 66
            }
          },
          "preview": "IkConstraintData *findIkConstraint(const String &constraintName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findTransformConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 80
            }
          },
          "preview": "TransformConstraintData *findTransformConstraint(const String &constraintName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findPathConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 70
            }
          },
          "preview": "PathConstraintData *findPathConstraint(const String &constraintName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "findPhysicsConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 82
            }
          },
          "preview": "PhysicsConstraintData *findPhysicsConstraint(const String &constraintName);",
          "documentation": "@return May be NULL."
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 25
            }
          },
          "preview": "const String &getName();",
          "documentation": "The skeleton's name, which by default is the name of the skeleton data file when possible, or null when a name hasn't been\nset."
        },
        {
          "name": "setName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 37
            }
          },
          "preview": "void setName(const String &inValue);"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 32
            }
          },
          "preview": "Vector<BoneData *> &getBones();",
          "documentation": "The skeleton's bones, sorted parent first. The root bone is always the first bone."
        },
        {
          "name": "getSlots",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 32
            }
          },
          "preview": "Vector<SlotData *> &getSlots();",
          "documentation": "The skeleton's slots in the setup pose draw order."
        },
        {
          "name": "getSkins",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 28
            }
          },
          "preview": "Vector<Skin *> &getSkins();",
          "documentation": "All skins, including the default skin."
        },
        {
          "name": "getDefaultSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 24
            }
          },
          "preview": "Skin *getDefaultSkin();",
          "documentation": "The skeleton's default skin.\nBy default this skin contains all attachments that were not in a skin in Spine.\n@return May be NULL."
        },
        {
          "name": "setDefaultSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 36
            }
          },
          "preview": "void setDefaultSkin(Skin *inValue);"
        },
        {
          "name": "getEvents",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 41
            }
          },
          "preview": "Vector<spine::EventData *> &getEvents();",
          "documentation": "The skeleton's events."
        },
        {
          "name": "getAnimations",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 38
            }
          },
          "preview": "Vector<Animation *> &getAnimations();",
          "documentation": "The skeleton's animations."
        },
        {
          "name": "getIkConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 48
            }
          },
          "preview": "Vector<IkConstraintData *> &getIkConstraints();"
        },
        {
          "name": "getTransformConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 62
            }
          },
          "preview": "Vector<TransformConstraintData *> &getTransformConstraints();"
        },
        {
          "name": "getPathConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 52
            }
          },
          "preview": "Vector<PathConstraintData *> &getPathConstraints();"
        },
        {
          "name": "getPhysicsConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 64
            }
          },
          "preview": "Vector<PhysicsConstraintData *> &getPhysicsConstraints();"
        },
        {
          "name": "getConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 139,
              "character": 0
            },
            "end": {
              "line": 139,
              "character": 44
            }
          },
          "preview": "Vector<ConstraintData *> &getConstraints();",
          "documentation": "The skeleton's constraints."
        },
        {
          "name": "findConstraint",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 3
            }
          },
          "preview": "T *findConstraint(const String &constraintName) {"
        },
        {
          "name": "getX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 14
            }
          },
          "preview": "float getX();",
          "documentation": "The X coordinate of the skeleton's axis aligned bounding box in the setup pose."
        },
        {
          "name": "setX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 26
            }
          },
          "preview": "void setX(float inValue);"
        },
        {
          "name": "getY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 14
            }
          },
          "preview": "float getY();",
          "documentation": "The Y coordinate of the skeleton's axis aligned bounding box in the setup pose."
        },
        {
          "name": "setY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 165,
              "character": 26
            }
          },
          "preview": "void setY(float inValue);"
        },
        {
          "name": "getWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 168,
              "character": 0
            },
            "end": {
              "line": 168,
              "character": 18
            }
          },
          "preview": "float getWidth();",
          "documentation": "The width of the skeleton's axis aligned bounding box in the setup pose."
        },
        {
          "name": "setWidth",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 170,
              "character": 0
            },
            "end": {
              "line": 170,
              "character": 30
            }
          },
          "preview": "void setWidth(float inValue);"
        },
        {
          "name": "getHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 19
            }
          },
          "preview": "float getHeight();",
          "documentation": "The height of the skeleton's axis aligned bounding box in the setup pose."
        },
        {
          "name": "setHeight",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 175,
              "character": 0
            },
            "end": {
              "line": 175,
              "character": 31
            }
          },
          "preview": "void setHeight(float inValue);"
        },
        {
          "name": "getReferenceScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 179,
              "character": 0
            },
            "end": {
              "line": 179,
              "character": 33
            }
          },
          "preview": "float getReferenceScale();",
          "documentation": "Baseline scale factor for applying physics and other effects based on distance to non-scalable properties, such as angle or\nscale. Default is 100."
        },
        {
          "name": "setReferenceScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 45
            }
          },
          "preview": "void setReferenceScale(float inValue);"
        },
        {
          "name": "getVersion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 184,
              "character": 0
            },
            "end": {
              "line": 184,
              "character": 28
            }
          },
          "preview": "const String &getVersion();",
          "documentation": "The Spine version used to export this data, or NULL."
        },
        {
          "name": "setVersion",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 186,
              "character": 0
            },
            "end": {
              "line": 186,
              "character": 40
            }
          },
          "preview": "void setVersion(const String &inValue);"
        },
        {
          "name": "getHash",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 25
            }
          },
          "preview": "const String &getHash();",
          "documentation": "The skeleton data hash. This value will change if any of the skeleton data has changed."
        },
        {
          "name": "setHash",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 191,
              "character": 37
            }
          },
          "preview": "void setHash(const String &inValue);"
        },
        {
          "name": "getImagesPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 194,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 31
            }
          },
          "preview": "const String &getImagesPath();",
          "documentation": "The path to the images directory as defined in Spine, or null if nonessential data was not exported."
        },
        {
          "name": "setImagesPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 43
            }
          },
          "preview": "void setImagesPath(const String &inValue);"
        },
        {
          "name": "getAudioPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 199,
              "character": 0
            },
            "end": {
              "line": 199,
              "character": 30
            }
          },
          "preview": "const String &getAudioPath();",
          "documentation": "The path to the audio directory as defined in Spine, or null if nonessential data was not exported."
        },
        {
          "name": "setAudioPath",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 201,
              "character": 42
            }
          },
          "preview": "void setAudioPath(const String &inValue);"
        },
        {
          "name": "getFps",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 204,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 16
            }
          },
          "preview": "float getFps();",
          "documentation": "The dopesheet FPS in Spine. Available only when nonessential data was exported."
        },
        {
          "name": "setFps",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 206,
              "character": 0
            },
            "end": {
              "line": 206,
              "character": 28
            }
          },
          "preview": "void setFps(float inValue);"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 209,
              "character": 0
            },
            "end": {
              "line": 209,
              "character": 14
            }
          },
          "preview": "String _name;"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 210,
              "character": 0
            },
            "end": {
              "line": 210,
              "character": 27
            }
          },
          "preview": "Vector<BoneData *> _bones; // Ordered parents first"
        },
        {
          "name": "_slots",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 211,
              "character": 0
            },
            "end": {
              "line": 211,
              "character": 27
            }
          },
          "preview": "Vector<SlotData *> _slots; // Setup pose draw order."
        },
        {
          "name": "_skins",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 212,
              "character": 0
            },
            "end": {
              "line": 212,
              "character": 23
            }
          },
          "preview": "Vector<Skin *> _skins;"
        },
        {
          "name": "_defaultSkin",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 213,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 20
            }
          },
          "preview": "Skin *_defaultSkin;"
        },
        {
          "name": "_events",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 214,
              "character": 0
            },
            "end": {
              "line": 214,
              "character": 29
            }
          },
          "preview": "Vector<EventData *> _events;"
        },
        {
          "name": "_animations",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 33
            }
          },
          "preview": "Vector<Animation *> _animations;"
        },
        {
          "name": "_ikConstraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 216,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 43
            }
          },
          "preview": "Vector<IkConstraintData *> _ikConstraints;"
        },
        {
          "name": "_transformConstraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 217,
              "character": 57
            }
          },
          "preview": "Vector<TransformConstraintData *> _transformConstraints;"
        },
        {
          "name": "_pathConstraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 218,
              "character": 0
            },
            "end": {
              "line": 218,
              "character": 47
            }
          },
          "preview": "Vector<PathConstraintData *> _pathConstraints;"
        },
        {
          "name": "_physicsConstraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 219,
              "character": 0
            },
            "end": {
              "line": 219,
              "character": 59
            }
          },
          "preview": "Vector<PhysicsConstraintData *> _physicsConstraints;"
        },
        {
          "name": "_constraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 220,
              "character": 0
            },
            "end": {
              "line": 220,
              "character": 39
            }
          },
          "preview": "Vector<ConstraintData *> _constraints;"
        },
        {
          "name": "_x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 10
            }
          },
          "preview": "float _x, _y, _width, _height;"
        },
        {
          "name": "_y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 14
            }
          },
          "preview": "float _x, _y, _width, _height;"
        },
        {
          "name": "_width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 22
            }
          },
          "preview": "float _x, _y, _width, _height;"
        },
        {
          "name": "_height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 31
            }
          },
          "preview": "float _x, _y, _width, _height;"
        },
        {
          "name": "_referenceScale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 29
            }
          },
          "preview": "float _referenceScale;"
        },
        {
          "name": "_version",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 223,
              "character": 0
            },
            "end": {
              "line": 223,
              "character": 17
            }
          },
          "preview": "String _version;"
        },
        {
          "name": "_hash",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 14
            }
          },
          "preview": "String _hash;"
        },
        {
          "name": "_strings",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 225,
              "character": 0
            },
            "end": {
              "line": 225,
              "character": 25
            }
          },
          "preview": "Vector<char *> _strings;"
        },
        {
          "name": "_fps",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 228,
              "character": 0
            },
            "end": {
              "line": 228,
              "character": 12
            }
          },
          "preview": "float _fps;"
        },
        {
          "name": "_imagesPath",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 229,
              "character": 0
            },
            "end": {
              "line": 229,
              "character": 20
            }
          },
          "preview": "String _imagesPath;"
        },
        {
          "name": "_audioPath",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 230,
              "character": 0
            },
            "end": {
              "line": 230,
              "character": 19
            }
          },
          "preview": "String _audioPath;"
        }
      ]
    },
    {
      "name": "Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class Timeline;"
    },
    {
      "name": "CurveTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 20
        }
      },
      "preview": "class CurveTimeline;"
    },
    {
      "name": "CurveTimeline1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 21
        }
      },
      "preview": "class CurveTimeline1;"
    },
    {
      "name": "CurveTimeline2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 21
        }
      },
      "preview": "class CurveTimeline2;"
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 45,
          "character": 23
        }
      },
      "preview": "class VertexAttachment;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "Json",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 11
        }
      },
      "preview": "class Json;"
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 19
        }
      },
      "preview": "class SkeletonData;"
    },
    {
      "name": "Atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 12
        }
      },
      "preview": "class Atlas;"
    },
    {
      "name": "AttachmentLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 55,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 23
        }
      },
      "preview": "class AttachmentLoader;"
    },
    {
      "name": "LinkedMesh",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 17
        }
      },
      "preview": "class LinkedMesh;"
    },
    {
      "name": "String",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 59,
          "character": 13
        }
      },
      "preview": "class String;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "Sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 61,
          "character": 15
        }
      },
      "preview": "class Sequence;"
    },
    {
      "name": "SkeletonJson",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonJson.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 110,
          "character": 2
        }
      },
      "preview": "class SP_API SkeletonJson : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "SkeletonJson",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 37
            }
          },
          "preview": "explicit SkeletonJson(Atlas *atlas);"
        },
        {
          "name": "SkeletonJson",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 84
            }
          },
          "preview": "explicit SkeletonJson(AttachmentLoader *attachmentLoader, bool ownsLoader = false);"
        },
        {
          "name": "~SkeletonJson",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 17
            }
          },
          "preview": "~SkeletonJson();"
        },
        {
          "name": "readSkeletonDataFile",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 56
            }
          },
          "preview": "SkeletonData *readSkeletonDataFile(const String &path);"
        },
        {
          "name": "readSkeletonData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 50
            }
          },
          "preview": "SkeletonData *readSkeletonData(const char *json);"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 48
            }
          },
          "preview": "void setScale(float scale) { _scale = scale; }"
        },
        {
          "name": "getError",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 39
            }
          },
          "preview": "String &getError() { return _error; }"
        },
        {
          "name": "_attachmentLoader",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 37
            }
          },
          "preview": "AttachmentLoader *_attachmentLoader;"
        },
        {
          "name": "_linkedMeshes",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 36
            }
          },
          "preview": "Vector<LinkedMesh *> _linkedMeshes;"
        },
        {
          "name": "_scale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 14
            }
          },
          "preview": "float _scale;"
        },
        {
          "name": "_ownsLoader",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 24
            }
          },
          "preview": "const bool _ownsLoader;"
        },
        {
          "name": "_error",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 15
            }
          },
          "preview": "String _error;"
        },
        {
          "name": "readSequence",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 47
            }
          },
          "preview": "static Sequence *readSequence(Json *sequence);"
        },
        {
          "name": "setBezier",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 54
            }
          },
          "preview": "setBezier(CurveTimeline *timeline, int frame, int value, int bezier, float time1, float value1, float cx1,"
        },
        {
          "name": "readCurve",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 46
            }
          },
          "preview": "readCurve(Json *curve, CurveTimeline *timeline, int bezier, int frame, int value, float time1, float time2,"
        },
        {
          "name": "readTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 104
            }
          },
          "preview": "static Timeline *readTimeline(Json *keyMap, CurveTimeline1 *timeline, float defaultValue, float scale);"
        },
        {
          "name": "readTimeline",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 18
            }
          },
          "preview": "readTimeline(Json *keyMap, CurveTimeline2 *timeline, const char *name1, const char *name2, float defaultValue,"
        },
        {
          "name": "readAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 66
            }
          },
          "preview": "Animation *readAnimation(Json *root, SkeletonData *skeletonData);"
        },
        {
          "name": "readVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 93
            }
          },
          "preview": "void readVertices(Json *attachmentMap, VertexAttachment *attachment, size_t verticesLength);"
        },
        {
          "name": "setError",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 71
            }
          },
          "preview": "void setError(Json *root, const String &value1, const String &value2);"
        },
        {
          "name": "findSlotIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 101
            }
          },
          "preview": "int findSlotIndex(SkeletonData *skeletonData, const String &slotName, Vector<Timeline *> timelines);"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonRenderer.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 18
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "RenderCommand",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonRenderer.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 5
        }
      },
      "preview": "struct SP_API RenderCommand {",
      "members": [
        {
          "name": "positions",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 24
            }
          },
          "preview": "float *positions;"
        },
        {
          "name": "uvs",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 18
            }
          },
          "preview": "float *uvs;"
        },
        {
          "name": "colors",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 24
            }
          },
          "preview": "uint32_t *colors;"
        },
        {
          "name": "darkColors",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 28
            }
          },
          "preview": "uint32_t *darkColors;"
        },
        {
          "name": "numVertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 27
            }
          },
          "preview": "int32_t numVertices;"
        },
        {
          "name": "indices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 25
            }
          },
          "preview": "uint16_t *indices;"
        },
        {
          "name": "numIndices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 26
            }
          },
          "preview": "int32_t numIndices;"
        },
        {
          "name": "blendMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 27
            }
          },
          "preview": "BlendMode blendMode;"
        },
        {
          "name": "texture",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 21
            }
          },
          "preview": "void *texture;"
        },
        {
          "name": "next",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 27
            }
          },
          "preview": "RenderCommand *next;"
        }
      ]
    },
    {
      "name": "SkeletonRenderer",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SkeletonRenderer.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 5
        }
      },
      "preview": "class SP_API SkeletonRenderer: public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "SkeletonRenderer",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 35
            }
          },
          "preview": "explicit SkeletonRenderer();"
        },
        {
          "name": "~SkeletonRenderer",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 27
            }
          },
          "preview": "~SkeletonRenderer();"
        },
        {
          "name": "render",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 49
            }
          },
          "preview": "RenderCommand *render(Skeleton &skeleton);"
        },
        {
          "name": "_allocator",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 33
            }
          },
          "preview": "BlockAllocator _allocator;"
        },
        {
          "name": "_worldVertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 36
            }
          },
          "preview": "Vector<float> _worldVertices;"
        },
        {
          "name": "_quadIndices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 43
            }
          },
          "preview": "Vector<unsigned short> _quadIndices;"
        },
        {
          "name": "_clipping",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 34
            }
          },
          "preview": "SkeletonClipping _clipping;"
        },
        {
          "name": "_renderCommands",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 47
            }
          },
          "preview": "Vector<RenderCommand *> _renderCommands;"
        }
      ]
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "ConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 43,
          "character": 21
        }
      },
      "preview": "class ConstraintData;"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 48,
          "character": 0
        },
        "end": {
          "line": 167,
          "character": 2
        }
      },
      "preview": "class SP_API Skin : public SpineObject {",
      "documentation": "Stores attachments by slot index and attachment name.\nSee SkeletonData::getDefaultSkin, Skeleton::getSkin, and\nhttp://esotericsoftware.com/spine-runtime-skins in the Spine Runtimes Guide.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Skin",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 35
            }
          },
          "preview": "explicit Skin(const String &name);"
        },
        {
          "name": "~Skin",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 9
            }
          },
          "preview": "~Skin();"
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 82
            }
          },
          "preview": "void setAttachment(size_t slotIndex, const String &name, Attachment *attachment);",
          "documentation": "Adds an attachment to the skin for the specified slot index and name.\nIf the name already exists for the slot, the previous value is replaced."
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 65
            }
          },
          "preview": "Attachment *getAttachment(size_t slotIndex, const String &name);",
          "documentation": "Returns the attachment for the specified slot index and name, or NULL."
        },
        {
          "name": "removeAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 61
            }
          },
          "preview": "void removeAttachment(size_t slotIndex, const String &name);"
        },
        {
          "name": "findNamesForSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 65
            }
          },
          "preview": "void findNamesForSlot(size_t slotIndex, Vector <String> &names);",
          "documentation": "Finds the skin keys for a given slot. The results are added to the passed array of names.\n@param slotIndex The target slotIndex. To find the slot index, use SkeletonData::findSlot and SlotData::getIndex.\n@param names Found skin key names will be added to this array."
        },
        {
          "name": "findAttachmentsForSlot",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 82
            }
          },
          "preview": "void findAttachmentsForSlot(size_t slotIndex, Vector<Attachment *> &attachments);",
          "documentation": "Finds the attachments for a given slot. The results are added to the passed array of Attachments.\n@param slotIndex The target slotIndex. To find the slot index, use SkeletonData::findSlot and SlotData::getIndex.\n@param attachments Found Attachments will be added to this array."
        },
        {
          "name": "getName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 142,
              "character": 0
            },
            "end": {
              "line": 142,
              "character": 25
            }
          },
          "preview": "const String &getName();"
        },
        {
          "name": "addSkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 27
            }
          },
          "preview": "void addSkin(Skin *other);",
          "documentation": "Adds all attachments, bones, and constraints from the specified skin to this skin."
        },
        {
          "name": "copySkin",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 28
            }
          },
          "preview": "void copySkin(Skin *other);",
          "documentation": "Adds all attachments, bones, and constraints from the specified skin to this skin. Attachments are deep copied."
        },
        {
          "name": "getAttachments",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 41
            }
          },
          "preview": "AttachmentMap::Entries getAttachments();"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 152,
              "character": 32
            }
          },
          "preview": "Vector<BoneData *> &getBones();"
        },
        {
          "name": "getConstraints",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 154,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 44
            }
          },
          "preview": "Vector<ConstraintData *> &getConstraints();"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 156,
              "character": 44
            }
          },
          "preview": "Color &getColor() { return _color; }"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 20
            }
          },
          "preview": "const String _name;"
        },
        {
          "name": "_attachments",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 28
            }
          },
          "preview": "AttachmentMap _attachments;"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 27
            }
          },
          "preview": "Vector<BoneData *> _bones;"
        },
        {
          "name": "_constraints",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 162,
              "character": 0
            },
            "end": {
              "line": 162,
              "character": 39
            }
          },
          "preview": "Vector<ConstraintData *> _constraints;"
        },
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 20
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "attachAll",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 166,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 51
            }
          },
          "preview": "void attachAll(Skeleton &skeleton, Skin &oldSkin);",
          "documentation": "Attach all attachments from this skin if the corresponding attachment from the old skin is currently attached."
        }
      ]
    },
    {
      "name": "AttachmentMap",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 116,
          "character": 3
        }
      },
      "preview": "class SP_API AttachmentMap : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "put",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 83
            }
          },
          "preview": "void put(size_t slotIndex, const String &attachmentName, Attachment *attachment);"
        },
        {
          "name": "get",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 66
            }
          },
          "preview": "Attachment *get(size_t slotIndex, const String &attachmentName);"
        },
        {
          "name": "remove",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 62
            }
          },
          "preview": "void remove(size_t slotIndex, const String &attachmentName);"
        },
        {
          "name": "getEntries",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 23
            }
          },
          "preview": "Entries getEntries();"
        },
        {
          "name": "AttachmentMap",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 18
            }
          },
          "preview": "AttachmentMap();"
        },
        {
          "name": "findInBucket",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 67
            }
          },
          "preview": "int findInBucket(Vector <Entry> &, const String &attachmentName);"
        },
        {
          "name": "_buckets",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 34
            }
          },
          "preview": "Vector <Vector<Entry>> _buckets;"
        }
      ]
    },
    {
      "name": "Entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 56,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 4
        }
      },
      "preview": "struct SP_API Entry {",
      "members": [
        {
          "name": "_slotIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 21
            }
          },
          "preview": "size_t _slotIndex;"
        },
        {
          "name": "_name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 16
            }
          },
          "preview": "String _name;"
        },
        {
          "name": "_attachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 27
            }
          },
          "preview": "Attachment *_attachment;"
        },
        {
          "name": "Entry",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 5
            }
          },
          "preview": "Entry(size_t slotIndex, const String &name, Attachment *attachment) :"
        }
      ]
    },
    {
      "name": "Entries",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Skin.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 98,
          "character": 4
        }
      },
      "preview": "class SP_API Entries {",
      "members": [
        {
          "name": "hasNext",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 5
            }
          },
          "preview": "bool hasNext() {"
        },
        {
          "name": "next",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 5
            }
          },
          "preview": "Entry &next() {"
        },
        {
          "name": "Entries",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 5
            }
          },
          "preview": "Entries(Vector <Vector<Entry>> &buckets) : _buckets(buckets), _slotIndex(0), _bucketIndex(0) {"
        },
        {
          "name": "_buckets",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 36
            }
          },
          "preview": "Vector <Vector<Entry>> &_buckets;"
        },
        {
          "name": "_slotIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 21
            }
          },
          "preview": "size_t _slotIndex;"
        },
        {
          "name": "_bucketIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 23
            }
          },
          "preview": "size_t _bucketIndex;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slider.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slider.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slider.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "Slider",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slider.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 2
        }
      },
      "preview": "class SP_API Slider : public ConstraintGeneric<Slider, SliderData, SliderPose> {",
      "documentation": "Stores the setup pose for a PhysicsConstraint.\nSee https://esotericsoftware.com/spine-physics-constraints Physics constraints in the Spine User Guide.",
      "members": [
        {
          "name": "Slider",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 46
            }
          },
          "preview": "Slider(SliderData& data, Skeleton& skeleton);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 34
            }
          },
          "preview": "Slider* copy(Skeleton& skeleton);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 67
            }
          },
          "preview": "virtual void update(Skeleton& skeleton, Physics physics) override;"
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 48
            }
          },
          "preview": "virtual void sort(Skeleton& skeleton) override;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 40
            }
          },
          "preview": "virtual bool isSourceActive() override;"
        },
        {
          "name": "getBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 17
            }
          },
          "preview": "Bone* getBone();"
        },
        {
          "name": "setBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 26
            }
          },
          "preview": "void setBone(Bone* bone);"
        },
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 13
            }
          },
          "preview": "Bone* _bone;"
        },
        {
          "name": "_offsets",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 26
            }
          },
          "preview": "static float _offsets[6];"
        }
      ]
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 16
        }
      },
      "preview": "class Animation;"
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "FromProperty",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 19
        }
      },
      "preview": "class FromProperty;"
    },
    {
      "name": "Slider",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 13
        }
      },
      "preview": "class Slider;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "SliderData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderData.h",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 2
        }
      },
      "preview": "class SP_API SliderData : public ConstraintDataGeneric<Slider, SliderPose> {",
      "documentation": "Stores the setup pose for a PhysicsConstraint.\nSee https://esotericsoftware.com/spine-physics-constraints Physics constraints in the Spine User Guide.",
      "members": [
        {
          "name": "SliderData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 41
            }
          },
          "preview": "explicit SliderData(const String &name);"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 57
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) override;",
          "documentation": "Creates a slider instance."
        },
        {
          "name": "getAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 27
            }
          },
          "preview": "Animation* getAnimation();"
        },
        {
          "name": "setAnimation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 41
            }
          },
          "preview": "void setAnimation(Animation* animation);"
        },
        {
          "name": "getAdditive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 20
            }
          },
          "preview": "bool getAdditive();"
        },
        {
          "name": "setAdditive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 33
            }
          },
          "preview": "void setAdditive(bool additive);"
        },
        {
          "name": "getLoop",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 16
            }
          },
          "preview": "bool getLoop();"
        },
        {
          "name": "setLoop",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 25
            }
          },
          "preview": "void setLoop(bool loop);"
        },
        {
          "name": "getBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 21
            }
          },
          "preview": "BoneData* getBone();"
        },
        {
          "name": "setBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 30
            }
          },
          "preview": "void setBone(BoneData* bone);"
        },
        {
          "name": "getProperty",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 29
            }
          },
          "preview": "FromProperty* getProperty();"
        },
        {
          "name": "setProperty",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 42
            }
          },
          "preview": "void setProperty(FromProperty* property);"
        },
        {
          "name": "getScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 18
            }
          },
          "preview": "float getScale();"
        },
        {
          "name": "setScale",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 28
            }
          },
          "preview": "void setScale(float scale);"
        },
        {
          "name": "getOffset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 19
            }
          },
          "preview": "float getOffset();"
        },
        {
          "name": "setOffset",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 30
            }
          },
          "preview": "void setOffset(float offset);"
        },
        {
          "name": "getLocal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 17
            }
          },
          "preview": "bool getLocal();"
        },
        {
          "name": "setLocal",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 27
            }
          },
          "preview": "void setLocal(bool local);"
        },
        {
          "name": "_animation",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 23
            }
          },
          "preview": "Animation* _animation;"
        },
        {
          "name": "_additive",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 16
            }
          },
          "preview": "bool _additive;"
        },
        {
          "name": "_loop",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 12
            }
          },
          "preview": "bool _loop;"
        },
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 17
            }
          },
          "preview": "BoneData* _bone;"
        },
        {
          "name": "_property",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 25
            }
          },
          "preview": "FromProperty* _property;"
        },
        {
          "name": "_offset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 15
            }
          },
          "preview": "float _offset;"
        },
        {
          "name": "_scale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 14
            }
          },
          "preview": "float _scale;"
        },
        {
          "name": "_local",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 13
            }
          },
          "preview": "bool _local;"
        }
      ]
    },
    {
      "name": "SliderMixTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderMixTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 2
        }
      },
      "preview": "class SP_API SliderMixTimeline : public ConstraintTimeline1 {",
      "documentation": "Changes a slider's SliderPose::getMix().",
      "supertypes": [
        "ConstraintTimeline1"
      ],
      "members": [
        {
          "name": "SliderMixTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 84
            }
          },
          "preview": "explicit SliderMixTimeline(size_t frameCount, size_t bezierCount, int sliderIndex);"
        },
        {
          "name": "~SliderMixTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 30
            }
          },
          "preview": "virtual ~SliderMixTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "Slider",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderPose.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 16
        }
      },
      "preview": "class Slider;"
    },
    {
      "name": "SliderPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderPose.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 5
        }
      },
      "preview": "class SP_API SliderPose : public Pose<SliderPose> {",
      "documentation": "Stores a pose for a slider.",
      "members": [
        {
          "name": "_time",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 19
            }
          },
          "preview": "float _time, _mix;"
        },
        {
          "name": "_mix",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 25
            }
          },
          "preview": "float _time, _mix;"
        },
        {
          "name": "SliderPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 20
            }
          },
          "preview": "SliderPose();"
        },
        {
          "name": "~SliderPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 29
            }
          },
          "preview": "virtual ~SliderPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 51
            }
          },
          "preview": "virtual void set(SliderPose& pose) override;"
        },
        {
          "name": "getTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 23
            }
          },
          "preview": "float getTime();"
        },
        {
          "name": "setTime",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 32
            }
          },
          "preview": "void setTime(float time);"
        },
        {
          "name": "getMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 22
            }
          },
          "preview": "float getMix();"
        },
        {
          "name": "setMix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 30
            }
          },
          "preview": "void setMix(float mix);"
        }
      ]
    },
    {
      "name": "SliderTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SliderTimeline.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 2
        }
      },
      "preview": "class SP_API SliderTimeline : public ConstraintTimeline1 {",
      "supertypes": [
        "ConstraintTimeline1"
      ],
      "members": [
        {
          "name": "SliderTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 81
            }
          },
          "preview": "explicit SliderTimeline(size_t frameCount, size_t bezierCount, int sliderIndex);"
        },
        {
          "name": "~SliderTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 27
            }
          },
          "preview": "virtual ~SliderTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slot.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slot.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slot.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Slot.h",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 2
        }
      },
      "preview": "class SP_API Slot : public PosedGeneric<SlotData, SlotPose, SlotPose> {",
      "documentation": "Stores a slot's current pose. Slots organize attachments for Skeleton drawOrder purposes and provide a place to store\nstate for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\nacross multiple skeletons.",
      "members": [
        {
          "name": "Slot",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 42
            }
          },
          "preview": "Slot(SlotData &data, Skeleton &skeleton);"
        },
        {
          "name": "getBone",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 17
            }
          },
          "preview": "Bone &getBone();",
          "documentation": "The bone this slot belongs to."
        },
        {
          "name": "setupPose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 27
            }
          },
          "preview": "void setupPose() override;"
        },
        {
          "name": "_skeleton",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 21
            }
          },
          "preview": "Skeleton &_skeleton;"
        },
        {
          "name": "_bone",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 13
            }
          },
          "preview": "Bone &_bone;"
        },
        {
          "name": "_attachmentState",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 22
            }
          },
          "preview": "int _attachmentState;"
        }
      ]
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotCurveTimeline.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "SlotPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotCurveTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 15
        }
      },
      "preview": "class SlotPose;"
    },
    {
      "name": "SlotCurveTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotCurveTimeline.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 2
        }
      },
      "preview": "class SP_API SlotCurveTimeline : public CurveTimeline, public SlotTimeline {",
      "documentation": "Base class for slot timelines that use curves.",
      "supertypes": [
        "CurveTimeline",
        "SlotTimeline"
      ],
      "members": [
        {
          "name": "SlotCurveTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 94
            }
          },
          "preview": "SlotCurveTimeline(size_t frameCount, size_t frameEntries, size_t bezierCount, int slotIndex);"
        },
        {
          "name": "~SlotCurveTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 30
            }
          },
          "preview": "virtual ~SlotCurveTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 75
            }
          },
          "preview": "virtual void apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha,"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 93
            }
          },
          "preview": "virtual void apply(Slot& slot, SlotPose& pose, float time, float alpha, MixBlend blend) = 0;",
          "documentation": "Applies the timeline to the slot pose."
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "SlotData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotData.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 2
        }
      },
      "preview": "class SP_API SlotData : public PosedDataGeneric<SlotPose> {",
      "documentation": "Stores the setup pose for a Slot.",
      "members": [
        {
          "name": "SlotData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 61
            }
          },
          "preview": "SlotData(int index, const String& name, BoneData& boneData);"
        },
        {
          "name": "getIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 16
            }
          },
          "preview": "int getIndex();",
          "documentation": "The index of the slot in Skeleton::getSlots()."
        },
        {
          "name": "getBoneData",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 25
            }
          },
          "preview": "BoneData& getBoneData();",
          "documentation": "The bone this slot belongs to."
        },
        {
          "name": "setAttachmentName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 54
            }
          },
          "preview": "void setAttachmentName(const String& attachmentName);"
        },
        {
          "name": "getAttachmentName",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 35
            }
          },
          "preview": "const String& getAttachmentName();",
          "documentation": "The name of the attachment that is visible for this slot in the setup pose, or empty if no attachment is visible."
        },
        {
          "name": "getBlendMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 26
            }
          },
          "preview": "BlendMode getBlendMode();",
          "documentation": "The blend mode for drawing the slot's attachment."
        },
        {
          "name": "setBlendMode",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 40
            }
          },
          "preview": "void setBlendMode(BlendMode blendMode);"
        },
        {
          "name": "getVisible",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 19
            }
          },
          "preview": "bool getVisible();",
          "documentation": "False if the slot was hidden in Spine and nonessential data was exported. Does not affect runtime rendering."
        },
        {
          "name": "setVisible",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 31
            }
          },
          "preview": "void setVisible(bool visible);"
        },
        {
          "name": "_index",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 18
            }
          },
          "preview": "const int _index;"
        },
        {
          "name": "_boneData",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 21
            }
          },
          "preview": "BoneData& _boneData;"
        },
        {
          "name": "_attachmentName",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 24
            }
          },
          "preview": "String _attachmentName;"
        },
        {
          "name": "_blendMode",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 22
            }
          },
          "preview": "BlendMode _blendMode;"
        },
        {
          "name": "_visible",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 15
            }
          },
          "preview": "bool _visible;"
        }
      ]
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotPose.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 17
        }
      },
      "preview": "class Attachment;"
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotPose.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 23
        }
      },
      "preview": "class VertexAttachment;"
    },
    {
      "name": "SlotPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotPose.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 2
        }
      },
      "preview": "class SP_API SlotPose : public Pose<SlotPose> {",
      "members": [
        {
          "name": "_color",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 14
            }
          },
          "preview": "Color _color;"
        },
        {
          "name": "_darkColor",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 18
            }
          },
          "preview": "Color _darkColor;"
        },
        {
          "name": "_hasDarkColor",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 20
            }
          },
          "preview": "bool _hasDarkColor;"
        },
        {
          "name": "_attachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 25
            }
          },
          "preview": "Attachment* _attachment;"
        },
        {
          "name": "_sequenceIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 20
            }
          },
          "preview": "int _sequenceIndex;"
        },
        {
          "name": "_deform",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 23
            }
          },
          "preview": "Vector<float> _deform;"
        },
        {
          "name": "SlotPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 12
            }
          },
          "preview": "SlotPose();"
        },
        {
          "name": "~SlotPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 21
            }
          },
          "preview": "virtual ~SlotPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 43
            }
          },
          "preview": "virtual void set(SlotPose& pose) override;"
        },
        {
          "name": "getColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 19
            }
          },
          "preview": "Color& getColor();",
          "documentation": "The color used to tint the slot's attachment. If getDarkColor() is set, this is used as the light color for two\ncolor tinting."
        },
        {
          "name": "getDarkColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 23
            }
          },
          "preview": "Color& getDarkColor();",
          "documentation": "The dark color used to tint the slot's attachment for two color tinting. The dark\ncolor's alpha is not used."
        },
        {
          "name": "hasDarkColor",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 21
            }
          },
          "preview": "bool hasDarkColor();",
          "documentation": "Returns true if this slot has a dark color."
        },
        {
          "name": "getAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 29
            }
          },
          "preview": "Attachment* getAttachment();",
          "documentation": "The current attachment for the slot, or null if the slot has no attachment."
        },
        {
          "name": "setAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 44
            }
          },
          "preview": "void setAttachment(Attachment* attachment);",
          "documentation": "Sets the slot's attachment and, if the attachment changed, resets sequenceIndex and clears the deform.\nThe deform is not cleared if the old attachment has the same VertexAttachment::getTimelineAttachment() as the\nspecified attachment."
        },
        {
          "name": "getSequenceIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 24
            }
          },
          "preview": "int getSequenceIndex();",
          "documentation": "The index of the texture region to display when the slot's attachment has a Sequence. -1 represents the\nSequence::getSetupIndex()."
        },
        {
          "name": "setSequenceIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 42
            }
          },
          "preview": "void setSequenceIndex(int sequenceIndex);"
        },
        {
          "name": "getDeform",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 28
            }
          },
          "preview": "Vector<float>& getDeform();",
          "documentation": "Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\nweighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\nSee VertexAttachment::computeWorldVertices() and DeformTimeline."
        }
      ]
    },
    {
      "name": "SlotTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SlotTimeline.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 2
        }
      },
      "preview": "class SP_API SlotTimeline {",
      "documentation": "An interface for timelines which change the property of a slot.",
      "members": [
        {
          "name": "SlotTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 29
            }
          },
          "preview": "SlotTimeline(int slotIndex);"
        },
        {
          "name": "~SlotTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 25
            }
          },
          "preview": "virtual ~SlotTimeline();"
        },
        {
          "name": "getSlotIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 28
            }
          },
          "preview": "virtual int getSlotIndex();",
          "documentation": "The index of the slot in Skeleton::getSlots() that will be changed when this timeline is applied."
        },
        {
          "name": "setSlotIndex",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 40
            }
          },
          "preview": "virtual void setSlotIndex(int inValue);"
        },
        {
          "name": "_slotIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 16
            }
          },
          "preview": "int _slotIndex;"
        }
      ]
    },
    {
      "name": "SpacingMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpacingMode.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 2
        }
      },
      "preview": "enum SpacingMode {",
      "documentation": "Controls how bones after the first bone are positioned along the path.\n@see https://esotericsoftware.com/spine-path-constraints#Spacing-mode Spacing mode in the Spine User Guide.",
      "members": []
    },
    {
      "name": "SpacingMode_Length",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpacingMode.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 24
        }
      },
      "preview": "SpacingMode_Length = 0,"
    },
    {
      "name": "SpacingMode_Fixed",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpacingMode.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 19
        }
      },
      "preview": "SpacingMode_Fixed,"
    },
    {
      "name": "SpacingMode_Percent",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpacingMode.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 21
        }
      },
      "preview": "SpacingMode_Percent,"
    },
    {
      "name": "SpacingMode_Proportional",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpacingMode.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 26
        }
      },
      "preview": "SpacingMode_Proportional"
    },
    {
      "name": "String",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpineObject.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 13
        }
      },
      "preview": "class String;"
    },
    {
      "name": "SpineObject",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpineObject.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 2
        }
      },
      "preview": "class SP_API SpineObject {",
      "members": [
        {
          "name": "operator new",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 31
            }
          },
          "preview": "void *operator new(size_t sz);"
        },
        {
          "name": "operator new",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 59
            }
          },
          "preview": "void *operator new(size_t sz, const char *file, int line);"
        },
        {
          "name": "operator new",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 42
            }
          },
          "preview": "void *operator new(size_t sz, void *ptr);"
        },
        {
          "name": "operator delete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 59
            }
          },
          "preview": "void operator delete(void *p, const char *file, int line);"
        },
        {
          "name": "operator delete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 42
            }
          },
          "preview": "void operator delete(void *p, void *mem);"
        },
        {
          "name": "operator delete",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 31
            }
          },
          "preview": "void operator delete(void *p);"
        },
        {
          "name": "~SpineObject",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 24
            }
          },
          "preview": "virtual ~SpineObject();"
        }
      ]
    },
    {
      "name": "String",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/SpineString.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 241,
          "character": 2
        }
      },
      "preview": "class SP_API String : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "String",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 3
            }
          },
          "preview": "String() : _length(0), _buffer(NULL), _tempowner(true) {"
        },
        {
          "name": "String",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 3
            }
          },
          "preview": "String(const char *chars, bool own = false, bool tofree = true) {"
        },
        {
          "name": "String",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 3
            }
          },
          "preview": "String(const String &other) {"
        },
        {
          "name": "length",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 3
            }
          },
          "preview": "size_t length() const {"
        },
        {
          "name": "isEmpty",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 3
            }
          },
          "preview": "bool isEmpty() const {"
        },
        {
          "name": "buffer",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 3
            }
          },
          "preview": "const char *buffer() const {"
        },
        {
          "name": "own",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 3
            }
          },
          "preview": "void own(const String &other) {"
        },
        {
          "name": "own",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 3
            }
          },
          "preview": "void own(const char *chars) {"
        },
        {
          "name": "unown",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 3
            }
          },
          "preview": "void unown() {"
        },
        {
          "name": "operator=",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 3
            }
          },
          "preview": "String &operator=(const String &other) {"
        },
        {
          "name": "operator=",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 3
            }
          },
          "preview": "String &operator=(const char *chars) {"
        },
        {
          "name": "append",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 147,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 3
            }
          },
          "preview": "String &append(const char *chars) {"
        },
        {
          "name": "append",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 157,
              "character": 0
            },
            "end": {
              "line": 165,
              "character": 3
            }
          },
          "preview": "String &append(const String &other) {"
        },
        {
          "name": "append",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 167,
              "character": 0
            },
            "end": {
              "line": 172,
              "character": 3
            }
          },
          "preview": "String &append(int other) {"
        },
        {
          "name": "append",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 174,
              "character": 0
            },
            "end": {
              "line": 179,
              "character": 3
            }
          },
          "preview": "String &append(float other) {"
        },
        {
          "name": "startsWith",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 187,
              "character": 3
            }
          },
          "preview": "bool startsWith(const String &needle) const {"
        },
        {
          "name": "lastIndexOf",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 9
            }
          },
          "preview": "int lastIndexOf(const char c) const {"
        },
        {
          "name": "substring",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 9
            }
          },
          "preview": "String substring(int startIndex, int length) const {"
        },
        {
          "name": "substring",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 206,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 9
            }
          },
          "preview": "String substring(int startIndex) const {"
        },
        {
          "name": "~String",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 231,
              "character": 0
            },
            "end": {
              "line": 235,
              "character": 3
            }
          },
          "preview": "~String() {"
        },
        {
          "name": "_length",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 238,
              "character": 0
            },
            "end": {
              "line": 238,
              "character": 24
            }
          },
          "preview": "mutable size_t _length;"
        },
        {
          "name": "_buffer",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 239,
              "character": 0
            },
            "end": {
              "line": 239,
              "character": 23
            }
          },
          "preview": "mutable char *_buffer;"
        },
        {
          "name": "_tempowner",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 240,
              "character": 0
            },
            "end": {
              "line": 240,
              "character": 25
            }
          },
          "preview": "mutable bool _tempowner;"
        }
      ]
    },
    {
      "name": "AtlasPage",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TextureLoader.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 36,
          "character": 16
        }
      },
      "preview": "class AtlasPage;"
    },
    {
      "name": "TextureLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TextureLoader.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 47,
          "character": 2
        }
      },
      "preview": "class SP_API TextureLoader : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "TextureLoader",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 17
            }
          },
          "preview": "TextureLoader();"
        },
        {
          "name": "~TextureLoader",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 26
            }
          },
          "preview": "virtual ~TextureLoader();"
        },
        {
          "name": "load",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 60
            }
          },
          "preview": "virtual void load(AtlasPage &page, const String &path) = 0;"
        },
        {
          "name": "unload",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 40
            }
          },
          "preview": "virtual void unload(void *texture) = 0;"
        }
      ]
    },
    {
      "name": "TextureRegion",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TextureRegion.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 46,
          "character": 2
        }
      },
      "preview": "class SP_API TextureRegion : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "rendererObject",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 22
            }
          },
          "preview": "void *rendererObject;"
        },
        {
          "name": "u",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 9
            }
          },
          "preview": "float u, v, u2, v2;"
        },
        {
          "name": "v",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 12
            }
          },
          "preview": "float u, v, u2, v2;"
        },
        {
          "name": "u2",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 16
            }
          },
          "preview": "float u, v, u2, v2;"
        },
        {
          "name": "v2",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 20
            }
          },
          "preview": "float u, v, u2, v2;"
        },
        {
          "name": "degrees",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 13
            }
          },
          "preview": "int degrees;"
        },
        {
          "name": "offsetX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 15
            }
          },
          "preview": "float offsetX, offsetY;"
        },
        {
          "name": "offsetY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 24
            }
          },
          "preview": "float offsetX, offsetY;"
        },
        {
          "name": "width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 11
            }
          },
          "preview": "int width, height;"
        },
        {
          "name": "height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 19
            }
          },
          "preview": "int width, height;"
        },
        {
          "name": "originalWidth",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 19
            }
          },
          "preview": "int originalWidth, originalHeight;"
        },
        {
          "name": "originalHeight",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 35
            }
          },
          "preview": "int originalWidth, originalHeight;"
        },
        {
          "name": "TextureRegion",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 162
            }
          },
          "preview": "TextureRegion(): rendererObject(NULL), u(0), v(0), u2(0), v2(0), degrees(0), offsetX(0), offsetY(0), width(0), height(0), originalWidth(0), originalHeight(0) {};"
        },
        {
          "name": "~TextureRegion",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 21
            }
          },
          "preview": "~TextureRegion() {};"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Timeline.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Timeline.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 12
        }
      },
      "preview": "class Event;"
    },
    {
      "name": "Timeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Timeline.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 83,
          "character": 2
        }
      },
      "preview": "class SP_API Timeline : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 50
            }
          },
          "preview": "Timeline(size_t frameCount, size_t frameEntries);"
        },
        {
          "name": "~Timeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 21
            }
          },
          "preview": "virtual ~Timeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 50
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "getFrameEntries",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 26
            }
          },
          "preview": "size_t getFrameEntries();"
        },
        {
          "name": "getFrameCount",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 24
            }
          },
          "preview": "size_t getFrameCount();"
        },
        {
          "name": "getFrames",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 28
            }
          },
          "preview": "Vector<float> &getFrames();"
        },
        {
          "name": "getDuration",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 21
            }
          },
          "preview": "float getDuration();"
        },
        {
          "name": "getPropertyIds",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 47
            }
          },
          "preview": "virtual Vector <PropertyId> &getPropertyIds();"
        },
        {
          "name": "setPropertyIds",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 72
            }
          },
          "preview": "void setPropertyIds(PropertyId propertyIds[], size_t propertyIdsCount);"
        },
        {
          "name": "_propertyIds",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 40
            }
          },
          "preview": "Vector <PropertyId> _propertyIds;"
        },
        {
          "name": "_frames",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 23
            }
          },
          "preview": "Vector<float> _frames;"
        },
        {
          "name": "_frameEntries",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 22
            }
          },
          "preview": "size_t _frameEntries;"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraint.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraint.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 11
        }
      },
      "preview": "class Bone;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraint.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "TransformConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraint.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 71,
          "character": 2
        }
      },
      "preview": "class SP_API TransformConstraint : public ConstraintGeneric<TransformConstraint, TransformConstraintData, TransformConstraintPose> {",
      "members": [
        {
          "name": "TransformConstraint",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 72
            }
          },
          "preview": "TransformConstraint(TransformConstraintData& data, Skeleton& skeleton);"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 55
            }
          },
          "preview": "virtual TransformConstraint* copy(Skeleton& skeleton);"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 59
            }
          },
          "preview": "void update(Skeleton& skeleton, Physics physics) override;",
          "documentation": "Applies the constraint to the constrained bones."
        },
        {
          "name": "sort",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 40
            }
          },
          "preview": "void sort(Skeleton& skeleton) override;"
        },
        {
          "name": "isSourceActive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 32
            }
          },
          "preview": "bool isSourceActive() override;"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 31
            }
          },
          "preview": "Vector<BonePose*>& getBones();",
          "documentation": "The bones that will be modified by this transform constraint."
        },
        {
          "name": "getSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 19
            }
          },
          "preview": "Bone* getSource();",
          "documentation": "The bone whose world transform will be copied to the constrained bones."
        },
        {
          "name": "setSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 30
            }
          },
          "preview": "void setSource(Bone* source);"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 26
            }
          },
          "preview": "Vector<BonePose*> _bones;"
        },
        {
          "name": "_source",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 15
            }
          },
          "preview": "Bone* _source;"
        }
      ]
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class BoneData;"
    },
    {
      "name": "TransformConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 26
        }
      },
      "preview": "class TransformConstraint;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 40,
          "character": 15
        }
      },
      "preview": "class BonePose;"
    },
    {
      "name": "TransformConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 30
        }
      },
      "preview": "class TransformConstraintPose;"
    },
    {
      "name": "FromProperty",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 58,
          "character": 2
        }
      },
      "preview": "class SP_API FromProperty : public SpineObject {",
      "documentation": "Source property for a TransformConstraint.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "offset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 14
            }
          },
          "preview": "float offset;",
          "documentation": "The value of this property that corresponds to ToProperty offset."
        },
        {
          "name": "to",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 30
            }
          },
          "preview": "Vector<class ToProperty*> to;",
          "documentation": "Constrained properties."
        },
        {
          "name": "FromProperty",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 16
            }
          },
          "preview": "FromProperty();"
        },
        {
          "name": "~FromProperty",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 25
            }
          },
          "preview": "virtual ~FromProperty();"
        },
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 91
            }
          },
          "preview": "virtual float value(Skeleton& skeleton, BonePose& source, bool local, float* offsets) = 0;",
          "documentation": "Reads this property from the specified bone."
        }
      ]
    },
    {
      "name": "ToProperty",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 51,
          "character": 25
        }
      },
      "preview": "Vector<class ToProperty*> to;",
      "documentation": "Constrained properties.",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "ToProperty",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 2
        }
      },
      "preview": "class SP_API ToProperty : public SpineObject {",
      "documentation": "Constrained property for a TransformConstraint.",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "offset",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 14
            }
          },
          "preview": "float offset;",
          "documentation": "The value of this property that corresponds to FromProperty offset."
        },
        {
          "name": "max",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 11
            }
          },
          "preview": "float max;",
          "documentation": "The maximum value of this property when clamped."
        },
        {
          "name": "scale",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 13
            }
          },
          "preview": "float scale;",
          "documentation": "The scale of the FromProperty value in relation to this property."
        },
        {
          "name": "ToProperty",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 14
            }
          },
          "preview": "ToProperty();"
        },
        {
          "name": "~ToProperty",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 23
            }
          },
          "preview": "virtual ~ToProperty();"
        },
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 54
            }
          },
          "preview": "virtual float mix(TransformConstraintPose& pose) = 0;",
          "documentation": "Reads the mix for this property from the specified pose."
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 131
            }
          },
          "preview": "virtual void apply(Skeleton& skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) = 0;",
          "documentation": "Applies the value to this property."
        }
      ]
    },
    {
      "name": "FromRotate",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 83,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 2
        }
      },
      "preview": "class SP_API FromRotate : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToRotate",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 88,
          "character": 0
        },
        "end": {
          "line": 92,
          "character": 2
        }
      },
      "preview": "class SP_API ToRotate : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "FromX",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 94,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 2
        }
      },
      "preview": "class SP_API FromX : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToX",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 99,
          "character": 0
        },
        "end": {
          "line": 103,
          "character": 2
        }
      },
      "preview": "class SP_API ToX : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "FromY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 105,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 2
        }
      },
      "preview": "class SP_API FromY : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 110,
          "character": 0
        },
        "end": {
          "line": 114,
          "character": 2
        }
      },
      "preview": "class SP_API ToY : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "FromScaleX",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 116,
          "character": 0
        },
        "end": {
          "line": 119,
          "character": 2
        }
      },
      "preview": "class SP_API FromScaleX : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToScaleX",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 121,
          "character": 0
        },
        "end": {
          "line": 125,
          "character": 2
        }
      },
      "preview": "class SP_API ToScaleX : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "FromScaleY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 127,
          "character": 0
        },
        "end": {
          "line": 130,
          "character": 2
        }
      },
      "preview": "class SP_API FromScaleY : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToScaleY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 132,
          "character": 0
        },
        "end": {
          "line": 136,
          "character": 2
        }
      },
      "preview": "class SP_API ToScaleY : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "FromShearY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 138,
          "character": 0
        },
        "end": {
          "line": 141,
          "character": 2
        }
      },
      "preview": "class SP_API FromShearY : public FromProperty {",
      "supertypes": [
        "FromProperty"
      ],
      "members": [
        {
          "name": "value",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 88
            }
          },
          "preview": "float value(Skeleton &skeleton, BonePose& source, bool local, float* offsets) override;"
        }
      ]
    },
    {
      "name": "ToShearY",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 143,
          "character": 0
        },
        "end": {
          "line": 147,
          "character": 2
        }
      },
      "preview": "class SP_API ToShearY : public ToProperty {",
      "supertypes": [
        "ToProperty"
      ],
      "members": [
        {
          "name": "mix",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 51
            }
          },
          "preview": "float mix(TransformConstraintPose& pose) override;"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 146,
              "character": 128
            }
          },
          "preview": "void apply(Skeleton &skeleton, TransformConstraintPose& pose, BonePose& bone, float value, bool local, bool additive) override;"
        }
      ]
    },
    {
      "name": "TransformConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintData.h",
      "range": {
        "start": {
          "line": 152,
          "character": 0
        },
        "end": {
          "line": 224,
          "character": 2
        }
      },
      "preview": "class SP_API TransformConstraintData : public ConstraintDataGeneric<TransformConstraint, TransformConstraintPose> {",
      "documentation": "Stores the setup pose for a TransformConstraint.\nSee https://esotericsoftware.com/spine-transform-constraints Transform constraints in the Spine User Guide.",
      "members": [
        {
          "name": "ROTATION",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 31
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "X",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 38
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "Y",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 45
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "SCALEX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 57
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "SCALEY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 69
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "SHEARY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 81
            }
          },
          "preview": "static const int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;"
        },
        {
          "name": "TransformConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 54
            }
          },
          "preview": "explicit TransformConstraintData(const String &name);"
        },
        {
          "name": "~TransformConstraintData",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 164,
              "character": 28
            }
          },
          "preview": "~TransformConstraintData();"
        },
        {
          "name": "create",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 166,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 57
            }
          },
          "preview": "virtual Constraint* create(Skeleton& skeleton) override;"
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 169,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 31
            }
          },
          "preview": "Vector<BoneData*>& getBones();",
          "documentation": "The bones that will be modified by this transform constraint."
        },
        {
          "name": "getSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 172,
              "character": 0
            },
            "end": {
              "line": 172,
              "character": 23
            }
          },
          "preview": "BoneData* getSource();",
          "documentation": "The bone whose world transform will be copied to the constrained bones."
        },
        {
          "name": "setSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 34
            }
          },
          "preview": "void setSource(BoneData* source);"
        },
        {
          "name": "getOffsetRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 176,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 27
            }
          },
          "preview": "float getOffsetRotation();",
          "documentation": "An offset added to the constrained bone rotation."
        },
        {
          "name": "setOffsetRotation",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 177,
              "character": 0
            },
            "end": {
              "line": 177,
              "character": 46
            }
          },
          "preview": "void setOffsetRotation(float offsetRotation);"
        },
        {
          "name": "getOffsetX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 180,
              "character": 0
            },
            "end": {
              "line": 180,
              "character": 20
            }
          },
          "preview": "float getOffsetX();",
          "documentation": "An offset added to the constrained bone X translation."
        },
        {
          "name": "setOffsetX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 32
            }
          },
          "preview": "void setOffsetX(float offsetX);"
        },
        {
          "name": "getOffsetY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 184,
              "character": 0
            },
            "end": {
              "line": 184,
              "character": 20
            }
          },
          "preview": "float getOffsetY();",
          "documentation": "An offset added to the constrained bone Y translation."
        },
        {
          "name": "setOffsetY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 185,
              "character": 0
            },
            "end": {
              "line": 185,
              "character": 32
            }
          },
          "preview": "void setOffsetY(float offsetY);"
        },
        {
          "name": "getOffsetScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 188,
              "character": 0
            },
            "end": {
              "line": 188,
              "character": 25
            }
          },
          "preview": "float getOffsetScaleX();",
          "documentation": "An offset added to the constrained bone scaleX."
        },
        {
          "name": "setOffsetScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 42
            }
          },
          "preview": "void setOffsetScaleX(float offsetScaleX);"
        },
        {
          "name": "getOffsetScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 192,
              "character": 0
            },
            "end": {
              "line": 192,
              "character": 25
            }
          },
          "preview": "float getOffsetScaleY();",
          "documentation": "An offset added to the constrained bone scaleY."
        },
        {
          "name": "setOffsetScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 193,
              "character": 0
            },
            "end": {
              "line": 193,
              "character": 42
            }
          },
          "preview": "void setOffsetScaleY(float offsetScaleY);"
        },
        {
          "name": "getOffsetShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 25
            }
          },
          "preview": "float getOffsetShearY();",
          "documentation": "An offset added to the constrained bone shearY."
        },
        {
          "name": "setOffsetShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 197,
              "character": 0
            },
            "end": {
              "line": 197,
              "character": 42
            }
          },
          "preview": "void setOffsetShearY(float offsetShearY);"
        },
        {
          "name": "getLocalSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 200,
              "character": 0
            },
            "end": {
              "line": 200,
              "character": 23
            }
          },
          "preview": "bool getLocalSource();",
          "documentation": "Reads the source bone's local transform instead of its world transform."
        },
        {
          "name": "setLocalSource",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 201,
              "character": 39
            }
          },
          "preview": "void setLocalSource(bool localSource);"
        },
        {
          "name": "getLocalTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 204,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 23
            }
          },
          "preview": "bool getLocalTarget();",
          "documentation": "Sets the constrained bones' local transforms instead of their world transforms."
        },
        {
          "name": "setLocalTarget",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 205,
              "character": 0
            },
            "end": {
              "line": 205,
              "character": 39
            }
          },
          "preview": "void setLocalTarget(bool localTarget);"
        },
        {
          "name": "getAdditive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 208,
              "character": 0
            },
            "end": {
              "line": 208,
              "character": 20
            }
          },
          "preview": "bool getAdditive();",
          "documentation": "Adds the source bone transform to the constrained bones instead of setting it absolutely."
        },
        {
          "name": "setAdditive",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 209,
              "character": 0
            },
            "end": {
              "line": 209,
              "character": 33
            }
          },
          "preview": "void setAdditive(bool additive);"
        },
        {
          "name": "getClamp",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 212,
              "character": 0
            },
            "end": {
              "line": 212,
              "character": 17
            }
          },
          "preview": "bool getClamp();",
          "documentation": "Prevents constrained bones from exceeding the ranged defined by offset and max."
        },
        {
          "name": "setClamp",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 213,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 27
            }
          },
          "preview": "void setClamp(bool clamp);"
        },
        {
          "name": "getProperties",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 216,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 46
            }
          },
          "preview": "Vector<class FromProperty*>& getProperties();",
          "documentation": "The mapping of transform properties to other transform properties."
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 219,
              "character": 0
            },
            "end": {
              "line": 219,
              "character": 26
            }
          },
          "preview": "Vector<BoneData*> _bones;"
        },
        {
          "name": "_source",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 220,
              "character": 0
            },
            "end": {
              "line": 220,
              "character": 19
            }
          },
          "preview": "BoneData* _source;"
        },
        {
          "name": "_offsets",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 221,
              "character": 19
            }
          },
          "preview": "float _offsets[6];  // [rotation, x, y, scaleX, scaleY, shearY]"
        },
        {
          "name": "_localSource",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 19
            }
          },
          "preview": "bool _localSource, _localTarget, _additive, _clamp;"
        },
        {
          "name": "_localTarget",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 33
            }
          },
          "preview": "bool _localSource, _localTarget, _additive, _clamp;"
        },
        {
          "name": "_additive",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 44
            }
          },
          "preview": "bool _localSource, _localTarget, _additive, _clamp;"
        },
        {
          "name": "_clamp",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 52
            }
          },
          "preview": "bool _localSource, _localTarget, _additive, _clamp;"
        },
        {
          "name": "_properties",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 223,
              "character": 0
            },
            "end": {
              "line": 223,
              "character": 41
            }
          },
          "preview": "Vector<class FromProperty*> _properties;"
        }
      ]
    },
    {
      "name": "TransformConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintPose.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 5
        }
      },
      "preview": "class SP_API TransformConstraintPose : public Pose<TransformConstraintPose> {",
      "documentation": "Stores a pose for a transform constraint.",
      "members": [
        {
          "name": "_mixRotate",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 24
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "_mixX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 31
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "_mixY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 38
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "_mixScaleX",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 50
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "_mixScaleY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 62
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "_mixShearY",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 74
            }
          },
          "preview": "float _mixRotate, _mixX, _mixY, _mixScaleX, _mixScaleY, _mixShearY;"
        },
        {
          "name": "TransformConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 33
            }
          },
          "preview": "TransformConstraintPose();"
        },
        {
          "name": "~TransformConstraintPose",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 42
            }
          },
          "preview": "virtual ~TransformConstraintPose();"
        },
        {
          "name": "set",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 64
            }
          },
          "preview": "virtual void set(TransformConstraintPose& pose) override;"
        },
        {
          "name": "getMixRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 28
            }
          },
          "preview": "float getMixRotate();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation."
        },
        {
          "name": "setMixRotate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 42
            }
          },
          "preview": "void setMixRotate(float mixRotate);"
        },
        {
          "name": "getMixX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 23
            }
          },
          "preview": "float getMixX();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation X."
        },
        {
          "name": "setMixX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 32
            }
          },
          "preview": "void setMixX(float mixX);"
        },
        {
          "name": "getMixY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 23
            }
          },
          "preview": "float getMixY();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation Y."
        },
        {
          "name": "setMixY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 32
            }
          },
          "preview": "void setMixY(float mixY);"
        },
        {
          "name": "getMixScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 28
            }
          },
          "preview": "float getMixScaleX();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained scale X."
        },
        {
          "name": "setMixScaleX",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 42
            }
          },
          "preview": "void setMixScaleX(float mixScaleX);"
        },
        {
          "name": "getMixScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 28
            }
          },
          "preview": "float getMixScaleY();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained scale Y."
        },
        {
          "name": "setMixScaleY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 42
            }
          },
          "preview": "void setMixScaleY(float mixScaleY);"
        },
        {
          "name": "getMixShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 28
            }
          },
          "preview": "float getMixShearY();",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained shear Y."
        },
        {
          "name": "setMixShearY",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 42
            }
          },
          "preview": "void setMixShearY(float mixShearY);"
        }
      ]
    },
    {
      "name": "TransformConstraintTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TransformConstraintTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 2
        }
      },
      "preview": "class SP_API TransformConstraintTimeline : public CurveTimeline, public ConstraintTimeline {",
      "supertypes": [
        "CurveTimeline",
        "ConstraintTimeline"
      ],
      "members": [
        {
          "name": "TransformConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 107
            }
          },
          "preview": "explicit TransformConstraintTimeline(size_t frameCount, size_t bezierCount, int transformConstraintIndex);"
        },
        {
          "name": "~TransformConstraintTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 40
            }
          },
          "preview": "virtual ~TransformConstraintTimeline();"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 46
            }
          },
          "preview": "apply(Skeleton &skeleton, float lastTime, float time, Vector<Event *> *pEvents, float alpha, MixBlend blend,"
        },
        {
          "name": "setFrame",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 40
            }
          },
          "preview": "void setFrame(int frame, float time, float mixRotate, float mixX, float mixY, float mixScaleX,",
          "documentation": "Sets the time, rotate mix, translate mix, scale mix, and shear mix for the specified frame.\n@param frame Between 0 and frameCount, inclusive.\n@param time The frame time in seconds."
        },
        {
          "name": "ENTRIES",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 30
            }
          },
          "preview": "static const int ENTRIES = 7;"
        },
        {
          "name": "ROTATE",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 29
            }
          },
          "preview": "static const int ROTATE = 1;"
        },
        {
          "name": "X",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 24
            }
          },
          "preview": "static const int X = 2;"
        },
        {
          "name": "Y",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 24
            }
          },
          "preview": "static const int Y = 3;"
        },
        {
          "name": "SCALEX",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 29
            }
          },
          "preview": "static const int SCALEX = 4;"
        },
        {
          "name": "SCALEY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 29
            }
          },
          "preview": "static const int SCALEY = 5;"
        },
        {
          "name": "SHEARY",
          "kind": "property",
          "file": "",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 29
            }
          },
          "preview": "static const int SHEARY = 6;"
        }
      ]
    },
    {
      "name": "TranslateTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TranslateTimeline.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 2
        }
      },
      "preview": "class SP_API TranslateTimeline : public BoneTimeline2 {",
      "documentation": "Changes a bone's local X and Y translation.",
      "supertypes": [
        "BoneTimeline2"
      ],
      "members": [
        {
          "name": "TranslateTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 82
            }
          },
          "preview": "explicit TranslateTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "TranslateXTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TranslateTimeline.h",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API TranslateXTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local X translation.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "TranslateXTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 83
            }
          },
          "preview": "explicit TranslateXTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "TranslateYTimeline",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/TranslateTimeline.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 82,
          "character": 2
        }
      },
      "preview": "class SP_API TranslateYTimeline : public BoneTimeline1 {",
      "documentation": "Changes a bone's local Y translation.",
      "supertypes": [
        "BoneTimeline1"
      ],
      "members": [
        {
          "name": "TranslateYTimeline",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 83
            }
          },
          "preview": "explicit TranslateYTimeline(size_t frameCount, size_t bezierCount, int boneIndex);"
        },
        {
          "name": "apply",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 41
            }
          },
          "preview": "virtual void apply(BoneLocal &pose, BoneLocal &setup, float time, float alpha, MixBlend blend,"
        }
      ]
    },
    {
      "name": "Triangulator",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Triangulator.h",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 2
        }
      },
      "preview": "class SP_API Triangulator : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "~Triangulator",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 17
            }
          },
          "preview": "~Triangulator();"
        },
        {
          "name": "triangulate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 51
            }
          },
          "preview": "Vector<int> &triangulate(Vector<float> &vertices);"
        },
        {
          "name": "decompose",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 3
            }
          },
          "preview": "decompose(Vector<float>"
        },
        {
          "name": "_convexPolygons",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 17
            }
          },
          "preview": "_convexPolygons;"
        },
        {
          "name": "_convexPolygonsIndices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 24
            }
          },
          "preview": "_convexPolygonsIndices;"
        },
        {
          "name": "_indices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 22
            }
          },
          "preview": "Vector<int> _indices;"
        },
        {
          "name": "_isConcaveArray",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 30
            }
          },
          "preview": "Vector<bool> _isConcaveArray;"
        },
        {
          "name": "_triangles",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 24
            }
          },
          "preview": "Vector<int> _triangles;"
        },
        {
          "name": "_polygonPool",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 35
            }
          },
          "preview": "Pool <Vector<float>> _polygonPool;"
        },
        {
          "name": "_polygonIndicesPool",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 40
            }
          },
          "preview": "Pool <Vector<int>> _polygonIndicesPool;"
        },
        {
          "name": "isConcave",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 98
            }
          },
          "preview": "static bool isConcave(int index, int vertexCount, Vector<float> &vertices, Vector<int> &indices);"
        },
        {
          "name": "positiveArea",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 92
            }
          },
          "preview": "static bool positiveArea(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y);"
        },
        {
          "name": "winding",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 86
            }
          },
          "preview": "static int winding(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y);"
        }
      ]
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Update.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "Update",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Update.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 49,
          "character": 2
        }
      },
      "preview": "class SP_API Update : public SpineObject {",
      "documentation": "The interface for items updated by Skeleton::updateWorldTransform().",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Update",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 10
            }
          },
          "preview": "Update();"
        },
        {
          "name": "~Update",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 19
            }
          },
          "preview": "virtual ~Update();"
        },
        {
          "name": "update",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 62
            }
          },
          "preview": "virtual void update(Skeleton& skeleton, Physics physics) = 0;",
          "documentation": "@param physics Determines how physics and other non-deterministic updates are applied."
        }
      ]
    },
    {
      "name": "Vector",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Vector.h",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 241,
          "character": 2
        }
      },
      "preview": "class SP_API Vector : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "Vector",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 3
            }
          },
          "preview": "Vector() : _size(0), _capacity(0), _buffer(NULL) {"
        },
        {
          "name": "Vector",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 3
            }
          },
          "preview": "Vector(const Vector &inVector) : _size(inVector._size), _capacity(inVector._capacity), _buffer(NULL) {"
        },
        {
          "name": "~Vector",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 3
            }
          },
          "preview": "~Vector() {"
        },
        {
          "name": "clear",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 3
            }
          },
          "preview": "inline void clear() {"
        },
        {
          "name": "getCapacity",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 3
            }
          },
          "preview": "inline size_t getCapacity() const {"
        },
        {
          "name": "size",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 3
            }
          },
          "preview": "inline size_t size() const {"
        },
        {
          "name": "setSize",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 3
            }
          },
          "preview": "inline void setSize(size_t newSize, const T &defaultValue) {"
        },
        {
          "name": "ensureCapacity",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 3
            }
          },
          "preview": "inline void ensureCapacity(size_t newCapacity = 0) {"
        },
        {
          "name": "add",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 3
            }
          },
          "preview": "inline void add(const T &inValue) {"
        },
        {
          "name": "addAll",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 3
            }
          },
          "preview": "inline void addAll(const Vector<T> &inValue) {"
        },
        {
          "name": "clearAndAddAll",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 3
            }
          },
          "preview": "inline void clearAndAddAll(const Vector<T> &inValue) {"
        },
        {
          "name": "removeAt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 149,
              "character": 3
            }
          },
          "preview": "inline void removeAt(size_t inIndex) {"
        },
        {
          "name": "contains",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 151,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 3
            }
          },
          "preview": "inline bool contains(const T &inValue) {"
        },
        {
          "name": "indexOf",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 3
            }
          },
          "preview": "inline int indexOf(const T &inValue) {"
        },
        {
          "name": "operator[]",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 171,
              "character": 0
            },
            "end": {
              "line": 175,
              "character": 3
            }
          },
          "preview": "inline T &operator[](size_t inIndex) {"
        },
        {
          "name": "operator[]",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 177,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 3
            }
          },
          "preview": "inline const T &operator[](size_t inIndex) const {"
        },
        {
          "name": "operator=",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 206,
              "character": 3
            }
          },
          "preview": "Vector &operator=(const Vector &inVector) {"
        },
        {
          "name": "buffer",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 208,
              "character": 0
            },
            "end": {
              "line": 210,
              "character": 3
            }
          },
          "preview": "inline T *buffer() {"
        },
        {
          "name": "_size",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 213,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 14
            }
          },
          "preview": "size_t _size;"
        },
        {
          "name": "_capacity",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 214,
              "character": 0
            },
            "end": {
              "line": 214,
              "character": 18
            }
          },
          "preview": "size_t _capacity;"
        },
        {
          "name": "_buffer",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 12
            }
          },
          "preview": "T *_buffer;"
        },
        {
          "name": "allocate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 225,
              "character": 3
            }
          },
          "preview": "inline T *allocate(size_t n) {"
        },
        {
          "name": "deallocate",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 227,
              "character": 0
            },
            "end": {
              "line": 231,
              "character": 3
            }
          },
          "preview": "inline void deallocate(T *buffer) {"
        },
        {
          "name": "construct",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 233,
              "character": 0
            },
            "end": {
              "line": 235,
              "character": 3
            }
          },
          "preview": "inline void construct(T *buffer, const T &val) {"
        },
        {
          "name": "destroy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 237,
              "character": 0
            },
            "end": {
              "line": 239,
              "character": 3
            }
          },
          "preview": "inline void destroy(T *buffer) {"
        }
      ]
    },
    {
      "name": "size_type",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Vector.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 26
        }
      },
      "preview": "using size_type = size_t;"
    },
    {
      "name": "value_type",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Vector.h",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 42,
          "character": 22
        }
      },
      "preview": "using value_type = T;"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/VertexAttachment.h",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 37,
          "character": 11
        }
      },
      "preview": "class Slot;"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/VertexAttachment.h",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 38,
          "character": 15
        }
      },
      "preview": "class Skeleton;"
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/VertexAttachment.h",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 2
        }
      },
      "preview": "class SP_API VertexAttachment : public Attachment {",
      "documentation": "An attachment with vertices that are transformed by one or more bones and can be deformed by a slot's vertices.",
      "supertypes": [
        "Attachment"
      ],
      "members": [
        {
          "name": "VertexAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 47
            }
          },
          "preview": "explicit VertexAttachment(const String &name);"
        },
        {
          "name": "~VertexAttachment",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 29
            }
          },
          "preview": "virtual ~VertexAttachment();"
        },
        {
          "name": "computeWorldVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 28
            }
          },
          "preview": "virtual void computeWorldVertices(Skeleton &skeleton, Slot &slot, size_t start, size_t count, float *worldVertices, size_t offset,",
          "documentation": "Transforms local vertices to world coordinates.\n@param start The index of the first Vertices value to transform. Each vertex has 2 values, x and y.\n@param count The number of world vertex values to output. Must be less than or equal to WorldVerticesLength - start.\n@param worldVertices The output world vertices. Must have a length greater than or equal to offset + count.\n@param offset The worldVertices index to begin writing values.\n@param stride The number of worldVertices entries between the value pairs written."
        },
        {
          "name": "computeWorldVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 28
            }
          },
          "preview": "virtual void computeWorldVertices(Skeleton &skeleton, Slot &slot, size_t start, size_t count, Vector<float> &worldVertices, size_t offset,"
        },
        {
          "name": "getId",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 13
            }
          },
          "preview": "int getId();",
          "documentation": "Gets a unique ID for this attachment."
        },
        {
          "name": "getBones",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 25
            }
          },
          "preview": "Vector<int> &getBones();"
        },
        {
          "name": "getVertices",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 30
            }
          },
          "preview": "Vector<float> &getVertices();"
        },
        {
          "name": "getWorldVerticesLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 33
            }
          },
          "preview": "size_t getWorldVerticesLength();"
        },
        {
          "name": "setWorldVerticesLength",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 45
            }
          },
          "preview": "void setWorldVerticesLength(size_t inValue);"
        },
        {
          "name": "getTimelineAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 38
            }
          },
          "preview": "Attachment * getTimelineAttachment();"
        },
        {
          "name": "setTimelineAttachment",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 52
            }
          },
          "preview": "void setTimelineAttachment(Attachment *attachment);"
        },
        {
          "name": "copyTo",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 38
            }
          },
          "preview": "void copyTo(VertexAttachment *other);"
        },
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 21
            }
          },
          "preview": "Vector <int> _bones;"
        },
        {
          "name": "_vertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 25
            }
          },
          "preview": "Vector<float> _vertices;"
        },
        {
          "name": "_worldVerticesLength",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 29
            }
          },
          "preview": "size_t _worldVerticesLength;"
        },
        {
          "name": "_timelineAttachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 33
            }
          },
          "preview": "Attachment *_timelineAttachment;"
        },
        {
          "name": "_id",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 15
            }
          },
          "preview": "const int _id;"
        },
        {
          "name": "getNextID",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 24
            }
          },
          "preview": "static int getNextID();"
        }
      ]
    },
    {
      "name": "Vertices",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/include/spine/Vertices.h",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 39,
          "character": 2
        }
      },
      "preview": "class SP_API Vertices : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "_bones",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 21
            }
          },
          "preview": "Vector <int> _bones;"
        },
        {
          "name": "_vertices",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 25
            }
          },
          "preview": "Vector<float> _vertices;"
        }
      ]
    },
    {
      "name": "SimpleString",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/src/spine/Atlas.cpp",
      "range": {
        "start": {
          "line": 101,
          "character": 0
        },
        "end": {
          "line": 175,
          "character": 1
        }
      },
      "preview": "struct SimpleString {",
      "members": [
        {
          "name": "start",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "preview": "char *start;"
        },
        {
          "name": "end",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 10
            }
          },
          "preview": "char *end;"
        },
        {
          "name": "length",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 11
            }
          },
          "preview": "int length;"
        },
        {
          "name": "trim",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 2
            }
          },
          "preview": "SimpleString trim() {"
        },
        {
          "name": "indexOf",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 2
            }
          },
          "preview": "int indexOf(char needle) {"
        },
        {
          "name": "indexOf",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 137,
              "character": 2
            }
          },
          "preview": "int indexOf(char needle, int at) {"
        },
        {
          "name": "substr",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 139,
              "character": 0
            },
            "end": {
              "line": 146,
              "character": 2
            }
          },
          "preview": "SimpleString substr(int s, int e) {"
        },
        {
          "name": "substr",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 2
            }
          },
          "preview": "SimpleString substr(int s) {"
        },
        {
          "name": "equals",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 2
            }
          },
          "preview": "bool equals(const char *str) {"
        },
        {
          "name": "copy",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 170,
              "character": 2
            }
          },
          "preview": "char *copy() {"
        },
        {
          "name": "toInt",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 172,
              "character": 0
            },
            "end": {
              "line": 174,
              "character": 2
            }
          },
          "preview": "int toInt() {"
        }
      ]
    },
    {
      "name": "AtlasInput",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp/src/spine/Atlas.cpp",
      "range": {
        "start": {
          "line": 177,
          "character": 0
        },
        "end": {
          "line": 217,
          "character": 1
        }
      },
      "preview": "struct AtlasInput {",
      "members": [
        {
          "name": "start",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 178,
              "character": 18
            }
          },
          "preview": "const char *start;"
        },
        {
          "name": "end",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 179,
              "character": 0
            },
            "end": {
              "line": 179,
              "character": 16
            }
          },
          "preview": "const char *end;"
        },
        {
          "name": "index",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 180,
              "character": 0
            },
            "end": {
              "line": 180,
              "character": 12
            }
          },
          "preview": "char *index;"
        },
        {
          "name": "length",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 11
            }
          },
          "preview": "int length;"
        },
        {
          "name": "line",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 182,
              "character": 0
            },
            "end": {
              "line": 182,
              "character": 18
            }
          },
          "preview": "SimpleString line;"
        },
        {
          "name": "AtlasInput",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 184,
              "character": 0
            },
            "end": {
              "line": 184,
              "character": 116
            }
          },
          "preview": "AtlasInput(const char *data, int length) : start(data), end(data + length), index((char *) data), length(length) {}"
        },
        {
          "name": "readLine",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 186,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 2
            }
          },
          "preview": "SimpleString *readLine() {"
        },
        {
          "name": "readEntry",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 198,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 2
            }
          },
          "preview": "static int readEntry(SimpleString entry[5], SimpleString *line) {"
        }
      ]
    },
    {
      "name": "AnimationStateEvent",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 41,
          "character": 1
        }
      },
      "preview": "struct AnimationStateEvent {",
      "members": [
        {
          "name": "type",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 15
            }
          },
          "preview": "EventType type;"
        },
        {
          "name": "entry",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 18
            }
          },
          "preview": "TrackEntry *entry;"
        },
        {
          "name": "event",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 13
            }
          },
          "preview": "Event *event;"
        },
        {
          "name": "AnimationStateEvent",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 112
            }
          },
          "preview": "AnimationStateEvent(EventType type, TrackEntry *entry, Event *event) : type(type), entry(entry), event(event){};"
        }
      ]
    },
    {
      "name": "EventListener",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 50,
          "character": 1
        }
      },
      "preview": "struct EventListener : public AnimationStateListenerObject {",
      "supertypes": [
        "AnimationStateListenerObject"
      ],
      "members": [
        {
          "name": "events",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 35
            }
          },
          "preview": "Vector<AnimationStateEvent> events;"
        },
        {
          "name": "callback",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "void callback(AnimationState *state, EventType type, TrackEntry *entry, Event *event) {"
        }
      ]
    },
    {
      "name": "_spine_atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_atlas {",
      "members": [
        {
          "name": "atlas",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 12
            }
          },
          "preview": "void *atlas;"
        },
        {
          "name": "imagePaths",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 18
            }
          },
          "preview": "utf8 **imagePaths;"
        },
        {
          "name": "numImagePaths",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 22
            }
          },
          "preview": "int32_t numImagePaths;"
        },
        {
          "name": "error",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 12
            }
          },
          "preview": "utf8 *error;"
        }
      ]
    },
    {
      "name": "_spine_atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 57,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 14
        }
      },
      "preview": "} _spine_atlas;"
    },
    {
      "name": "_spine_skeleton_data_result",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 59,
          "character": 0
        },
        "end": {
          "line": 62,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_skeleton_data_result {",
      "members": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 33
            }
          },
          "preview": "spine_skeleton_data skeletonData;"
        },
        {
          "name": "error",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 12
            }
          },
          "preview": "utf8 *error;"
        }
      ]
    },
    {
      "name": "_spine_skeleton_data_result",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 62,
          "character": 0
        },
        "end": {
          "line": 62,
          "character": 29
        }
      },
      "preview": "} _spine_skeleton_data_result;"
    },
    {
      "name": "_spine_bounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_bounds {",
      "members": [
        {
          "name": "x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 8
            }
          },
          "preview": "float x, y, width, height;"
        },
        {
          "name": "y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 11
            }
          },
          "preview": "float x, y, width, height;"
        },
        {
          "name": "width",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 18
            }
          },
          "preview": "float x, y, width, height;"
        },
        {
          "name": "height",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 26
            }
          },
          "preview": "float x, y, width, height;"
        }
      ]
    },
    {
      "name": "_spine_bounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 66,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 15
        }
      },
      "preview": "} _spine_bounds;"
    },
    {
      "name": "_spine_vector",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_vector {",
      "members": [
        {
          "name": "x",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 8
            }
          },
          "preview": "float x, y;"
        },
        {
          "name": "y",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 11
            }
          },
          "preview": "float x, y;"
        }
      ]
    },
    {
      "name": "_spine_vector",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 70,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 15
        }
      },
      "preview": "} _spine_vector;"
    },
    {
      "name": "_spine_skeleton_drawable",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 72,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_skeleton_drawable : public SpineObject {",
      "supertypes": [
        "SpineObject"
      ],
      "members": [
        {
          "name": "skeleton",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 24
            }
          },
          "preview": "spine_skeleton skeleton;"
        },
        {
          "name": "animationState",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 37
            }
          },
          "preview": "spine_animation_state animationState;"
        },
        {
          "name": "animationStateData",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 46
            }
          },
          "preview": "spine_animation_state_data animationStateData;"
        },
        {
          "name": "animationStateEvents",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 50
            }
          },
          "preview": "spine_animation_state_events animationStateEvents;"
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer *renderer;"
        }
      ]
    },
    {
      "name": "_spine_skeleton_drawable",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 78,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 26
        }
      },
      "preview": "} _spine_skeleton_drawable;",
      "supertypes": [
        "SpineObject"
      ]
    },
    {
      "name": "_spine_skin_entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 80,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_skin_entry {",
      "members": [
        {
          "name": "slotIndex",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 18
            }
          },
          "preview": "int32_t slotIndex;"
        },
        {
          "name": "name",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 11
            }
          },
          "preview": "utf8 *name;"
        },
        {
          "name": "attachment",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 28
            }
          },
          "preview": "spine_attachment attachment;"
        }
      ]
    },
    {
      "name": "_spine_skin_entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 84,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 19
        }
      },
      "preview": "} _spine_skin_entry;"
    },
    {
      "name": "_spine_skin_entries",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 86,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 1
        }
      },
      "preview": "typedef struct _spine_skin_entries {",
      "members": [
        {
          "name": "numEntries",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 19
            }
          },
          "preview": "int32_t numEntries;"
        },
        {
          "name": "entries",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 27
            }
          },
          "preview": "_spine_skin_entry *entries;"
        }
      ]
    },
    {
      "name": "_spine_skin_entries",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 89,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 21
        }
      },
      "preview": "} _spine_skin_entries;"
    },
    {
      "name": "LiteTextureLoad",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 184,
          "character": 0
        },
        "end": {
          "line": 191,
          "character": 1
        }
      },
      "preview": "class LiteTextureLoad : public TextureLoader {",
      "supertypes": [
        "TextureLoader"
      ],
      "members": [
        {
          "name": "load",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 185,
              "character": 0
            },
            "end": {
              "line": 187,
              "character": 2
            }
          },
          "preview": "void load(AtlasPage &page, const String &path) {"
        },
        {
          "name": "unload",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 190,
              "character": 2
            }
          },
          "preview": "void unload(void *texture) {"
        }
      ]
    },
    {
      "name": "CallbackTextureLoad",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.cpp",
      "range": {
        "start": {
          "line": 208,
          "character": 0
        },
        "end": {
          "line": 227,
          "character": 1
        }
      },
      "preview": "class CallbackTextureLoad : public TextureLoader {",
      "supertypes": [
        "TextureLoader"
      ],
      "members": [
        {
          "name": "loadCb",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 209,
              "character": 0
            },
            "end": {
              "line": 209,
              "character": 38
            }
          },
          "preview": "spine_texture_loader_load_func loadCb;"
        },
        {
          "name": "unloadCb",
          "kind": "field",
          "file": "",
          "range": {
            "start": {
              "line": 210,
              "character": 0
            },
            "end": {
              "line": 210,
              "character": 42
            }
          },
          "preview": "spine_texture_loader_unload_func unloadCb;"
        },
        {
          "name": "CallbackTextureLoad",
          "kind": "constructor",
          "file": "",
          "range": {
            "start": {
              "line": 213,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 62
            }
          },
          "preview": "CallbackTextureLoad() : loadCb(nullptr), unloadCb(nullptr) {}"
        },
        {
          "name": "setCallbacks",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 218,
              "character": 2
            }
          },
          "preview": "void setCallbacks(spine_texture_loader_load_func load, spine_texture_loader_unload_func unload) {"
        },
        {
          "name": "load",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 220,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 2
            }
          },
          "preview": "void load(AtlasPage &page, const String &path) {"
        },
        {
          "name": "unload",
          "kind": "method",
          "file": "",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 226,
              "character": 2
            }
          },
          "preview": "void unload(void *texture) {"
        }
      ]
    },
    {
      "name": "spine_skeleton_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton)"
    },
    {
      "name": "spine_skeleton_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton)"
    },
    {
      "name": "spine_skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 32
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton)"
    },
    {
      "name": "spine_skeleton_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data)"
    },
    {
      "name": "spine_skeleton_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data)"
    },
    {
      "name": "spine_skeleton_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 64,
          "character": 37
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data)"
    },
    {
      "name": "spine_bone_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone)"
    },
    {
      "name": "spine_bone_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone)"
    },
    {
      "name": "spine_bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 65,
          "character": 0
        },
        "end": {
          "line": 65,
          "character": 28
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone)"
    },
    {
      "name": "spine_bone_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 66,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone_data)"
    },
    {
      "name": "spine_bone_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 66,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone_data)"
    },
    {
      "name": "spine_bone_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 66,
          "character": 0
        },
        "end": {
          "line": 66,
          "character": 33
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bone_data)"
    },
    {
      "name": "spine_slot_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot)"
    },
    {
      "name": "spine_slot_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot)"
    },
    {
      "name": "spine_slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 67,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 28
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot)"
    },
    {
      "name": "spine_slot_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 68,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot_data)"
    },
    {
      "name": "spine_slot_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 68,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot_data)"
    },
    {
      "name": "spine_slot_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 68,
          "character": 0
        },
        "end": {
          "line": 68,
          "character": 33
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_slot_data)"
    },
    {
      "name": "spine_skin_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin)"
    },
    {
      "name": "spine_skin_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin)"
    },
    {
      "name": "spine_skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 69,
          "character": 0
        },
        "end": {
          "line": 69,
          "character": 28
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin)"
    },
    {
      "name": "spine_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 70,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_attachment)"
    },
    {
      "name": "spine_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 70,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_attachment)"
    },
    {
      "name": "spine_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 70,
          "character": 0
        },
        "end": {
          "line": 70,
          "character": 34
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_attachment)"
    },
    {
      "name": "spine_region_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 71,
          "character": 0
        },
        "end": {
          "line": 71,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_region_attachment)"
    },
    {
      "name": "spine_region_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 71,
          "character": 0
        },
        "end": {
          "line": 71,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_region_attachment)"
    },
    {
      "name": "spine_region_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 71,
          "character": 0
        },
        "end": {
          "line": 71,
          "character": 41
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_region_attachment)"
    },
    {
      "name": "spine_vertex_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 72,
          "character": 0
        },
        "end": {
          "line": 72,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vertex_attachment)"
    },
    {
      "name": "spine_vertex_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 72,
          "character": 0
        },
        "end": {
          "line": 72,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vertex_attachment)"
    },
    {
      "name": "spine_vertex_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 72,
          "character": 0
        },
        "end": {
          "line": 72,
          "character": 41
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vertex_attachment)"
    },
    {
      "name": "spine_mesh_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 73,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_mesh_attachment)"
    },
    {
      "name": "spine_mesh_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 73,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_mesh_attachment)"
    },
    {
      "name": "spine_mesh_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 73,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_mesh_attachment)"
    },
    {
      "name": "spine_clipping_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 74,
          "character": 0
        },
        "end": {
          "line": 74,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_clipping_attachment)"
    },
    {
      "name": "spine_clipping_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 74,
          "character": 0
        },
        "end": {
          "line": 74,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_clipping_attachment)"
    },
    {
      "name": "spine_clipping_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 74,
          "character": 0
        },
        "end": {
          "line": 74,
          "character": 43
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_clipping_attachment)"
    },
    {
      "name": "spine_bounding_box_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 75,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounding_box_attachment)"
    },
    {
      "name": "spine_bounding_box_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 75,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounding_box_attachment)"
    },
    {
      "name": "spine_bounding_box_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 75,
          "character": 47
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounding_box_attachment)"
    },
    {
      "name": "spine_path_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 76,
          "character": 0
        },
        "end": {
          "line": 76,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_attachment)"
    },
    {
      "name": "spine_path_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 76,
          "character": 0
        },
        "end": {
          "line": 76,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_attachment)"
    },
    {
      "name": "spine_path_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 76,
          "character": 0
        },
        "end": {
          "line": 76,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_attachment)"
    },
    {
      "name": "spine_point_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 77,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_point_attachment)"
    },
    {
      "name": "spine_point_attachment_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 77,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_point_attachment)"
    },
    {
      "name": "spine_point_attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 77,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 40
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_point_attachment)"
    },
    {
      "name": "spine_texture_region_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 78,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_texture_region)"
    },
    {
      "name": "spine_texture_region_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 78,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_texture_region)"
    },
    {
      "name": "spine_texture_region",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 78,
          "character": 0
        },
        "end": {
          "line": 78,
          "character": 38
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_texture_region)"
    },
    {
      "name": "spine_sequence_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 79,
          "character": 0
        },
        "end": {
          "line": 79,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_sequence)"
    },
    {
      "name": "spine_sequence_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 79,
          "character": 0
        },
        "end": {
          "line": 79,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_sequence)"
    },
    {
      "name": "spine_sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 79,
          "character": 0
        },
        "end": {
          "line": 79,
          "character": 32
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_sequence)"
    },
    {
      "name": "spine_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 80,
          "character": 0
        },
        "end": {
          "line": 80,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint)"
    },
    {
      "name": "spine_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 80,
          "character": 0
        },
        "end": {
          "line": 80,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint)"
    },
    {
      "name": "spine_constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 80,
          "character": 0
        },
        "end": {
          "line": 80,
          "character": 34
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint)"
    },
    {
      "name": "spine_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 81,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint_data)"
    },
    {
      "name": "spine_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 81,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint_data)"
    },
    {
      "name": "spine_constraint_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 81,
          "character": 0
        },
        "end": {
          "line": 81,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_constraint_data)"
    },
    {
      "name": "spine_ik_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 82,
          "character": 0
        },
        "end": {
          "line": 82,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint)"
    },
    {
      "name": "spine_ik_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 82,
          "character": 0
        },
        "end": {
          "line": 82,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint)"
    },
    {
      "name": "spine_ik_constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 82,
          "character": 0
        },
        "end": {
          "line": 82,
          "character": 37
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint)"
    },
    {
      "name": "spine_ik_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 83,
          "character": 0
        },
        "end": {
          "line": 83,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint_data)"
    },
    {
      "name": "spine_ik_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 83,
          "character": 0
        },
        "end": {
          "line": 83,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint_data)"
    },
    {
      "name": "spine_ik_constraint_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 83,
          "character": 0
        },
        "end": {
          "line": 83,
          "character": 42
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_ik_constraint_data)"
    },
    {
      "name": "spine_transform_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 84,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint)"
    },
    {
      "name": "spine_transform_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 84,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint)"
    },
    {
      "name": "spine_transform_constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 84,
          "character": 0
        },
        "end": {
          "line": 84,
          "character": 44
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint)"
    },
    {
      "name": "spine_transform_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 85,
          "character": 0
        },
        "end": {
          "line": 85,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint_data)"
    },
    {
      "name": "spine_transform_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 85,
          "character": 0
        },
        "end": {
          "line": 85,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint_data)"
    },
    {
      "name": "spine_transform_constraint_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 85,
          "character": 0
        },
        "end": {
          "line": 85,
          "character": 49
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_transform_constraint_data)"
    },
    {
      "name": "spine_path_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 86,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint)"
    },
    {
      "name": "spine_path_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 86,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint)"
    },
    {
      "name": "spine_path_constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 86,
          "character": 0
        },
        "end": {
          "line": 86,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint)"
    },
    {
      "name": "spine_path_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 87,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint_data)"
    },
    {
      "name": "spine_path_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 87,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint_data)"
    },
    {
      "name": "spine_path_constraint_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 87,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 44
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_path_constraint_data)"
    },
    {
      "name": "spine_physics_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 88,
          "character": 0
        },
        "end": {
          "line": 88,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint)"
    },
    {
      "name": "spine_physics_constraint_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 88,
          "character": 0
        },
        "end": {
          "line": 88,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint)"
    },
    {
      "name": "spine_physics_constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 88,
          "character": 0
        },
        "end": {
          "line": 88,
          "character": 42
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint)"
    },
    {
      "name": "spine_physics_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 89,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint_data)"
    },
    {
      "name": "spine_physics_constraint_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 89,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint_data)"
    },
    {
      "name": "spine_physics_constraint_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 89,
          "character": 0
        },
        "end": {
          "line": 89,
          "character": 47
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_physics_constraint_data)"
    },
    {
      "name": "spine_animation_state_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 90,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state)"
    },
    {
      "name": "spine_animation_state_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 90,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state)"
    },
    {
      "name": "spine_animation_state",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 90,
          "character": 0
        },
        "end": {
          "line": 90,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state)"
    },
    {
      "name": "spine_animation_state_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 91,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_data)"
    },
    {
      "name": "spine_animation_state_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 91,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_data)"
    },
    {
      "name": "spine_animation_state_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 91,
          "character": 0
        },
        "end": {
          "line": 91,
          "character": 44
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_data)"
    },
    {
      "name": "spine_animation_state_events_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 92,
          "character": 0
        },
        "end": {
          "line": 92,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_events)"
    },
    {
      "name": "spine_animation_state_events_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 92,
          "character": 0
        },
        "end": {
          "line": 92,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_events)"
    },
    {
      "name": "spine_animation_state_events",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 92,
          "character": 0
        },
        "end": {
          "line": 92,
          "character": 46
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation_state_events)"
    },
    {
      "name": "spine_event_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 93,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event)"
    },
    {
      "name": "spine_event_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 93,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event)"
    },
    {
      "name": "spine_event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 93,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 29
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event)"
    },
    {
      "name": "spine_event_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 94,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event_data)"
    },
    {
      "name": "spine_event_data_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 94,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event_data)"
    },
    {
      "name": "spine_event_data",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 94,
          "character": 0
        },
        "end": {
          "line": 94,
          "character": 34
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_event_data)"
    },
    {
      "name": "spine_track_entry_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 95,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_track_entry)"
    },
    {
      "name": "spine_track_entry_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 95,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_track_entry)"
    },
    {
      "name": "spine_track_entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 95,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 35
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_track_entry)"
    },
    {
      "name": "spine_animation_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 96,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation)"
    },
    {
      "name": "spine_animation_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 96,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation)"
    },
    {
      "name": "spine_animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 96,
          "character": 0
        },
        "end": {
          "line": 96,
          "character": 33
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_animation)"
    },
    {
      "name": "spine_atlas_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 97,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_atlas)"
    },
    {
      "name": "spine_atlas_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 97,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_atlas)"
    },
    {
      "name": "spine_atlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 97,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 29
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_atlas)"
    },
    {
      "name": "spine_skeleton_data_result_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 98,
          "character": 0
        },
        "end": {
          "line": 98,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data_result)"
    },
    {
      "name": "spine_skeleton_data_result_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 98,
          "character": 0
        },
        "end": {
          "line": 98,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data_result)"
    },
    {
      "name": "spine_skeleton_data_result",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 98,
          "character": 0
        },
        "end": {
          "line": 98,
          "character": 44
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_data_result)"
    },
    {
      "name": "spine_render_command_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 99,
          "character": 0
        },
        "end": {
          "line": 99,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_render_command)"
    },
    {
      "name": "spine_render_command_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 99,
          "character": 0
        },
        "end": {
          "line": 99,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_render_command)"
    },
    {
      "name": "spine_render_command",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 99,
          "character": 0
        },
        "end": {
          "line": 99,
          "character": 38
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_render_command)"
    },
    {
      "name": "spine_bounds_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 100,
          "character": 0
        },
        "end": {
          "line": 100,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounds)"
    },
    {
      "name": "spine_bounds_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 100,
          "character": 0
        },
        "end": {
          "line": 100,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounds)"
    },
    {
      "name": "spine_bounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 100,
          "character": 0
        },
        "end": {
          "line": 100,
          "character": 30
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_bounds)"
    },
    {
      "name": "spine_color_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 101,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_color)"
    },
    {
      "name": "spine_color_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 101,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_color)"
    },
    {
      "name": "spine_color",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 101,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 29
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_color)"
    },
    {
      "name": "spine_vector_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 102,
          "character": 0
        },
        "end": {
          "line": 102,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vector)"
    },
    {
      "name": "spine_vector_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 102,
          "character": 0
        },
        "end": {
          "line": 102,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vector)"
    },
    {
      "name": "spine_vector",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 102,
          "character": 0
        },
        "end": {
          "line": 102,
          "character": 30
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_vector)"
    },
    {
      "name": "spine_skeleton_drawable_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 103,
          "character": 0
        },
        "end": {
          "line": 103,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_drawable)"
    },
    {
      "name": "spine_skeleton_drawable_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 103,
          "character": 0
        },
        "end": {
          "line": 103,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_drawable)"
    },
    {
      "name": "spine_skeleton_drawable",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 103,
          "character": 0
        },
        "end": {
          "line": 103,
          "character": 41
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_drawable)"
    },
    {
      "name": "spine_skin_entry_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 104,
          "character": 0
        },
        "end": {
          "line": 104,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entry)"
    },
    {
      "name": "spine_skin_entry_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 104,
          "character": 0
        },
        "end": {
          "line": 104,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entry)"
    },
    {
      "name": "spine_skin_entry",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 104,
          "character": 0
        },
        "end": {
          "line": 104,
          "character": 34
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entry)"
    },
    {
      "name": "spine_skin_entries_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 105,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entries)"
    },
    {
      "name": "spine_skin_entries_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 105,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entries)"
    },
    {
      "name": "spine_skin_entries",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 105,
          "character": 0
        },
        "end": {
          "line": 105,
          "character": 36
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skin_entries)"
    },
    {
      "name": "spine_skeleton_bounds_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 106,
          "character": 0
        },
        "end": {
          "line": 106,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_bounds)"
    },
    {
      "name": "spine_skeleton_bounds_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 106,
          "character": 0
        },
        "end": {
          "line": 106,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_bounds)"
    },
    {
      "name": "spine_skeleton_bounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 106,
          "character": 0
        },
        "end": {
          "line": 106,
          "character": 39
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_skeleton_bounds)"
    },
    {
      "name": "spine_polygon_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 107,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_polygon)"
    },
    {
      "name": "spine_polygon_wrapper",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 107,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 17
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_polygon)"
    },
    {
      "name": "spine_polygon",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 107,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 31
        }
      },
      "preview": "SPINE_OPAQUE_TYPE(spine_polygon)"
    },
    {
      "name": "utf8",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 111,
          "character": 0
        },
        "end": {
          "line": 111,
          "character": 17
        }
      },
      "preview": "typedef char utf8;"
    },
    {
      "name": "spine_blend_mode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 115,
          "character": 0
        },
        "end": {
          "line": 120,
          "character": 1
        }
      },
      "preview": "typedef enum spine_blend_mode {",
      "members": []
    },
    {
      "name": "SPINE_BLEND_MODE_NORMAL",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 116,
          "character": 0
        },
        "end": {
          "line": 116,
          "character": 28
        }
      },
      "preview": "SPINE_BLEND_MODE_NORMAL = 0,"
    },
    {
      "name": "SPINE_BLEND_MODE_ADDITIVE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 117,
          "character": 0
        },
        "end": {
          "line": 117,
          "character": 26
        }
      },
      "preview": "SPINE_BLEND_MODE_ADDITIVE,"
    },
    {
      "name": "SPINE_BLEND_MODE_MULTIPLY",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 118,
          "character": 0
        },
        "end": {
          "line": 118,
          "character": 26
        }
      },
      "preview": "SPINE_BLEND_MODE_MULTIPLY,"
    },
    {
      "name": "SPINE_BLEND_MODE_SCREEN",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 119,
          "character": 0
        },
        "end": {
          "line": 119,
          "character": 24
        }
      },
      "preview": "SPINE_BLEND_MODE_SCREEN"
    },
    {
      "name": "spine_blend_mode",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 120,
          "character": 0
        },
        "end": {
          "line": 120,
          "character": 18
        }
      },
      "preview": "} spine_blend_mode;"
    },
    {
      "name": "spine_mix_blend",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 122,
          "character": 0
        },
        "end": {
          "line": 127,
          "character": 1
        }
      },
      "preview": "typedef enum spine_mix_blend {",
      "members": []
    },
    {
      "name": "SPINE_MIX_BLEND_SETUP",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 123,
          "character": 0
        },
        "end": {
          "line": 123,
          "character": 26
        }
      },
      "preview": "SPINE_MIX_BLEND_SETUP = 0,"
    },
    {
      "name": "SPINE_MIX_BLEND_FIRST",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 124,
          "character": 0
        },
        "end": {
          "line": 124,
          "character": 22
        }
      },
      "preview": "SPINE_MIX_BLEND_FIRST,"
    },
    {
      "name": "SPINE_MIX_BLEND_REPLACE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 125,
          "character": 0
        },
        "end": {
          "line": 125,
          "character": 24
        }
      },
      "preview": "SPINE_MIX_BLEND_REPLACE,"
    },
    {
      "name": "SPINE_MIX_BLEND_ADD",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 126,
          "character": 0
        },
        "end": {
          "line": 126,
          "character": 20
        }
      },
      "preview": "SPINE_MIX_BLEND_ADD"
    },
    {
      "name": "spine_mix_blend",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 127,
          "character": 0
        },
        "end": {
          "line": 127,
          "character": 17
        }
      },
      "preview": "} spine_mix_blend;"
    },
    {
      "name": "spine_event_type",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 129,
          "character": 0
        },
        "end": {
          "line": 136,
          "character": 1
        }
      },
      "preview": "typedef enum spine_event_type {",
      "members": []
    },
    {
      "name": "SPINE_EVENT_TYPE_START",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 130,
          "character": 0
        },
        "end": {
          "line": 130,
          "character": 27
        }
      },
      "preview": "SPINE_EVENT_TYPE_START = 0,"
    },
    {
      "name": "SPINE_EVENT_TYPE_INTERRUPT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 131,
          "character": 0
        },
        "end": {
          "line": 131,
          "character": 27
        }
      },
      "preview": "SPINE_EVENT_TYPE_INTERRUPT,"
    },
    {
      "name": "SPINE_EVENT_TYPE_END",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 132,
          "character": 0
        },
        "end": {
          "line": 132,
          "character": 21
        }
      },
      "preview": "SPINE_EVENT_TYPE_END,"
    },
    {
      "name": "SPINE_EVENT_TYPE_COMPLETE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 133,
          "character": 0
        },
        "end": {
          "line": 133,
          "character": 26
        }
      },
      "preview": "SPINE_EVENT_TYPE_COMPLETE,"
    },
    {
      "name": "SPINE_EVENT_TYPE_DISPOSE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 134,
          "character": 0
        },
        "end": {
          "line": 134,
          "character": 25
        }
      },
      "preview": "SPINE_EVENT_TYPE_DISPOSE,"
    },
    {
      "name": "SPINE_EVENT_TYPE_EVENT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 135,
          "character": 0
        },
        "end": {
          "line": 135,
          "character": 23
        }
      },
      "preview": "SPINE_EVENT_TYPE_EVENT"
    },
    {
      "name": "spine_event_type",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 136,
          "character": 0
        },
        "end": {
          "line": 136,
          "character": 18
        }
      },
      "preview": "} spine_event_type;"
    },
    {
      "name": "spine_attachment_type",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 138,
          "character": 0
        },
        "end": {
          "line": 145,
          "character": 1
        }
      },
      "preview": "typedef enum spine_attachment_type {",
      "members": []
    },
    {
      "name": "SPINE_ATTACHMENT_REGION",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 139,
          "character": 0
        },
        "end": {
          "line": 139,
          "character": 28
        }
      },
      "preview": "SPINE_ATTACHMENT_REGION = 0,"
    },
    {
      "name": "SPINE_ATTACHMENT_MESH",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 140,
          "character": 0
        },
        "end": {
          "line": 140,
          "character": 22
        }
      },
      "preview": "SPINE_ATTACHMENT_MESH,"
    },
    {
      "name": "SPINE_ATTACHMENT_CLIPPING",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 141,
          "character": 0
        },
        "end": {
          "line": 141,
          "character": 26
        }
      },
      "preview": "SPINE_ATTACHMENT_CLIPPING,"
    },
    {
      "name": "SPINE_ATTACHMENT_BOUNDING_BOX",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 142,
          "character": 0
        },
        "end": {
          "line": 142,
          "character": 30
        }
      },
      "preview": "SPINE_ATTACHMENT_BOUNDING_BOX,"
    },
    {
      "name": "SPINE_ATTACHMENT_PATH",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 143,
          "character": 0
        },
        "end": {
          "line": 143,
          "character": 22
        }
      },
      "preview": "SPINE_ATTACHMENT_PATH,"
    },
    {
      "name": "SPINE_ATTACHMENT_POINT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 144,
          "character": 0
        },
        "end": {
          "line": 144,
          "character": 23
        }
      },
      "preview": "SPINE_ATTACHMENT_POINT,"
    },
    {
      "name": "spine_attachment_type",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 145,
          "character": 0
        },
        "end": {
          "line": 145,
          "character": 23
        }
      },
      "preview": "} spine_attachment_type;"
    },
    {
      "name": "spine_constraint_type",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 147,
          "character": 0
        },
        "end": {
          "line": 151,
          "character": 1
        }
      },
      "preview": "typedef enum spine_constraint_type {",
      "members": []
    },
    {
      "name": "SPINE_CONSTRAINT_IK",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 148,
          "character": 0
        },
        "end": {
          "line": 148,
          "character": 20
        }
      },
      "preview": "SPINE_CONSTRAINT_IK,"
    },
    {
      "name": "SPINE_CONSTRAINT_TRANSFORM",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 149,
          "character": 0
        },
        "end": {
          "line": 149,
          "character": 27
        }
      },
      "preview": "SPINE_CONSTRAINT_TRANSFORM,"
    },
    {
      "name": "SPINE_CONSTRAINT_PATH",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 150,
          "character": 0
        },
        "end": {
          "line": 150,
          "character": 22
        }
      },
      "preview": "SPINE_CONSTRAINT_PATH"
    },
    {
      "name": "spine_constraint_type",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 151,
          "character": 0
        },
        "end": {
          "line": 151,
          "character": 23
        }
      },
      "preview": "} spine_constraint_type;"
    },
    {
      "name": "spine_inherit",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 153,
          "character": 0
        },
        "end": {
          "line": 159,
          "character": 1
        }
      },
      "preview": "typedef enum spine_inherit {",
      "members": []
    },
    {
      "name": "SPINE_INHERIT_NORMAL",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 154,
          "character": 0
        },
        "end": {
          "line": 154,
          "character": 25
        }
      },
      "preview": "SPINE_INHERIT_NORMAL = 0,"
    },
    {
      "name": "SPINE_INHERIT_ONLY_TRANSLATION",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 155,
          "character": 0
        },
        "end": {
          "line": 155,
          "character": 31
        }
      },
      "preview": "SPINE_INHERIT_ONLY_TRANSLATION,"
    },
    {
      "name": "SPINE_INHERIT_NO_ROTATION_OR_REFLECTION",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 156,
          "character": 0
        },
        "end": {
          "line": 156,
          "character": 40
        }
      },
      "preview": "SPINE_INHERIT_NO_ROTATION_OR_REFLECTION,"
    },
    {
      "name": "SPINE_INHERIT_NO_SCALE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 157,
          "character": 0
        },
        "end": {
          "line": 157,
          "character": 23
        }
      },
      "preview": "SPINE_INHERIT_NO_SCALE,"
    },
    {
      "name": "SPINE_INHERIT_NO_SCALE_OR_REFLECTION",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 158,
          "character": 0
        },
        "end": {
          "line": 158,
          "character": 37
        }
      },
      "preview": "SPINE_INHERIT_NO_SCALE_OR_REFLECTION"
    },
    {
      "name": "spine_inherit",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 159,
          "character": 0
        },
        "end": {
          "line": 159,
          "character": 15
        }
      },
      "preview": "} spine_inherit;"
    },
    {
      "name": "spine_position_mode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 161,
          "character": 0
        },
        "end": {
          "line": 164,
          "character": 1
        }
      },
      "preview": "typedef enum spine_position_mode {",
      "members": []
    },
    {
      "name": "SPINE_POSITION_MODE_FIXED",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 162,
          "character": 0
        },
        "end": {
          "line": 162,
          "character": 30
        }
      },
      "preview": "SPINE_POSITION_MODE_FIXED = 0,"
    },
    {
      "name": "SPINE_POSITION_MODE_PERCENT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 163,
          "character": 0
        },
        "end": {
          "line": 163,
          "character": 28
        }
      },
      "preview": "SPINE_POSITION_MODE_PERCENT"
    },
    {
      "name": "spine_position_mode",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 164,
          "character": 0
        },
        "end": {
          "line": 164,
          "character": 21
        }
      },
      "preview": "} spine_position_mode;"
    },
    {
      "name": "spine_spacing_mode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 166,
          "character": 0
        },
        "end": {
          "line": 171,
          "character": 1
        }
      },
      "preview": "typedef enum spine_spacing_mode {",
      "members": []
    },
    {
      "name": "SPINE_SPACING_MODE_LENGTH",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 167,
          "character": 0
        },
        "end": {
          "line": 167,
          "character": 30
        }
      },
      "preview": "SPINE_SPACING_MODE_LENGTH = 0,"
    },
    {
      "name": "SPINE_SPACING_MODE_FIXED",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 168,
          "character": 0
        },
        "end": {
          "line": 168,
          "character": 25
        }
      },
      "preview": "SPINE_SPACING_MODE_FIXED,"
    },
    {
      "name": "SPINE_SPACING_MODE_PERCENT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 169,
          "character": 0
        },
        "end": {
          "line": 169,
          "character": 27
        }
      },
      "preview": "SPINE_SPACING_MODE_PERCENT,"
    },
    {
      "name": "SPINE_SPACING_MODE_PROPORTIONAL",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 170,
          "character": 0
        },
        "end": {
          "line": 170,
          "character": 32
        }
      },
      "preview": "SPINE_SPACING_MODE_PROPORTIONAL"
    },
    {
      "name": "spine_spacing_mode",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 171,
          "character": 0
        },
        "end": {
          "line": 171,
          "character": 20
        }
      },
      "preview": "} spine_spacing_mode;"
    },
    {
      "name": "spine_rotate_mode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 173,
          "character": 0
        },
        "end": {
          "line": 177,
          "character": 1
        }
      },
      "preview": "typedef enum spine_rotate_mode {",
      "members": []
    },
    {
      "name": "SPINE_ROTATE_MODE_TANGENT",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 174,
          "character": 0
        },
        "end": {
          "line": 174,
          "character": 30
        }
      },
      "preview": "SPINE_ROTATE_MODE_TANGENT = 0,"
    },
    {
      "name": "SPINE_ROTATE_MODE_CHAIN",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 175,
          "character": 0
        },
        "end": {
          "line": 175,
          "character": 24
        }
      },
      "preview": "SPINE_ROTATE_MODE_CHAIN,"
    },
    {
      "name": "SPINE_ROTATE_MODE_CHAIN_SCALE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 176,
          "character": 0
        },
        "end": {
          "line": 176,
          "character": 30
        }
      },
      "preview": "SPINE_ROTATE_MODE_CHAIN_SCALE"
    },
    {
      "name": "spine_rotate_mode",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 177,
          "character": 0
        },
        "end": {
          "line": 177,
          "character": 19
        }
      },
      "preview": "} spine_rotate_mode;"
    },
    {
      "name": "spine_physics",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 179,
          "character": 0
        },
        "end": {
          "line": 185,
          "character": 1
        }
      },
      "preview": "typedef enum spine_physics {",
      "members": []
    },
    {
      "name": "SPINE_PHYSICS_NONE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 180,
          "character": 0
        },
        "end": {
          "line": 180,
          "character": 23
        }
      },
      "preview": "SPINE_PHYSICS_NONE = 0,"
    },
    {
      "name": "SPINE_PHYSICS_RESET",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 181,
          "character": 0
        },
        "end": {
          "line": 181,
          "character": 20
        }
      },
      "preview": "SPINE_PHYSICS_RESET,"
    },
    {
      "name": "SPINE_PHYSICS_UPDATE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 182,
          "character": 0
        },
        "end": {
          "line": 182,
          "character": 21
        }
      },
      "preview": "SPINE_PHYSICS_UPDATE,"
    },
    {
      "name": "SPINE_PHYSICS_POSE",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 183,
          "character": 0
        },
        "end": {
          "line": 183,
          "character": 19
        }
      },
      "preview": "SPINE_PHYSICS_POSE"
    },
    {
      "name": "spine_physics",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 185,
          "character": 0
        },
        "end": {
          "line": 185,
          "character": 15
        }
      },
      "preview": "} spine_physics;"
    },
    {
      "name": "spine_bool",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 189,
          "character": 0
        },
        "end": {
          "line": 189,
          "character": 26
        }
      },
      "preview": "typedef int32_t spine_bool;"
    },
    {
      "name": "spine_texture_loader_load_func",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 191,
          "character": 0
        },
        "end": {
          "line": 191,
          "character": 65
        }
      },
      "preview": "typedef void* (*spine_texture_loader_load_func)(const char *path);"
    },
    {
      "name": "spine_texture_loader_unload_func",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-cpp/spine-cpp-lite/spine-cpp-lite.h",
      "range": {
        "start": {
          "line": 193,
          "character": 0
        },
        "end": {
          "line": 193,
          "character": 63
        }
      },
      "preview": "typedef void (*spine_texture_loader_unload_func)(void *texture);"
    }
  ]
}